
ME_507_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08008eb0  08008eb0  00009eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000008  080092a8  080092a8  0000a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b0  080092b0  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b0  080092b0  0000a2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092b4  080092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  080092b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001f0  080094a8  0000b1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080094a8  0000b44c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c39  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  0001ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c95  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d1e  00000000  00000000  000211d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001379e  00000000  00000000  00048ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f44fb  00000000  00000000  0005c691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150b8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005518  00000000  00000000  00150bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001560e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e98 	.word	0x08008e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08008e98 	.word	0x08008e98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b095      	sub	sp, #84	@ 0x54
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fe21 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f963 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fa97 	bl	80013d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eaa:	f000 fa65 	bl	8001378 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eae:	f000 f9af 	bl	8001210 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // allow for recieving of interrupts through uart
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&char_in, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	499d      	ldr	r1, [pc, #628]	@ (800112c <main+0x294>)
 8000eb6:	489e      	ldr	r0, [pc, #632]	@ (8001130 <main+0x298>)
 8000eb8:	f003 fd6a 	bl	8004990 <HAL_UART_Receive_IT>

  // Start all of the pwm channels
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	489d      	ldr	r0, [pc, #628]	@ (8001134 <main+0x29c>)
 8000ec0:	f002 fd7a 	bl	80039b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	489b      	ldr	r0, [pc, #620]	@ (8001134 <main+0x29c>)
 8000ec8:	f002 fd76 	bl	80039b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4899      	ldr	r0, [pc, #612]	@ (8001134 <main+0x29c>)
 8000ed0:	f002 fd72 	bl	80039b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	4897      	ldr	r0, [pc, #604]	@ (8001134 <main+0x29c>)
 8000ed8:	f002 fd6e 	bl	80039b8 <HAL_TIM_PWM_Start>

  // create motor "objects" (structs)
  Motor m1 = { .timer = &htim1,
 8000edc:	4b96      	ldr	r3, [pc, #600]	@ (8001138 <main+0x2a0>)
 8000ede:	f107 063c 	add.w	r6, r7, #60	@ 0x3c
 8000ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		       .channels = 1,
			   .duty_cycle = 0,
               .enable_flag = 0
  	  	  	  };
  Motor m2 = { .timer = &htim1,
 8000ee8:	4b94      	ldr	r3, [pc, #592]	@ (800113c <main+0x2a4>)
 8000eea:	f107 062c 	add.w	r6, r7, #44	@ 0x2c
 8000eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			   .duty_cycle = 0,
               .enable_flag = 0
  	  	  	  };

  //enable the motors
  motor_enable_disable(&m1,0);
 8000ef4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fb7a 	bl	80015f4 <motor_enable_disable>
  motor_enable_disable(&m2,0);
 8000f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fb74 	bl	80015f4 <motor_enable_disable>
  motor_enable_disable(&m1,1);
 8000f0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f10:	2101      	movs	r1, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fb6e 	bl	80015f4 <motor_enable_disable>
  motor_enable_disable(&m2,1);
 8000f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fb68 	bl	80015f4 <motor_enable_disable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if((char_in == 8 || char_in == 127) && idx > 0){
 8000f24:	4b81      	ldr	r3, [pc, #516]	@ (800112c <main+0x294>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d003      	beq.n	8000f34 <main+0x9c>
 8000f2c:	4b7f      	ldr	r3, [pc, #508]	@ (800112c <main+0x294>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f32:	d10b      	bne.n	8000f4c <main+0xb4>
 8000f34:	4b82      	ldr	r3, [pc, #520]	@ (8001140 <main+0x2a8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd07      	ble.n	8000f4c <main+0xb4>
		  idx = idx - 2;
 8000f3c:	4b80      	ldr	r3, [pc, #512]	@ (8001140 <main+0x2a8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3b02      	subs	r3, #2
 8000f42:	4a7f      	ldr	r2, [pc, #508]	@ (8001140 <main+0x2a8>)
 8000f44:	6013      	str	r3, [r2, #0]
		  char_in = 'i';
 8000f46:	4b79      	ldr	r3, [pc, #484]	@ (800112c <main+0x294>)
 8000f48:	2269      	movs	r2, #105	@ 0x69
 8000f4a:	701a      	strb	r2, [r3, #0]
	  }
	  //HAL_UART_Transmit_IT(&huart2, (uint8_t*)&idx, 1);
	  if(char_in == '\r'){
 8000f4c:	4b77      	ldr	r3, [pc, #476]	@ (800112c <main+0x294>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b0d      	cmp	r3, #13
 8000f52:	d1e7      	bne.n	8000f24 <main+0x8c>
		  char nl = '\n';
 8000f54:	230a      	movs	r3, #10
 8000f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		  if(idx == 5){
 8000f5a:	4b79      	ldr	r3, [pc, #484]	@ (8001140 <main+0x2a8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	f040 80cb 	bne.w	80010fa <main+0x262>
			  if(input_code[0] == 'M' && (input_code[1] == '1' || input_code[1] == '2')){
 8000f64:	4b77      	ldr	r3, [pc, #476]	@ (8001144 <main+0x2ac>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b4d      	cmp	r3, #77	@ 0x4d
 8000f6a:	f040 80c6 	bne.w	80010fa <main+0x262>
 8000f6e:	4b75      	ldr	r3, [pc, #468]	@ (8001144 <main+0x2ac>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	2b31      	cmp	r3, #49	@ 0x31
 8000f74:	d004      	beq.n	8000f80 <main+0xe8>
 8000f76:	4b73      	ldr	r3, [pc, #460]	@ (8001144 <main+0x2ac>)
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	2b32      	cmp	r3, #50	@ 0x32
 8000f7c:	f040 80bd 	bne.w	80010fa <main+0x262>
				  if(strchr((char*)allowed_numbers, input_code[2]) && strchr((char*)allowed_numbers, input_code[3])){
 8000f80:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <main+0x2ac>)
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4870      	ldr	r0, [pc, #448]	@ (8001148 <main+0x2b0>)
 8000f88:	f005 feb7 	bl	8006cfa <strchr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80b3 	beq.w	80010fa <main+0x262>
 8000f94:	4b6b      	ldr	r3, [pc, #428]	@ (8001144 <main+0x2ac>)
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	486b      	ldr	r0, [pc, #428]	@ (8001148 <main+0x2b0>)
 8000f9c:	f005 fead 	bl	8006cfa <strchr>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80a9 	beq.w	80010fa <main+0x262>
					  char input_lvl_str[3];
					  input_lvl_str[0] = input_code[2];
 8000fa8:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <main+0x2ac>)
 8000faa:	789b      	ldrb	r3, [r3, #2]
 8000fac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					  input_lvl_str[1] = input_code[3];
 8000fb0:	4b64      	ldr	r3, [pc, #400]	@ (8001144 <main+0x2ac>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
					  input_lvl = strtol((char*)input_lvl_str,&dummy_ptr,16);
 8000fb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	4963      	ldr	r1, [pc, #396]	@ (800114c <main+0x2b4>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 f90b 	bl	80061dc <strtol>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a61      	ldr	r2, [pc, #388]	@ (8001150 <main+0x2b8>)
 8000fca:	6013      	str	r3, [r2, #0]
					  if(input_lvl >= 128){
 8000fcc:	4b60      	ldr	r3, [pc, #384]	@ (8001150 <main+0x2b8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fd2:	dd26      	ble.n	8001022 <main+0x18a>
						  pwm_lvl = (256-(double)input_lvl)*100/128*-1;
 8000fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8001150 <main+0x2b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff faa3 	bl	8000524 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	495b      	ldr	r1, [pc, #364]	@ (8001154 <main+0x2bc>)
 8000fe8:	f7ff f94e 	bl	8000288 <__aeabi_dsub>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b57      	ldr	r3, [pc, #348]	@ (8001158 <main+0x2c0>)
 8000ffa:	f7ff fafd 	bl	80005f8 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	4b54      	ldr	r3, [pc, #336]	@ (800115c <main+0x2c4>)
 800100c:	f7ff fc1e 	bl	800084c <__aeabi_ddiv>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4614      	mov	r4, r2
 8001016:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800101a:	4b51      	ldr	r3, [pc, #324]	@ (8001160 <main+0x2c8>)
 800101c:	e9c3 4500 	strd	r4, r5, [r3]
 8001020:	e017      	b.n	8001052 <main+0x1ba>
					  }else{
						  pwm_lvl = (double)input_lvl*100/128;
 8001022:	4b4b      	ldr	r3, [pc, #300]	@ (8001150 <main+0x2b8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	4b49      	ldr	r3, [pc, #292]	@ (8001158 <main+0x2c0>)
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b46      	ldr	r3, [pc, #280]	@ (800115c <main+0x2c4>)
 8001044:	f7ff fc02 	bl	800084c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4944      	ldr	r1, [pc, #272]	@ (8001160 <main+0x2c8>)
 800104e:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  if(input_code[1] == '1'){
 8001052:	4b3c      	ldr	r3, [pc, #240]	@ (8001144 <main+0x2ac>)
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	2b31      	cmp	r3, #49	@ 0x31
 8001058:	d10e      	bne.n	8001078 <main+0x1e0>
						  motor_set_duty_cycle(&m1,(int32_t)pwm_lvl);
 800105a:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <main+0x2c8>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd78 	bl	8000b58 <__aeabi_d2iz>
 8001068:	4602      	mov	r2, r0
 800106a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fa47 	bl	8001504 <motor_set_duty_cycle>
 8001076:	e00d      	b.n	8001094 <main+0x1fc>
					  }else{
						  motor_set_duty_cycle(&m2,(int32_t)pwm_lvl);
 8001078:	4b39      	ldr	r3, [pc, #228]	@ (8001160 <main+0x2c8>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd69 	bl	8000b58 <__aeabi_d2iz>
 8001086:	4602      	mov	r2, r0
 8001088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fa38 	bl	8001504 <motor_set_duty_cycle>
					  }
					  char pwm_str[40];
					  //Delays are required to make transmit work
					  HAL_Delay(0.05);
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fda1 	bl	8001bdc <HAL_Delay>
					  HAL_UART_Transmit(&huart2, (uint8_t*)&nl, 1,1000);
 800109a:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 800109e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a2:	2201      	movs	r2, #1
 80010a4:	4822      	ldr	r0, [pc, #136]	@ (8001130 <main+0x298>)
 80010a6:	f003 fb8b 	bl	80047c0 <HAL_UART_Transmit>
					  int len = sprintf(pwm_str, "PWM level: %.2f \n\r", pwm_lvl);
 80010aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <main+0x2c8>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	4638      	mov	r0, r7
 80010b2:	492c      	ldr	r1, [pc, #176]	@ (8001164 <main+0x2cc>)
 80010b4:	f005 fdb6 	bl	8006c24 <siprintf>
 80010b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
					  HAL_Delay(0.05);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fd8e 	bl	8001bdc <HAL_Delay>
					  HAL_UART_Transmit(&huart2, (uint8_t*)&pwm_str, len,1000);
 80010c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4639      	mov	r1, r7
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	4819      	ldr	r0, [pc, #100]	@ (8001130 <main+0x298>)
 80010cc:	f003 fb78 	bl	80047c0 <HAL_UART_Transmit>
					  HAL_Delay(0.05);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fd83 	bl	8001bdc <HAL_Delay>
					  HAL_UART_Transmit(&huart2, (uint8_t*)&nl, 1,1000);
 80010d6:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	2201      	movs	r2, #1
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <main+0x298>)
 80010e2:	f003 fb6d 	bl	80047c0 <HAL_UART_Transmit>
					  HAL_Delay(0.05);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fd78 	bl	8001bdc <HAL_Delay>
					  HAL_UART_Transmit(&huart2, (uint8_t*)13, 1,1000);
 80010ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f0:	2201      	movs	r2, #1
 80010f2:	210d      	movs	r1, #13
 80010f4:	480e      	ldr	r0, [pc, #56]	@ (8001130 <main+0x298>)
 80010f6:	f003 fb63 	bl	80047c0 <HAL_UART_Transmit>
				  }
			  }
		  }
		  strcpy(input_code,"iiiii");
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <main+0x2ac>)
 80010fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001168 <main+0x2d0>)
 80010fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001102:	6018      	str	r0, [r3, #0]
 8001104:	3304      	adds	r3, #4
 8001106:	8019      	strh	r1, [r3, #0]
		  HAL_Delay(0.05);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fd67 	bl	8001bdc <HAL_Delay>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)&nl, 1);
 800110e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <main+0x298>)
 8001118:	f003 fbdc 	bl	80048d4 <HAL_UART_Transmit_IT>
		  char_in = '\0';
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <main+0x294>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		  idx = 0;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <main+0x2a8>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	  if((char_in == 8 || char_in == 127) && idx > 0){
 8001128:	e6fc      	b.n	8000f24 <main+0x8c>
 800112a:	bf00      	nop
 800112c:	200002e0 	.word	0x200002e0
 8001130:	20000258 	.word	0x20000258
 8001134:	2000020c 	.word	0x2000020c
 8001138:	08008ecc 	.word	0x08008ecc
 800113c:	08008edc 	.word	0x08008edc
 8001140:	200002e4 	.word	0x200002e4
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	200002f0 	.word	0x200002f0
 8001150:	200002f4 	.word	0x200002f4
 8001154:	40700000 	.word	0x40700000
 8001158:	40590000 	.word	0x40590000
 800115c:	40600000 	.word	0x40600000
 8001160:	200002e8 	.word	0x200002e8
 8001164:	08008eb0 	.word	0x08008eb0
 8001168:	08008ec4 	.word	0x08008ec4

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	@ 0x58
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2244      	movs	r2, #68	@ 0x44
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fdb5 	bl	8006cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800118e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001192:	f001 f8a7 	bl	80022e4 <HAL_PWREx_ControlVoltageScaling>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800119c:	f000 f9ac 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011aa:	2310      	movs	r3, #16
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	2302      	movs	r3, #2
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b2:	2302      	movs	r3, #2
 80011b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ba:	230a      	movs	r3, #10
 80011bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011be:	2307      	movs	r3, #7
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 f8de 	bl	8002390 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011da:	f000 f98d 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2303      	movs	r3, #3
 80011e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	2104      	movs	r1, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fca6 	bl	8002b48 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001202:	f000 f979 	bl	80014f8 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3758      	adds	r7, #88	@ 0x58
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b096      	sub	sp, #88	@ 0x58
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	222c      	movs	r2, #44	@ 0x2c
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f005 fd54 	bl	8006cea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001242:	4b4b      	ldr	r3, [pc, #300]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001244:	4a4b      	ldr	r2, [pc, #300]	@ (8001374 <MX_TIM1_Init+0x164>)
 8001246:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001248:	4b49      	ldr	r3, [pc, #292]	@ (8001370 <MX_TIM1_Init+0x160>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001254:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001256:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800125a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b44      	ldr	r3, [pc, #272]	@ (8001370 <MX_TIM1_Init+0x160>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001262:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <MX_TIM1_Init+0x160>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800126e:	4840      	ldr	r0, [pc, #256]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001270:	f002 fb4a 	bl	8003908 <HAL_TIM_PWM_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f93d 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800128e:	4619      	mov	r1, r3
 8001290:	4837      	ldr	r0, [pc, #220]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001292:	f003 f941 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800129c:	f000 f92c 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a0:	2360      	movs	r3, #96	@ 0x60
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	482a      	ldr	r0, [pc, #168]	@ (8001370 <MX_TIM1_Init+0x160>)
 80012c6:	f002 fc7d 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012d0:	f000 f912 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d8:	2204      	movs	r2, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4824      	ldr	r0, [pc, #144]	@ (8001370 <MX_TIM1_Init+0x160>)
 80012de:	f002 fc71 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80012e8:	f000 f906 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012f0:	2208      	movs	r2, #8
 80012f2:	4619      	mov	r1, r3
 80012f4:	481e      	ldr	r0, [pc, #120]	@ (8001370 <MX_TIM1_Init+0x160>)
 80012f6:	f002 fc65 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001300:	f000 f8fa 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001304:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001308:	220c      	movs	r2, #12
 800130a:	4619      	mov	r1, r3
 800130c:	4818      	ldr	r0, [pc, #96]	@ (8001370 <MX_TIM1_Init+0x160>)
 800130e:	f002 fc59 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001318:	f000 f8ee 	bl	80014f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800133e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001352:	f003 f969 	bl	8004628 <HAL_TIMEx_ConfigBreakDeadTime>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800135c:	f000 f8cc 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM1_Init+0x160>)
 8001362:	f000 f9e7 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8001366:	bf00      	nop
 8001368:	3758      	adds	r7, #88	@ 0x58
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000020c 	.word	0x2000020c
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 800137e:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <MX_USART2_UART_Init+0x5c>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013bc:	f003 f9b2 	bl	8004724 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 f897 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000258 	.word	0x20000258
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <MX_GPIO_Init+0xc4>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <MX_GPIO_Init+0xc4>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_GPIO_Init+0xc4>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <MX_GPIO_Init+0xc4>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a24      	ldr	r2, [pc, #144]	@ (800149c <MX_GPIO_Init+0xc4>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_GPIO_Init+0xc4>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_GPIO_Init+0xc4>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <MX_GPIO_Init+0xc4>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_GPIO_Init+0xc4>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_GPIO_Init+0xc4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <MX_GPIO_Init+0xc4>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_GPIO_Init+0xc4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001456:	f000 ff1f 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800145a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001460:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <MX_GPIO_Init+0xc8>)
 8001472:	f000 fd67 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001476:	2320      	movs	r3, #32
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f000 fd58 	bl	8001f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	@ 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)&char_in, 1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	490e      	ldr	r1, [pc, #56]	@ (80014e8 <HAL_UART_RxCpltCallback+0x44>)
 80014b0:	480e      	ldr	r0, [pc, #56]	@ (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014b2:	f003 fa0f 	bl	80048d4 <HAL_UART_Transmit_IT>
	if(idx < 5){
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	dc0a      	bgt.n	80014d4 <HAL_UART_RxCpltCallback+0x30>
		input_code[idx] = char_in;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <HAL_UART_RxCpltCallback+0x44>)
 80014c4:	7811      	ldrb	r1, [r2, #0]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_UART_RxCpltCallback+0x50>)
 80014c8:	54d1      	strb	r1, [r2, r3]
		idx = idx + 1;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014d2:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &char_in, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	4904      	ldr	r1, [pc, #16]	@ (80014e8 <HAL_UART_RxCpltCallback+0x44>)
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014da:	f003 fa59 	bl	8004990 <HAL_UART_Receive_IT>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002e0 	.word	0x200002e0
 80014ec:	20000258 	.word	0x20000258
 80014f0:	200002e4 	.word	0x200002e4
 80014f4:	20000000 	.word	0x20000000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <motor_set_duty_cycle>:
 *  object oriented programming motor control.
 */

#include "motor_driver.h"

void motor_set_duty_cycle(Motor* motor, int32_t doot){
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	 * @param motor, the Motor struct to be operated on.
	 * @param doot, the duty cycle to be set to.
	 *
	 */
	// First, check if the motor is disabled
	if(motor->enable_flag != 1){
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d162      	bne.n	80015dc <motor_set_duty_cycle+0xd8>
		// the motor doesn't accidentally enable.
		return;
	}

	// Next, saturate the duty cycle just in case.
	if(doot < -100){
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800151c:	da02      	bge.n	8001524 <motor_set_duty_cycle+0x20>
		doot = -100;
 800151e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001522:	603b      	str	r3, [r7, #0]
	}
	if(doot > 100){
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	dd01      	ble.n	800152e <motor_set_duty_cycle+0x2a>
		doot = 100;
 800152a:	2364      	movs	r3, #100	@ 0x64
 800152c:	603b      	str	r3, [r7, #0]
	}

	// We need to get the auto reload value for the timer we are using
	// signed value so we don't run into sign issues later
	int32_t ARR = (int32_t)(motor->timer->Init.Period + 1);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]

	// Now calculate the duty cycle in terms of the CCR value
	doot = doot*ARR/100;  // multiply first so we don't lose data
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	4a2b      	ldr	r2, [pc, #172]	@ (80015f0 <motor_set_duty_cycle+0xec>)
 8001542:	fb82 1203 	smull	r1, r2, r2, r3
 8001546:	1152      	asrs	r2, r2, #5
 8001548:	17db      	asrs	r3, r3, #31
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	603b      	str	r3, [r7, #0]


	// the below CCR's are based on the logic table of the toshiba, setting motor.
	// to brake mode
	// if duty cycle is <0
	if (doot < 0){
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da21      	bge.n	8001598 <motor_set_duty_cycle+0x94>
	    // check if it is the first or second motor.
		if(motor->channels == 1){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10c      	bne.n	8001576 <motor_set_duty_cycle+0x72>
			motor->timer->Instance->CCR1 = ARR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR + doot;
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	441a      	add	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	639a      	str	r2, [r3, #56]	@ 0x38
 8001574:	e037      	b.n	80015e6 <motor_set_duty_cycle+0xe2>
		} else if(motor->channels == 2){
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	791b      	ldrb	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <motor_set_duty_cycle+0xdc>
			motor->timer->Instance->CCR3 = ARR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR + doot;
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	441a      	add	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	e026      	b.n	80015e6 <motor_set_duty_cycle+0xe2>
			// if neither return
			return;
		}
	// if duty cycle >=0
	} else{
		if(motor->channels == 1){
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	791b      	ldrb	r3, [r3, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10c      	bne.n	80015ba <motor_set_duty_cycle+0xb6>
			motor->timer->Instance->CCR1 = ARR - doot;
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80015b8:	e015      	b.n	80015e6 <motor_set_duty_cycle+0xe2>
		} else if(motor->channels == 2){
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d110      	bne.n	80015e4 <motor_set_duty_cycle+0xe0>
			motor->timer->Instance->CCR3 = ARR - doot;
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015da:	e004      	b.n	80015e6 <motor_set_duty_cycle+0xe2>
		return;
 80015dc:	bf00      	nop
 80015de:	e002      	b.n	80015e6 <motor_set_duty_cycle+0xe2>
			return;
 80015e0:	bf00      	nop
 80015e2:	e000      	b.n	80015e6 <motor_set_duty_cycle+0xe2>
		}else{
			return;
 80015e4:	bf00      	nop
		}
	}
}
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	51eb851f 	.word	0x51eb851f

080015f4 <motor_enable_disable>:


void motor_enable_disable(Motor* motor, uint8_t enable){
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
	 * @param enable, the boolean of whether to enable or disable the motor
	 * with 1 being to enable and 0 being to disable.
	 */

	// if user wants to enable motor
	if(enable == 1){
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d125      	bne.n	8001652 <motor_enable_disable+0x5e>
		// First retrieve ARR to set motor to brake mode
		uint32_t ARR = (uint32_t)(motor->timer->Init.Period + 1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]

		// Now set the correct motor pair to brake mode.
		if(motor->channels == 1){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	791b      	ldrb	r3, [r3, #4]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d10a      	bne.n	800162e <motor_enable_disable+0x3a>
			motor->timer->Instance->CCR1 = ARR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	639a      	str	r2, [r3, #56]	@ 0x38
 800162c:	e00d      	b.n	800164a <motor_enable_disable+0x56>
		} else if(motor->channels == 2){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	791b      	ldrb	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d131      	bne.n	800169a <motor_enable_disable+0xa6>
			motor->timer->Instance->CCR3 = ARR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40
		}else{
			return;
		}

		// set the motor's enable flag to 1
		motor->enable_flag = 1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	731a      	strb	r2, [r3, #12]
 8001650:	e026      	b.n	80016a0 <motor_enable_disable+0xac>

	// if user wants to disable motor
	} else if(enable == 0){
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d123      	bne.n	80016a0 <motor_enable_disable+0xac>
		if(motor->channels == 1){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10a      	bne.n	8001676 <motor_enable_disable+0x82>
			motor->timer->Instance->CCR1 = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	639a      	str	r2, [r3, #56]	@ 0x38
 8001674:	e00d      	b.n	8001692 <motor_enable_disable+0x9e>
		} else if(motor->channels == 2){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	791b      	ldrb	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d10f      	bne.n	800169e <motor_enable_disable+0xaa>
			motor->timer->Instance->CCR3 = 0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = 0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
		}else{
			return;
		}

		// set the motor's enable flag to 0
		motor->enable_flag = 0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	731a      	strb	r2, [r3, #12]
 8001698:	e002      	b.n	80016a0 <motor_enable_disable+0xac>
			return;
 800169a:	bf00      	nop
 800169c:	e000      	b.n	80016a0 <motor_enable_disable+0xac>
			return;
 800169e:	bf00      	nop
	}
}
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_MspInit+0x44>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b6:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <HAL_MspInit+0x44>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_MspInit+0x44>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ce:	4a08      	ldr	r2, [pc, #32]	@ (80016f0 <HAL_MspInit+0x44>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_TIM_PWM_MspInit+0x38>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 800170c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001710:	6613      	str	r3, [r2, #96]	@ 0x60
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a12      	ldr	r2, [pc, #72]	@ (800179c <HAL_TIM_MspPostInit+0x68>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d11d      	bne.n	8001792 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800176e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001772:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001780:	2301      	movs	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178e:	f000 fbd9 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0ac      	sub	sp, #176	@ 0xb0
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fa90 	bl	8006cea <memset>
  if(huart->Instance==USART2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a25      	ldr	r2, [pc, #148]	@ (8001864 <HAL_UART_MspInit+0xc0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d143      	bne.n	800185c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d8:	2300      	movs	r3, #0
 80017da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 fbd5 	bl	8002f90 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017ec:	f7ff fe84 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_UART_MspInit+0xc4>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <HAL_UART_MspInit+0xc4>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_UART_MspInit+0xc4>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_UART_MspInit+0xc4>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_UART_MspInit+0xc4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_UART_MspInit+0xc4>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001820:	230c      	movs	r3, #12
 8001822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001838:	2307      	movs	r3, #7
 800183a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001848:	f000 fb7c 	bl	8001f44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2026      	movs	r0, #38	@ 0x26
 8001852:	f000 fac2 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001856:	2026      	movs	r0, #38	@ 0x26
 8001858:	f000 fadb 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	37b0      	adds	r7, #176	@ 0xb0
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40004400 	.word	0x40004400
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 f96b 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <USART2_IRQHandler+0x10>)
 80018d2:	f003 f8a9 	bl	8004a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000258 	.word	0x20000258

080018e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return 1;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_kill>:

int _kill(int pid, int sig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018fa:	f005 fa55 	bl	8006da8 <__errno>
 80018fe:	4603      	mov	r3, r0
 8001900:	2216      	movs	r2, #22
 8001902:	601a      	str	r2, [r3, #0]
  return -1;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_exit>:

void _exit (int status)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffe7 	bl	80018f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001922:	bf00      	nop
 8001924:	e7fd      	b.n	8001922 <_exit+0x12>

08001926 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e00a      	b.n	800194e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001938:	f3af 8000 	nop.w
 800193c:	4601      	mov	r1, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	60ba      	str	r2, [r7, #8]
 8001944:	b2ca      	uxtb	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	429a      	cmp	r2, r3
 8001954:	dbf0      	blt.n	8001938 <_read+0x12>
  }

  return len;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e009      	b.n	8001986 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbf1      	blt.n	8001972 <_write+0x12>
  }
  return len;
 800198e:	687b      	ldr	r3, [r7, #4]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_close>:

int _close(int file)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c0:	605a      	str	r2, [r3, #4]
  return 0;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_isatty>:

int _isatty(int file)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f005 f9ba 	bl	8006da8 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20018000 	.word	0x20018000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	200002f8 	.word	0x200002f8
 8001a68:	20000450 	.word	0x20000450

08001a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a94:	f7ff ffea 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopForever+0xe>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopForever+0x16>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f005 f979 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac2:	f7ff f9e9 	bl	8000e98 <main>

08001ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ac6:	e7fe      	b.n	8001ac6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001ad4:	080092b8 	.word	0x080092b8
  ldr r2, =_sbss
 8001ad8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001adc:	2000044c 	.word	0x2000044c

08001ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC1_2_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <HAL_Init+0x3c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_Init+0x3c>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afa:	2003      	movs	r0, #3
 8001afc:	f000 f962 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 f80f 	bl	8001b24 <HAL_InitTick>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	e001      	b.n	8001b16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b12:	f7ff fdcb 	bl	80016ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_InitTick+0x6c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d023      	beq.n	8001b80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_InitTick+0x70>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_InitTick+0x6c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f96d 	bl	8001e2e <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d809      	bhi.n	8001b74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f000 f937 	bl	8001dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_InitTick+0x74>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e004      	b.n	8001b84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e001      	b.n	8001b84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000024 	.word	0x20000024
 8001b94:	2000001c 	.word	0x2000001c
 8001b98:	20000020 	.word	0x20000020

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000024 	.word	0x20000024
 8001bc0:	200002fc 	.word	0x200002fc

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200002fc 	.word	0x200002fc

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000024 	.word	0x20000024

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	@ (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	@ 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d008      	beq.n	8001e70 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2204      	movs	r2, #4
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e022      	b.n	8001eb6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020e 	bic.w	r2, r2, #14
 8001e7e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	f003 021c 	and.w	r2, r3, #28
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d005      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e029      	b.n	8001f3a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020e 	bic.w	r2, r2, #14
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f003 021c 	and.w	r2, r3, #28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
    }
  }
  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e17f      	b.n	8002254 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8171 	beq.w	800224e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x40>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d118      	bne.n	8002024 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80ac 	beq.w	800224e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002274 <HAL_GPIO_Init+0x330>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002274 <HAL_GPIO_Init+0x330>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6613      	str	r3, [r2, #96]	@ 0x60
 8002102:	4b5c      	ldr	r3, [pc, #368]	@ (8002274 <HAL_GPIO_Init+0x330>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800210e:	4a5a      	ldr	r2, [pc, #360]	@ (8002278 <HAL_GPIO_Init+0x334>)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002138:	d025      	beq.n	8002186 <HAL_GPIO_Init+0x242>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4f      	ldr	r2, [pc, #316]	@ (800227c <HAL_GPIO_Init+0x338>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <HAL_GPIO_Init+0x23e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4e      	ldr	r2, [pc, #312]	@ (8002280 <HAL_GPIO_Init+0x33c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x23a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4d      	ldr	r2, [pc, #308]	@ (8002284 <HAL_GPIO_Init+0x340>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x236>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4c      	ldr	r2, [pc, #304]	@ (8002288 <HAL_GPIO_Init+0x344>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x232>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4b      	ldr	r2, [pc, #300]	@ (800228c <HAL_GPIO_Init+0x348>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x22e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4a      	ldr	r2, [pc, #296]	@ (8002290 <HAL_GPIO_Init+0x34c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x22a>
 800216a:	2306      	movs	r3, #6
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x244>
 800216e:	2307      	movs	r3, #7
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x244>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x244>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x244>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x244>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x244>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x244>
 8002186:	2300      	movs	r3, #0
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002198:	4937      	ldr	r1, [pc, #220]	@ (8002278 <HAL_GPIO_Init+0x334>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_GPIO_Init+0x350>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021ca:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <HAL_GPIO_Init+0x350>)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021d0:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_GPIO_Init+0x350>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_GPIO_Init+0x350>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_GPIO_Init+0x350>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800221e:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <HAL_GPIO_Init+0x350>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_GPIO_Init+0x350>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002248:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <HAL_GPIO_Init+0x350>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	f47f ae78 	bne.w	8001f54 <HAL_GPIO_Init+0x10>
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	48000400 	.word	0x48000400
 8002280:	48000800 	.word	0x48000800
 8002284:	48000c00 	.word	0x48000c00
 8002288:	48001000 	.word	0x48001000
 800228c:	48001400 	.word	0x48001400
 8002290:	48001800 	.word	0x48001800
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000

080022e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f2:	d130      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f4:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002300:	d038      	beq.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800230a:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2232      	movs	r2, #50	@ 0x32
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	4a1b      	ldr	r2, [pc, #108]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0c9b      	lsrs	r3, r3, #18
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002328:	e002      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3b01      	subs	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002330:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233c:	d102      	bne.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f2      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002344:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002350:	d110      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e00f      	b.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002356:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002362:	d007      	beq.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002364:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800236c:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40007000 	.word	0x40007000
 8002388:	2000001c 	.word	0x2000001c
 800238c:	431bde83 	.word	0x431bde83

08002390 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e3ca      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a2:	4b97      	ldr	r3, [pc, #604]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ac:	4b94      	ldr	r3, [pc, #592]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80e4 	beq.w	800258c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_RCC_OscConfig+0x4a>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	f040 808b 	bne.w	80024e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f040 8087 	bne.w	80024e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023da:	4b89      	ldr	r3, [pc, #548]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x62>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e3a2      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1a      	ldr	r2, [r3, #32]
 80023f6:	4b82      	ldr	r3, [pc, #520]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_RCC_OscConfig+0x7c>
 8002402:	4b7f      	ldr	r3, [pc, #508]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800240a:	e005      	b.n	8002418 <HAL_RCC_OscConfig+0x88>
 800240c:	4b7c      	ldr	r3, [pc, #496]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002418:	4293      	cmp	r3, r2
 800241a:	d223      	bcs.n	8002464 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fd55 	bl	8002ed0 <RCC_SetFlashLatencyFromMSIRange>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e383      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002430:	4b73      	ldr	r3, [pc, #460]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a72      	ldr	r2, [pc, #456]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b70      	ldr	r3, [pc, #448]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	496d      	ldr	r1, [pc, #436]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244e:	4b6c      	ldr	r3, [pc, #432]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	4968      	ldr	r1, [pc, #416]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
 8002462:	e025      	b.n	80024b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002464:	4b66      	ldr	r3, [pc, #408]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a65      	ldr	r2, [pc, #404]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4960      	ldr	r1, [pc, #384]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002482:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	495b      	ldr	r1, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fd15 	bl	8002ed0 <RCC_SetFlashLatencyFromMSIRange>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e343      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b0:	f000 fc4a 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b52      	ldr	r3, [pc, #328]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	4950      	ldr	r1, [pc, #320]	@ (8002604 <HAL_RCC_OscConfig+0x274>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002608 <HAL_RCC_OscConfig+0x278>)
 80024ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024d0:	4b4e      	ldr	r3, [pc, #312]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fb25 	bl	8001b24 <HAL_InitTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d052      	beq.n	800258a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	e327      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d032      	beq.n	8002556 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024f0:	4b43      	ldr	r3, [pc, #268]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fb62 	bl	8001bc4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002504:	f7ff fb5e 	bl	8001bc4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e310      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002516:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002522:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a36      	ldr	r2, [pc, #216]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b34      	ldr	r3, [pc, #208]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4931      	ldr	r1, [pc, #196]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002540:	4b2f      	ldr	r3, [pc, #188]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	492c      	ldr	r1, [pc, #176]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e01a      	b.n	800258c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002556:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a29      	ldr	r2, [pc, #164]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002562:	f7ff fb2f 	bl	8001bc4 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256a:	f7ff fb2b 	bl	8001bc4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e2dd      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800257c:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x1da>
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800258a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d074      	beq.n	8002682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b08      	cmp	r3, #8
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x21a>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d10e      	bne.n	80025c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d10b      	bne.n	80025c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d064      	beq.n	8002680 <HAL_RCC_OscConfig+0x2f0>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d160      	bne.n	8002680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e2ba      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x24a>
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e026      	b.n	8002628 <HAL_RCC_OscConfig+0x298>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e2:	d115      	bne.n	8002610 <HAL_RCC_OscConfig+0x280>
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b03      	ldr	r3, [pc, #12]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a02      	ldr	r2, [pc, #8]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e014      	b.n	8002628 <HAL_RCC_OscConfig+0x298>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	08008eec 	.word	0x08008eec
 8002608:	2000001c 	.word	0x2000001c
 800260c:	20000020 	.word	0x20000020
 8002610:	4ba0      	ldr	r3, [pc, #640]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a9f      	ldr	r2, [pc, #636]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b9d      	ldr	r3, [pc, #628]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a9c      	ldr	r2, [pc, #624]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff fac8 	bl	8001bc4 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fac4 	bl	8001bc4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e276      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264a:	4b92      	ldr	r3, [pc, #584]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x2a8>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff fab4 	bl	8001bc4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff fab0 	bl	8001bc4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e262      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002672:	4b88      	ldr	r3, [pc, #544]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x2d0>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d060      	beq.n	8002750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_OscConfig+0x310>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d119      	bne.n	80026ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d116      	bne.n	80026ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x328>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e23f      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b76      	ldr	r3, [pc, #472]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	4973      	ldr	r1, [pc, #460]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	e040      	b.n	8002750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d023      	beq.n	800271e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6e      	ldr	r2, [pc, #440]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7ff fa6f 	bl	8001bc4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7ff fa6b 	bl	8001bc4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e21d      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fc:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	495f      	ldr	r1, [pc, #380]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
 800271c:	e018      	b.n	8002750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	4b5d      	ldr	r3, [pc, #372]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5c      	ldr	r2, [pc, #368]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7ff fa4b 	bl	8001bc4 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7ff fa47 	bl	8001bc4 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1f9      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002744:	4b53      	ldr	r3, [pc, #332]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002764:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800276a:	4a4a      	ldr	r2, [pc, #296]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7ff fa26 	bl	8001bc4 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7ff fa22 	bl	8001bc4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1d4      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278e:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCC_OscConfig+0x3ec>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7ff fa09 	bl	8001bc4 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b6:	f7ff fa05 	bl	8001bc4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1b7      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c8:	4b32      	ldr	r3, [pc, #200]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80a6 	beq.w	8002930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	4a26      	ldr	r2, [pc, #152]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_RCC_OscConfig+0x508>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d118      	bne.n	800284e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_OscConfig+0x508>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_RCC_OscConfig+0x508>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002828:	f7ff f9cc 	bl	8001bc4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7ff f9c8 	bl	8001bc4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e17a      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_RCC_OscConfig+0x508>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d108      	bne.n	8002868 <HAL_RCC_OscConfig+0x4d8>
 8002856:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285c:	4a0d      	ldr	r2, [pc, #52]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002866:	e029      	b.n	80028bc <HAL_RCC_OscConfig+0x52c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b05      	cmp	r3, #5
 800286e:	d115      	bne.n	800289c <HAL_RCC_OscConfig+0x50c>
 8002870:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002876:	4a07      	ldr	r2, [pc, #28]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	4a03      	ldr	r2, [pc, #12]	@ (8002894 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x52c>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
 800289c:	4b9c      	ldr	r3, [pc, #624]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	4a9b      	ldr	r2, [pc, #620]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ac:	4b98      	ldr	r3, [pc, #608]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	4a97      	ldr	r2, [pc, #604]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7ff f97e 	bl	8001bc4 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7ff f97a 	bl	8001bc4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e12a      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ed      	beq.n	80028cc <HAL_RCC_OscConfig+0x53c>
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7ff f967 	bl	8001bc4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7ff f963 	bl	8001bc4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e113      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002910:	4b7f      	ldr	r3, [pc, #508]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ed      	bne.n	80028fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7ffb      	ldrb	r3, [r7, #31]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	4a79      	ldr	r2, [pc, #484]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800292e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80fe 	beq.w	8002b36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293e:	2b02      	cmp	r3, #2
 8002940:	f040 80d0 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002944:	4b72      	ldr	r3, [pc, #456]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	429a      	cmp	r2, r3
 8002956:	d130      	bne.n	80029ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	3b01      	subs	r3, #1
 8002964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d127      	bne.n	80029ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002974:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11f      	bne.n	80029ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002984:	2a07      	cmp	r2, #7
 8002986:	bf14      	ite	ne
 8002988:	2201      	movne	r2, #1
 800298a:	2200      	moveq	r2, #0
 800298c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298e:	4293      	cmp	r3, r2
 8002990:	d113      	bne.n	80029ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	3b01      	subs	r3, #1
 80029a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	3b01      	subs	r3, #1
 80029b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d06e      	beq.n	8002a98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d069      	beq.n	8002a94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029c0:	4b53      	ldr	r3, [pc, #332]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029cc:	4b50      	ldr	r3, [pc, #320]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0ad      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e8:	f7ff f8ec 	bl	8001bc4 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7ff f8e8 	bl	8001bc4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e09a      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0e:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	4b40      	ldr	r3, [pc, #256]	@ (8002b14 <HAL_RCC_OscConfig+0x784>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a1e:	3a01      	subs	r2, #1
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a28:	0212      	lsls	r2, r2, #8
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	3a01      	subs	r2, #1
 8002a34:	0552      	lsls	r2, r2, #21
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a3c:	0852      	lsrs	r2, r2, #1
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	0652      	lsls	r2, r2, #25
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a48:	0912      	lsrs	r2, r2, #4
 8002a4a:	0452      	lsls	r2, r2, #17
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	4930      	ldr	r1, [pc, #192]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a54:	4b2e      	ldr	r3, [pc, #184]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a60:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a2a      	ldr	r2, [pc, #168]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a6c:	f7ff f8aa 	bl	8001bc4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff f8a6 	bl	8001bc4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e058      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a92:	e050      	b.n	8002b36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04f      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d148      	bne.n	8002b36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab0:	4b17      	ldr	r3, [pc, #92]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002abc:	f7ff f882 	bl	8001bc4 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7ff f87e 	bl	8001bc4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e030      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x734>
 8002ae2:	e028      	b.n	8002b36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d023      	beq.n	8002b32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a08      	ldr	r2, [pc, #32]	@ (8002b10 <HAL_RCC_OscConfig+0x780>)
 8002af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7ff f865 	bl	8001bc4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	e00c      	b.n	8002b18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afe:	f7ff f861 	bl	8001bc4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d905      	bls.n	8002b18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e013      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <HAL_RCC_OscConfig+0x7b0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ec      	bne.n	8002afe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_OscConfig+0x7b0>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4905      	ldr	r1, [pc, #20]	@ (8002b40 <HAL_RCC_OscConfig+0x7b0>)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x7b4>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60cb      	str	r3, [r1, #12]
 8002b30:	e001      	b.n	8002b36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	feeefffc 	.word	0xfeeefffc

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0e7      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b75      	ldr	r3, [pc, #468]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b72      	ldr	r3, [pc, #456]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4970      	ldr	r1, [pc, #448]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0cf      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d908      	bls.n	8002bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b63      	ldr	r3, [pc, #396]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4960      	ldr	r1, [pc, #384]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d04c      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b5a      	ldr	r3, [pc, #360]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d121      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0a6      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	4b54      	ldr	r3, [pc, #336]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e09a      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e08e      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e086      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b46      	ldr	r3, [pc, #280]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4943      	ldr	r1, [pc, #268]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe ffc8 	bl	8001bc4 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe ffc4 	bl	8001bc4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e06e      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d208      	bcs.n	8002c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	492b      	ldr	r1, [pc, #172]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8e:	4b29      	ldr	r3, [pc, #164]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d210      	bcs.n	8002cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 0207 	bic.w	r2, r3, #7
 8002ca4:	4923      	ldr	r1, [pc, #140]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cac:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e036      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4918      	ldr	r1, [pc, #96]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4910      	ldr	r1, [pc, #64]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfc:	f000 f824 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	490b      	ldr	r1, [pc, #44]	@ (8002d3c <HAL_RCC_ClockConfig+0x1f4>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1fc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe feff 	bl	8001b24 <HAL_InitTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08008eec 	.word	0x08008eec
 8002d40:	2000001c 	.word	0x2000001c
 8002d44:	20000020 	.word	0x20000020

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b3e      	ldr	r3, [pc, #248]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d60:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d121      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d11e      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d7c:	4b34      	ldr	r3, [pc, #208]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d88:	4b31      	ldr	r3, [pc, #196]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d98:	4b2d      	ldr	r3, [pc, #180]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002da4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc0:	4b25      	ldr	r3, [pc, #148]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dcc:	4b23      	ldr	r3, [pc, #140]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d134      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0xa6>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d003      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0xac>
 8002dec:	e005      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df0:	617b      	str	r3, [r7, #20]
      break;
 8002df2:	e005      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002df6:	617b      	str	r3, [r7, #20]
      break;
 8002df8:	e002      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	617b      	str	r3, [r7, #20]
      break;
 8002dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	0e5b      	lsrs	r3, r3, #25
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	3301      	adds	r3, #1
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e40:	69bb      	ldr	r3, [r7, #24]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	@ 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08008f04 	.word	0x08008f04
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	007a1200 	.word	0x007a1200

08002e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000001c 	.word	0x2000001c

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4904      	ldr	r1, [pc, #16]	@ (8002ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08008efc 	.word	0x08008efc

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ea8:	f7ff ffda 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0adb      	lsrs	r3, r3, #11
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4904      	ldr	r1, [pc, #16]	@ (8002ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	08008efc 	.word	0x08008efc

08002ed0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002edc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ee8:	f7ff f9ee 	bl	80022c8 <HAL_PWREx_GetVoltageRange>
 8002eec:	6178      	str	r0, [r7, #20]
 8002eee:	e014      	b.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	4a24      	ldr	r2, [pc, #144]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efc:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f08:	f7ff f9de 	bl	80022c8 <HAL_PWREx_GetVoltageRange>
 8002f0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f20:	d10b      	bne.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b80      	cmp	r3, #128	@ 0x80
 8002f26:	d919      	bls.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f2c:	d902      	bls.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f2e:	2302      	movs	r3, #2
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e013      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e010      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d902      	bls.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f40:	2303      	movs	r3, #3
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e00a      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b80      	cmp	r3, #128	@ 0x80
 8002f4a:	d102      	bne.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e004      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b70      	cmp	r3, #112	@ 0x70
 8002f56:	d101      	bne.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	4909      	ldr	r1, [pc, #36]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40022000 	.word	0x40022000

08002f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f98:	2300      	movs	r3, #0
 8002f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d041      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fb4:	d02a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fba:	d824      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fc6:	d81e      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fd2:	e018      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fd4:	4b86      	ldr	r3, [pc, #536]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a85      	ldr	r2, [pc, #532]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe0:	e015      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fabb 	bl	8003564 <RCCEx_PLLSAI1_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff2:	e00c      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3320      	adds	r3, #32
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fba6 	bl	800374c <RCCEx_PLLSAI2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003004:	e003      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	74fb      	strb	r3, [r7, #19]
      break;
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800300c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003014:	4b76      	ldr	r3, [pc, #472]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003022:	4973      	ldr	r1, [pc, #460]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800302a:	e001      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d041      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003040:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003044:	d02a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800304a:	d824      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800304c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003056:	d81e      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003060:	d010      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003062:	e018      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003064:	4b62      	ldr	r3, [pc, #392]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a61      	ldr	r2, [pc, #388]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003070:	e015      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa73 	bl	8003564 <RCCEx_PLLSAI1_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003082:	e00c      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3320      	adds	r3, #32
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fb5e 	bl	800374c <RCCEx_PLLSAI2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	74fb      	strb	r3, [r7, #19]
      break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800309c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030a4:	4b52      	ldr	r3, [pc, #328]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030b2:	494f      	ldr	r1, [pc, #316]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a0 	beq.w	800320e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	4a40      	ldr	r2, [pc, #256]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f4:	4b3e      	ldr	r3, [pc, #248]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003100:	2301      	movs	r3, #1
 8003102:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003104:	4b3b      	ldr	r3, [pc, #236]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a3a      	ldr	r2, [pc, #232]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003110:	f7fe fd58 	bl	8001bc4 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003116:	e009      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003118:	f7fe fd54 	bl	8001bc4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d902      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	74fb      	strb	r3, [r7, #19]
        break;
 800312a:	e005      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800312c:	4b31      	ldr	r3, [pc, #196]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ef      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d15c      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800313e:	4b2c      	ldr	r3, [pc, #176]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003148:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01f      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	d019      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800315c:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003166:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003168:	4b21      	ldr	r3, [pc, #132]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	4a20      	ldr	r2, [pc, #128]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317e:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fe fd13 	bl	8001bc4 <HAL_GetTick>
 800319e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a0:	e00b      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fd0f 	bl	8001bc4 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d902      	bls.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	74fb      	strb	r3, [r7, #19]
            break;
 80031b8:	e006      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ec      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ce:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031de:	4904      	ldr	r1, [pc, #16]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031e6:	e009      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fc:	7c7b      	ldrb	r3, [r7, #17]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4b9e      	ldr	r3, [pc, #632]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003206:	4a9d      	ldr	r2, [pc, #628]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321a:	4b98      	ldr	r3, [pc, #608]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003220:	f023 0203 	bic.w	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	4994      	ldr	r1, [pc, #592]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800323c:	4b8f      	ldr	r3, [pc, #572]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	f023 020c 	bic.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324a:	498c      	ldr	r1, [pc, #560]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800325e:	4b87      	ldr	r3, [pc, #540]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	4983      	ldr	r1, [pc, #524]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003280:	4b7e      	ldr	r3, [pc, #504]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	497b      	ldr	r1, [pc, #492]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032a2:	4b76      	ldr	r3, [pc, #472]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b0:	4972      	ldr	r1, [pc, #456]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c4:	4b6d      	ldr	r3, [pc, #436]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	496a      	ldr	r1, [pc, #424]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e6:	4b65      	ldr	r3, [pc, #404]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	4961      	ldr	r1, [pc, #388]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003308:	4b5c      	ldr	r3, [pc, #368]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	4959      	ldr	r1, [pc, #356]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332a:	4b54      	ldr	r3, [pc, #336]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003338:	4950      	ldr	r1, [pc, #320]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334c:	4b4b      	ldr	r3, [pc, #300]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335a:	4948      	ldr	r1, [pc, #288]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800336e:	4b43      	ldr	r3, [pc, #268]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	493f      	ldr	r1, [pc, #252]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d028      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003390:	4b3a      	ldr	r3, [pc, #232]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339e:	4937      	ldr	r1, [pc, #220]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033ae:	d106      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b32      	ldr	r3, [pc, #200]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a31      	ldr	r2, [pc, #196]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
 80033bc:	e011      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f8c8 	bl	8003564 <RCCEx_PLLSAI1_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d028      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033ee:	4b23      	ldr	r3, [pc, #140]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	491f      	ldr	r1, [pc, #124]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800340c:	d106      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340e:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4a1a      	ldr	r2, [pc, #104]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003418:	60d3      	str	r3, [r2, #12]
 800341a:	e011      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003424:	d10c      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	2101      	movs	r1, #1
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f899 	bl	8003564 <RCCEx_PLLSAI1_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02b      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345a:	4908      	ldr	r1, [pc, #32]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800346a:	d109      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a02      	ldr	r2, [pc, #8]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003476:	60d3      	str	r3, [r2, #12]
 8003478:	e014      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f867 	bl	8003564 <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034be:	4928      	ldr	r1, [pc, #160]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ce:	d10d      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f844 	bl	8003564 <RCCEx_PLLSAI1_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d014      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	74bb      	strb	r3, [r7, #18]
 80034ea:	e011      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3320      	adds	r3, #32
 80034fa:	2102      	movs	r1, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f925 	bl	800374c <RCCEx_PLLSAI2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800352a:	490d      	ldr	r1, [pc, #52]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003544:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800354e:	4904      	ldr	r1, [pc, #16]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003556:	7cbb      	ldrb	r3, [r7, #18]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000

08003564 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003572:	4b75      	ldr	r3, [pc, #468]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d018      	beq.n	80035b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800357e:	4b72      	ldr	r3, [pc, #456]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0203 	and.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d10d      	bne.n	80035aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
       ||
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003596:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
       ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d047      	beq.n	800363a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e044      	b.n	800363a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d018      	beq.n	80035ea <RCCEx_PLLSAI1_Config+0x86>
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d825      	bhi.n	8003608 <RCCEx_PLLSAI1_Config+0xa4>
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d002      	beq.n	80035c6 <RCCEx_PLLSAI1_Config+0x62>
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d009      	beq.n	80035d8 <RCCEx_PLLSAI1_Config+0x74>
 80035c4:	e020      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035c6:	4b60      	ldr	r3, [pc, #384]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11d      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d6:	e01a      	b.n	800360e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d116      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e8:	e013      	b.n	8003612 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ea:	4b57      	ldr	r3, [pc, #348]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035f6:	4b54      	ldr	r3, [pc, #336]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003606:	e006      	b.n	8003616 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      break;
 800360c:	e004      	b.n	8003618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003616:	bf00      	nop
    }

    if(status == HAL_OK)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800361e:	4b4a      	ldr	r3, [pc, #296]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	430b      	orrs	r3, r1
 8003634:	4944      	ldr	r1, [pc, #272]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003636:	4313      	orrs	r3, r2
 8003638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d17d      	bne.n	800373c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003640:	4b41      	ldr	r3, [pc, #260]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a40      	ldr	r2, [pc, #256]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800364a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364c:	f7fe faba 	bl	8001bc4 <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003652:	e009      	b.n	8003668 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003654:	f7fe fab6 	bl	8001bc4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	73fb      	strb	r3, [r7, #15]
        break;
 8003666:	e005      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003668:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ef      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d160      	bne.n	800373c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003680:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6892      	ldr	r2, [r2, #8]
 8003690:	0211      	lsls	r1, r2, #8
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68d2      	ldr	r2, [r2, #12]
 8003696:	0912      	lsrs	r2, r2, #4
 8003698:	0452      	lsls	r2, r2, #17
 800369a:	430a      	orrs	r2, r1
 800369c:	492a      	ldr	r1, [pc, #168]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	610b      	str	r3, [r1, #16]
 80036a2:	e027      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d112      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036aa:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6892      	ldr	r2, [r2, #8]
 80036ba:	0211      	lsls	r1, r2, #8
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6912      	ldr	r2, [r2, #16]
 80036c0:	0852      	lsrs	r2, r2, #1
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0552      	lsls	r2, r2, #21
 80036c6:	430a      	orrs	r2, r1
 80036c8:	491f      	ldr	r1, [pc, #124]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]
 80036ce:	e011      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6952      	ldr	r2, [r2, #20]
 80036e6:	0852      	lsrs	r2, r2, #1
 80036e8:	3a01      	subs	r2, #1
 80036ea:	0652      	lsls	r2, r2, #25
 80036ec:	430a      	orrs	r2, r1
 80036ee:	4916      	ldr	r1, [pc, #88]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036f4:	4b14      	ldr	r3, [pc, #80]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a13      	ldr	r2, [pc, #76]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe fa60 	bl	8001bc4 <HAL_GetTick>
 8003704:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003706:	e009      	b.n	800371c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003708:	f7fe fa5c 	bl	8001bc4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d902      	bls.n	800371c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	73fb      	strb	r3, [r7, #15]
          break;
 800371a:	e005      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ef      	beq.n	8003708 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	4904      	ldr	r1, [pc, #16]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000

0800374c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375a:	4b6a      	ldr	r3, [pc, #424]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d018      	beq.n	8003798 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003766:	4b67      	ldr	r3, [pc, #412]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d10d      	bne.n	8003792 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
       ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800377e:	4b61      	ldr	r3, [pc, #388]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
       ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d047      	beq.n	8003822 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	e044      	b.n	8003822 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d018      	beq.n	80037d2 <RCCEx_PLLSAI2_Config+0x86>
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d825      	bhi.n	80037f0 <RCCEx_PLLSAI2_Config+0xa4>
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d002      	beq.n	80037ae <RCCEx_PLLSAI2_Config+0x62>
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d009      	beq.n	80037c0 <RCCEx_PLLSAI2_Config+0x74>
 80037ac:	e020      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ae:	4b55      	ldr	r3, [pc, #340]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d11d      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037be:	e01a      	b.n	80037f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c0:	4b50      	ldr	r3, [pc, #320]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d0:	e013      	b.n	80037fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037de:	4b49      	ldr	r3, [pc, #292]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ee:	e006      	b.n	80037fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e004      	b.n	8003800 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003806:	4b3f      	ldr	r3, [pc, #252]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	430b      	orrs	r3, r1
 800381c:	4939      	ldr	r1, [pc, #228]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d167      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003828:	4b36      	ldr	r3, [pc, #216]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a35      	ldr	r2, [pc, #212]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003834:	f7fe f9c6 	bl	8001bc4 <HAL_GetTick>
 8003838:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800383a:	e009      	b.n	8003850 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800383c:	f7fe f9c2 	bl	8001bc4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d902      	bls.n	8003850 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	73fb      	strb	r3, [r7, #15]
        break;
 800384e:	e005      	b.n	800385c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003850:	4b2c      	ldr	r3, [pc, #176]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ef      	bne.n	800383c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d14a      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d111      	bne.n	800388c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003868:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	0211      	lsls	r1, r2, #8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	0912      	lsrs	r2, r2, #4
 8003880:	0452      	lsls	r2, r2, #17
 8003882:	430a      	orrs	r2, r1
 8003884:	491f      	ldr	r1, [pc, #124]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	614b      	str	r3, [r1, #20]
 800388a:	e011      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003894:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	0211      	lsls	r1, r2, #8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6912      	ldr	r2, [r2, #16]
 80038a2:	0852      	lsrs	r2, r2, #1
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0652      	lsls	r2, r2, #25
 80038a8:	430a      	orrs	r2, r1
 80038aa:	4916      	ldr	r1, [pc, #88]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038b0:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a13      	ldr	r2, [pc, #76]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fe f982 	bl	8001bc4 <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038c2:	e009      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c4:	f7fe f97e 	bl	8001bc4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	73fb      	strb	r3, [r7, #15]
          break;
 80038d6:	e005      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ef      	beq.n	80038c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038ea:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	4904      	ldr	r1, [pc, #16]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e049      	b.n	80039ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fee0 	bl	80016f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fa50 	bl	8003dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_TIM_PWM_Start+0x24>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e03c      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d109      	bne.n	80039f6 <HAL_TIM_PWM_Start+0x3e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e02f      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d109      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x58>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e022      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d109      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x72>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e015      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x8c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e008      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e09c      	b.n	8003b98 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0xb6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a6c:	e023      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xc6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a7c:	e01b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xd6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start+0xe6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0xf6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd04 	bl	80044cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a35      	ldr	r2, [pc, #212]	@ (8003ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a34      	ldr	r2, [pc, #208]	@ (8003ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a32      	ldr	r2, [pc, #200]	@ (8003ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a31      	ldr	r2, [pc, #196]	@ (8003bac <HAL_TIM_PWM_Start+0x1f4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Start+0x142>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_TIM_PWM_Start+0x144>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b22:	d018      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a22      	ldr	r2, [pc, #136]	@ (8003bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a21      	ldr	r2, [pc, #132]	@ (8003bb8 <HAL_TIM_PWM_Start+0x200>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <HAL_TIM_PWM_Start+0x204>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	@ (8003ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d115      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <HAL_TIM_PWM_Start+0x208>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d015      	beq.n	8003b94 <HAL_TIM_PWM_Start+0x1dc>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6e:	d011      	beq.n	8003b94 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	e008      	b.n	8003b94 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e000      	b.n	8003b96 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	00010007 	.word	0x00010007

08003bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0ff      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b14      	cmp	r3, #20
 8003bee:	f200 80f0 	bhi.w	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003dd3 	.word	0x08003dd3
 8003c00:	08003dd3 	.word	0x08003dd3
 8003c04:	08003dd3 	.word	0x08003dd3
 8003c08:	08003c8d 	.word	0x08003c8d
 8003c0c:	08003dd3 	.word	0x08003dd3
 8003c10:	08003dd3 	.word	0x08003dd3
 8003c14:	08003dd3 	.word	0x08003dd3
 8003c18:	08003ccf 	.word	0x08003ccf
 8003c1c:	08003dd3 	.word	0x08003dd3
 8003c20:	08003dd3 	.word	0x08003dd3
 8003c24:	08003dd3 	.word	0x08003dd3
 8003c28:	08003d0f 	.word	0x08003d0f
 8003c2c:	08003dd3 	.word	0x08003dd3
 8003c30:	08003dd3 	.word	0x08003dd3
 8003c34:	08003dd3 	.word	0x08003dd3
 8003c38:	08003d51 	.word	0x08003d51
 8003c3c:	08003dd3 	.word	0x08003dd3
 8003c40:	08003dd3 	.word	0x08003dd3
 8003c44:	08003dd3 	.word	0x08003dd3
 8003c48:	08003d91 	.word	0x08003d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f964 	bl	8003f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0208 	orr.w	r2, r2, #8
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	619a      	str	r2, [r3, #24]
      break;
 8003c8a:	e0a5      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f9d4 	bl	8004040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
      break;
 8003ccc:	e084      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fa3d 	bl	8004154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0208 	orr.w	r2, r2, #8
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0204 	bic.w	r2, r2, #4
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	61da      	str	r2, [r3, #28]
      break;
 8003d0c:	e064      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 faa5 	bl	8004264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69d9      	ldr	r1, [r3, #28]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	021a      	lsls	r2, r3, #8
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	61da      	str	r2, [r3, #28]
      break;
 8003d4e:	e043      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 faee 	bl	8004338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d8e:	e023      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fb32 	bl	8004400 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003dd0:	e002      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	@ (8003f00 <TIM_Base_SetConfig+0x114>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0a:	d00f      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f04 <TIM_Base_SetConfig+0x118>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3c      	ldr	r2, [pc, #240]	@ (8003f08 <TIM_Base_SetConfig+0x11c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f0c <TIM_Base_SetConfig+0x120>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3a      	ldr	r2, [pc, #232]	@ (8003f10 <TIM_Base_SetConfig+0x124>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2f      	ldr	r2, [pc, #188]	@ (8003f00 <TIM_Base_SetConfig+0x114>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4c:	d01b      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	@ (8003f04 <TIM_Base_SetConfig+0x118>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d017      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <TIM_Base_SetConfig+0x11c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <TIM_Base_SetConfig+0x120>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00f      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a29      	ldr	r2, [pc, #164]	@ (8003f10 <TIM_Base_SetConfig+0x124>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a28      	ldr	r2, [pc, #160]	@ (8003f14 <TIM_Base_SetConfig+0x128>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <TIM_Base_SetConfig+0x12c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a26      	ldr	r2, [pc, #152]	@ (8003f1c <TIM_Base_SetConfig+0x130>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a10      	ldr	r2, [pc, #64]	@ (8003f00 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_Base_SetConfig+0xf8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	@ (8003f10 <TIM_Base_SetConfig+0x124>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_Base_SetConfig+0xf8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <TIM_Base_SetConfig+0x128>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_Base_SetConfig+0xf8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	@ (8003f18 <TIM_Base_SetConfig+0x12c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_Base_SetConfig+0xf8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0f      	ldr	r2, [pc, #60]	@ (8003f1c <TIM_Base_SetConfig+0x130>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d103      	bne.n	8003eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	615a      	str	r2, [r3, #20]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800

08003f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f023 0201 	bic.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f023 0302 	bic.w	r3, r3, #2
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800402c <TIM_OC1_SetConfig+0x10c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a2b      	ldr	r2, [pc, #172]	@ (8004030 <TIM_OC1_SetConfig+0x110>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x80>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004034 <TIM_OC1_SetConfig+0x114>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x80>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a29      	ldr	r2, [pc, #164]	@ (8004038 <TIM_OC1_SetConfig+0x118>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x80>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a28      	ldr	r2, [pc, #160]	@ (800403c <TIM_OC1_SetConfig+0x11c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10c      	bne.n	8003fba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0308 	bic.w	r3, r3, #8
 8003fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 0304 	bic.w	r3, r3, #4
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800402c <TIM_OC1_SetConfig+0x10c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_OC1_SetConfig+0xc2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004030 <TIM_OC1_SetConfig+0x110>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_OC1_SetConfig+0xc2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	@ (8004034 <TIM_OC1_SetConfig+0x114>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_OC1_SetConfig+0xc2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <TIM_OC1_SetConfig+0x118>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_OC1_SetConfig+0xc2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a17      	ldr	r2, [pc, #92]	@ (800403c <TIM_OC1_SetConfig+0x11c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d111      	bne.n	8004006 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800

08004040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0320 	bic.w	r3, r3, #32
 800408e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a28      	ldr	r2, [pc, #160]	@ (8004140 <TIM_OC2_SetConfig+0x100>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC2_SetConfig+0x6c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <TIM_OC2_SetConfig+0x104>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10d      	bne.n	80040c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <TIM_OC2_SetConfig+0x100>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00f      	beq.n	80040f0 <TIM_OC2_SetConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <TIM_OC2_SetConfig+0x104>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <TIM_OC2_SetConfig+0xb0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <TIM_OC2_SetConfig+0x108>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_OC2_SetConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <TIM_OC2_SetConfig+0x10c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC2_SetConfig+0xb0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a19      	ldr	r2, [pc, #100]	@ (8004150 <TIM_OC2_SetConfig+0x110>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d113      	bne.n	8004118 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40013400 	.word	0x40013400
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a27      	ldr	r2, [pc, #156]	@ (8004250 <TIM_OC3_SetConfig+0xfc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0x6a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a26      	ldr	r2, [pc, #152]	@ (8004254 <TIM_OC3_SetConfig+0x100>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10d      	bne.n	80041da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <TIM_OC3_SetConfig+0xfc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00f      	beq.n	8004202 <TIM_OC3_SetConfig+0xae>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004254 <TIM_OC3_SetConfig+0x100>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <TIM_OC3_SetConfig+0xae>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004258 <TIM_OC3_SetConfig+0x104>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_OC3_SetConfig+0xae>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a19      	ldr	r2, [pc, #100]	@ (800425c <TIM_OC3_SetConfig+0x108>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC3_SetConfig+0xae>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a18      	ldr	r2, [pc, #96]	@ (8004260 <TIM_OC3_SetConfig+0x10c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40013400 	.word	0x40013400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800

08004264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <TIM_OC4_SetConfig+0xc0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_OC4_SetConfig+0x84>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <TIM_OC4_SetConfig+0xc4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC4_SetConfig+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a16      	ldr	r2, [pc, #88]	@ (800432c <TIM_OC4_SetConfig+0xc8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC4_SetConfig+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <TIM_OC4_SetConfig+0xcc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC4_SetConfig+0x84>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <TIM_OC4_SetConfig+0xd0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800437c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <TIM_OC5_SetConfig+0xb4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <TIM_OC5_SetConfig+0xb8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <TIM_OC5_SetConfig+0xbc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <TIM_OC5_SetConfig+0xc0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <TIM_OC5_SetConfig+0xc4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d109      	bne.n	80043c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40013400 	.word	0x40013400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	051b      	lsls	r3, r3, #20
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <TIM_OC6_SetConfig+0xb8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00f      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <TIM_OC6_SetConfig+0xbc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <TIM_OC6_SetConfig+0xc0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <TIM_OC6_SetConfig+0xc4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a14      	ldr	r2, [pc, #80]	@ (80044c8 <TIM_OC6_SetConfig+0xc8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d109      	bne.n	8004490 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2201      	movs	r2, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e068      	b.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2e      	ldr	r2, [pc, #184]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2d      	ldr	r2, [pc, #180]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800456a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d018      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10c      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e065      	b.n	8004710 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a14      	ldr	r2, [pc, #80]	@ (8004720 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d115      	bne.n	80046fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	051b      	lsls	r3, r3, #20
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40013400 	.word	0x40013400

08004724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e040      	b.n	80047b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd f82c 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	@ 0x24
 8004750:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 ff1e 	bl	80055ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fc63 	bl	800503c <UART_SetConfig>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e01b      	b.n	80047b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800478e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800479e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 ff9d 	bl	80056f0 <UART_CheckIdleState>
 80047b6:	4603      	mov	r3, r0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	@ 0x28
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d177      	bne.n	80048c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_UART_Transmit+0x24>
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e070      	b.n	80048ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2221      	movs	r2, #33	@ 0x21
 80047f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f6:	f7fd f9e5 	bl	8001bc4 <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004814:	d108      	bne.n	8004828 <HAL_UART_Transmit+0x68>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e003      	b.n	8004830 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004830:	e02f      	b.n	8004892 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	@ 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 ffff 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e03b      	b.n	80048ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	881a      	ldrh	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004864:	b292      	uxth	r2, r2
 8004866:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	3302      	adds	r3, #2
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e007      	b.n	8004880 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1c9      	bne.n	8004832 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2140      	movs	r1, #64	@ 0x40
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 ffc9 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e005      	b.n	80048ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b08b      	sub	sp, #44	@ 0x2c
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	4613      	mov	r3, r2
 80048e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d147      	bne.n	800497a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_UART_Transmit_IT+0x22>
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e040      	b.n	800497c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2221      	movs	r2, #33	@ 0x21
 8004922:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492c:	d107      	bne.n	800493e <HAL_UART_Transmit_IT+0x6a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a13      	ldr	r2, [pc, #76]	@ (8004988 <HAL_UART_Transmit_IT+0xb4>)
 800493a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800493c:	e002      	b.n	8004944 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a12      	ldr	r2, [pc, #72]	@ (800498c <HAL_UART_Transmit_IT+0xb8>)
 8004942:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	623b      	str	r3, [r7, #32]
 8004964:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	69f9      	ldr	r1, [r7, #28]
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	372c      	adds	r7, #44	@ 0x2c
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	08005c47 	.word	0x08005c47
 800498c:	08005b91 	.word	0x08005b91

08004990 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	@ 0x28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d137      	bne.n	8004a18 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Receive_IT+0x24>
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e030      	b.n	8004a1a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <HAL_UART_Receive_IT+0x94>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01f      	beq.n	8004a08 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	613b      	str	r3, [r7, #16]
   return(result);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	69f9      	ldr	r1, [r7, #28]
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 ff7e 	bl	8005910 <UART_Start_Receive_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	@ 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40008000 	.word	0x40008000

08004a28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a52:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004a56:	4013      	ands	r3, r2
 8004a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d115      	bne.n	8004a90 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 82ae 	beq.w	8004fe2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
      }
      return;
 8004a8e:	e2a8      	b.n	8004fe2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8117 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004aa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004aaa:	4b85      	ldr	r3, [pc, #532]	@ (8004cc0 <HAL_UART_IRQHandler+0x298>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 810a 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d011      	beq.n	8004ae4 <HAL_UART_IRQHandler+0xbc>
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d011      	beq.n	8004b14 <HAL_UART_IRQHandler+0xec>
 8004af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2202      	movs	r2, #2
 8004b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d011      	beq.n	8004b44 <HAL_UART_IRQHandler+0x11c>
 8004b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2204      	movs	r2, #4
 8004b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3a:	f043 0202 	orr.w	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d017      	beq.n	8004b80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b76:	f043 0208 	orr.w	r2, r3, #8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d012      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x18a>
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00c      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8214 	beq.w	8004fe6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfa:	2b40      	cmp	r3, #64	@ 0x40
 8004bfc:	d005      	beq.n	8004c0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d04f      	beq.n	8004caa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 ff46 	bl	8005a9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1a:	2b40      	cmp	r3, #64	@ 0x40
 8004c1c:	d141      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3308      	adds	r3, #8
 8004c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1d9      	bne.n	8004c1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d013      	beq.n	8004c9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c76:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <HAL_UART_IRQHandler+0x29c>)
 8004c78:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fd f91f 	bl	8001ec2 <HAL_DMA_Abort_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d017      	beq.n	8004cba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c94:	4610      	mov	r0, r2
 8004c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	e00f      	b.n	8004cba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f9b8 	bl	8005010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e00b      	b.n	8004cba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9b4 	bl	8005010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e007      	b.n	8004cba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9b0 	bl	8005010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004cb8:	e195      	b.n	8004fe6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cba:	bf00      	nop
    return;
 8004cbc:	e193      	b.n	8004fe6 <HAL_UART_IRQHandler+0x5be>
 8004cbe:	bf00      	nop
 8004cc0:	04000120 	.word	0x04000120
 8004cc4:	08005b65 	.word	0x08005b65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	f040 814e 	bne.w	8004f6e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8147 	beq.w	8004f6e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8140 	beq.w	8004f6e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d00:	2b40      	cmp	r3, #64	@ 0x40
 8004d02:	f040 80b8 	bne.w	8004e76 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8167 	beq.w	8004fea <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d26:	429a      	cmp	r2, r3
 8004d28:	f080 815f 	bcs.w	8004fea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 8086 	bne.w	8004e54 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1da      	bne.n	8004d48 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3308      	adds	r3, #8
 8004db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004db6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e1      	bne.n	8004d92 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e3      	bne.n	8004dce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e24:	f023 0310 	bic.w	r3, r3, #16
 8004e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e4      	bne.n	8004e14 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fc fff9 	bl	8001e46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8d8 	bl	8005024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e74:	e0b9      	b.n	8004fea <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80ab 	beq.w	8004fee <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80a6 	beq.w	8004fee <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e4      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004efc:	633a      	str	r2, [r7, #48]	@ 0x30
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e3      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	69b9      	ldr	r1, [r7, #24]
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	617b      	str	r3, [r7, #20]
   return(result);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e4      	bne.n	8004f24 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f85c 	bl	8005024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f6c:	e03f      	b.n	8004fee <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00e      	beq.n	8004f98 <HAL_UART_IRQHandler+0x570>
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004f8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 f89f 	bl	80060d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f96:	e02d      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01c      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
    }
    return;
 8004fc0:	e017      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fe93 	bl	8005d06 <UART_EndTransmit_IT>
    return;
 8004fe0:	e008      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004fe2:	bf00      	nop
 8004fe4:	e006      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004fe6:	bf00      	nop
 8004fe8:	e004      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004ff2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004ff4:	37e8      	adds	r7, #232	@ 0xe8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop

08004ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b08a      	sub	sp, #40	@ 0x28
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	431a      	orrs	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	4313      	orrs	r3, r2
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4ba4      	ldr	r3, [pc, #656]	@ (80052fc <UART_SetConfig+0x2c0>)
 800506c:	4013      	ands	r3, r2
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005074:	430b      	orrs	r3, r1
 8005076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a99      	ldr	r2, [pc, #612]	@ (8005300 <UART_SetConfig+0x2c4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a4:	4313      	orrs	r3, r2
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a90      	ldr	r2, [pc, #576]	@ (8005304 <UART_SetConfig+0x2c8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d126      	bne.n	8005114 <UART_SetConfig+0xd8>
 80050c6:	4b90      	ldr	r3, [pc, #576]	@ (8005308 <UART_SetConfig+0x2cc>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d81b      	bhi.n	800510c <UART_SetConfig+0xd0>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0xa0>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	08005105 	.word	0x08005105
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f2:	e116      	b.n	8005322 <UART_SetConfig+0x2e6>
 80050f4:	2302      	movs	r3, #2
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fa:	e112      	b.n	8005322 <UART_SetConfig+0x2e6>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005102:	e10e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510a:	e10a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e106      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7c      	ldr	r2, [pc, #496]	@ (800530c <UART_SetConfig+0x2d0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d138      	bne.n	8005190 <UART_SetConfig+0x154>
 800511e:	4b7a      	ldr	r3, [pc, #488]	@ (8005308 <UART_SetConfig+0x2cc>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d82d      	bhi.n	8005188 <UART_SetConfig+0x14c>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <UART_SetConfig+0xf8>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005169 	.word	0x08005169
 8005138:	08005189 	.word	0x08005189
 800513c:	08005189 	.word	0x08005189
 8005140:	08005189 	.word	0x08005189
 8005144:	08005179 	.word	0x08005179
 8005148:	08005189 	.word	0x08005189
 800514c:	08005189 	.word	0x08005189
 8005150:	08005189 	.word	0x08005189
 8005154:	08005171 	.word	0x08005171
 8005158:	08005189 	.word	0x08005189
 800515c:	08005189 	.word	0x08005189
 8005160:	08005189 	.word	0x08005189
 8005164:	08005181 	.word	0x08005181
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516e:	e0d8      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005170:	2302      	movs	r3, #2
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005176:	e0d4      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517e:	e0d0      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005186:	e0cc      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518e:	e0c8      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5e      	ldr	r2, [pc, #376]	@ (8005310 <UART_SetConfig+0x2d4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d125      	bne.n	80051e6 <UART_SetConfig+0x1aa>
 800519a:	4b5b      	ldr	r3, [pc, #364]	@ (8005308 <UART_SetConfig+0x2cc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051a4:	2b30      	cmp	r3, #48	@ 0x30
 80051a6:	d016      	beq.n	80051d6 <UART_SetConfig+0x19a>
 80051a8:	2b30      	cmp	r3, #48	@ 0x30
 80051aa:	d818      	bhi.n	80051de <UART_SetConfig+0x1a2>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d00a      	beq.n	80051c6 <UART_SetConfig+0x18a>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d814      	bhi.n	80051de <UART_SetConfig+0x1a2>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <UART_SetConfig+0x182>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d008      	beq.n	80051ce <UART_SetConfig+0x192>
 80051bc:	e00f      	b.n	80051de <UART_SetConfig+0x1a2>
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c4:	e0ad      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051c6:	2302      	movs	r3, #2
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051cc:	e0a9      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051ce:	2304      	movs	r3, #4
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d4:	e0a5      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051d6:	2308      	movs	r3, #8
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051dc:	e0a1      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051de:	2310      	movs	r3, #16
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e4:	e09d      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005314 <UART_SetConfig+0x2d8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d125      	bne.n	800523c <UART_SetConfig+0x200>
 80051f0:	4b45      	ldr	r3, [pc, #276]	@ (8005308 <UART_SetConfig+0x2cc>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80051fc:	d016      	beq.n	800522c <UART_SetConfig+0x1f0>
 80051fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005200:	d818      	bhi.n	8005234 <UART_SetConfig+0x1f8>
 8005202:	2b80      	cmp	r3, #128	@ 0x80
 8005204:	d00a      	beq.n	800521c <UART_SetConfig+0x1e0>
 8005206:	2b80      	cmp	r3, #128	@ 0x80
 8005208:	d814      	bhi.n	8005234 <UART_SetConfig+0x1f8>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <UART_SetConfig+0x1d8>
 800520e:	2b40      	cmp	r3, #64	@ 0x40
 8005210:	d008      	beq.n	8005224 <UART_SetConfig+0x1e8>
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x1f8>
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521a:	e082      	b.n	8005322 <UART_SetConfig+0x2e6>
 800521c:	2302      	movs	r3, #2
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005222:	e07e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522a:	e07a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005232:	e076      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523a:	e072      	b.n	8005322 <UART_SetConfig+0x2e6>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a35      	ldr	r2, [pc, #212]	@ (8005318 <UART_SetConfig+0x2dc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12a      	bne.n	800529c <UART_SetConfig+0x260>
 8005246:	4b30      	ldr	r3, [pc, #192]	@ (8005308 <UART_SetConfig+0x2cc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005254:	d01a      	beq.n	800528c <UART_SetConfig+0x250>
 8005256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525a:	d81b      	bhi.n	8005294 <UART_SetConfig+0x258>
 800525c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005260:	d00c      	beq.n	800527c <UART_SetConfig+0x240>
 8005262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005266:	d815      	bhi.n	8005294 <UART_SetConfig+0x258>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <UART_SetConfig+0x238>
 800526c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005270:	d008      	beq.n	8005284 <UART_SetConfig+0x248>
 8005272:	e00f      	b.n	8005294 <UART_SetConfig+0x258>
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527a:	e052      	b.n	8005322 <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e04e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e04a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005292:	e046      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e042      	b.n	8005322 <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <UART_SetConfig+0x2c4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d13a      	bne.n	800531c <UART_SetConfig+0x2e0>
 80052a6:	4b18      	ldr	r3, [pc, #96]	@ (8005308 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b4:	d01a      	beq.n	80052ec <UART_SetConfig+0x2b0>
 80052b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0x2b8>
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c0:	d00c      	beq.n	80052dc <UART_SetConfig+0x2a0>
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c6:	d815      	bhi.n	80052f4 <UART_SetConfig+0x2b8>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <UART_SetConfig+0x298>
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d0:	d008      	beq.n	80052e4 <UART_SetConfig+0x2a8>
 80052d2:	e00f      	b.n	80052f4 <UART_SetConfig+0x2b8>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052da:	e022      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e2:	e01e      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ea:	e01a      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f2:	e016      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fa:	e012      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052fc:	efff69f3 	.word	0xefff69f3
 8005300:	40008000 	.word	0x40008000
 8005304:	40013800 	.word	0x40013800
 8005308:	40021000 	.word	0x40021000
 800530c:	40004400 	.word	0x40004400
 8005310:	40004800 	.word	0x40004800
 8005314:	40004c00 	.word	0x40004c00
 8005318:	40005000 	.word	0x40005000
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a9f      	ldr	r2, [pc, #636]	@ (80055a4 <UART_SetConfig+0x568>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d17a      	bne.n	8005422 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800532c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005330:	2b08      	cmp	r3, #8
 8005332:	d824      	bhi.n	800537e <UART_SetConfig+0x342>
 8005334:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0x300>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	0800537f 	.word	0x0800537f
 8005344:	08005369 	.word	0x08005369
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800536f 	.word	0x0800536f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800537f 	.word	0x0800537f
 800535c:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fd fd8a 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b8f      	ldr	r3, [pc, #572]	@ (80055a8 <UART_SetConfig+0x56c>)
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fd fceb 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537a:	61fb      	str	r3, [r7, #28]
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005388:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80fb 	beq.w	8005588 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d305      	bcc.n	80053ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053b4:	e0e8      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2200      	movs	r2, #0
 80053ba:	461c      	mov	r4, r3
 80053bc:	4615      	mov	r5, r2
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	022b      	lsls	r3, r5, #8
 80053c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053cc:	0222      	lsls	r2, r4, #8
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6849      	ldr	r1, [r1, #4]
 80053d2:	0849      	lsrs	r1, r1, #1
 80053d4:	2000      	movs	r0, #0
 80053d6:	4688      	mov	r8, r1
 80053d8:	4681      	mov	r9, r0
 80053da:	eb12 0a08 	adds.w	sl, r2, r8
 80053de:	eb43 0b09 	adc.w	fp, r3, r9
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f0:	4650      	mov	r0, sl
 80053f2:	4659      	mov	r1, fp
 80053f4:	f7fb fbd8 	bl	8000ba8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005406:	d308      	bcc.n	800541a <UART_SetConfig+0x3de>
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800540e:	d204      	bcs.n	800541a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e0b6      	b.n	8005588 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005420:	e0b2      	b.n	8005588 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542a:	d15e      	bne.n	80054ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800542c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005430:	2b08      	cmp	r3, #8
 8005432:	d828      	bhi.n	8005486 <UART_SetConfig+0x44a>
 8005434:	a201      	add	r2, pc, #4	@ (adr r2, 800543c <UART_SetConfig+0x400>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	08005487 	.word	0x08005487
 800544c:	08005477 	.word	0x08005477
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
 800545c:	0800547f 	.word	0x0800547f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fd fd0a 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8005464:	61f8      	str	r0, [r7, #28]
        break;
 8005466:	e014      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7fd fd1c 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 800546c:	61f8      	str	r0, [r7, #28]
        break;
 800546e:	e010      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005470:	4b4d      	ldr	r3, [pc, #308]	@ (80055a8 <UART_SetConfig+0x56c>)
 8005472:	61fb      	str	r3, [r7, #28]
        break;
 8005474:	e00d      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005476:	f7fd fc67 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 800547a:	61f8      	str	r0, [r7, #28]
        break;
 800547c:	e009      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005482:	61fb      	str	r3, [r7, #28]
        break;
 8005484:	e005      	b.n	8005492 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d077      	beq.n	8005588 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005a      	lsls	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	441a      	add	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d916      	bls.n	80054e2 <UART_SetConfig+0x4a6>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ba:	d212      	bcs.n	80054e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f023 030f 	bic.w	r3, r3, #15
 80054c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	8afb      	ldrh	r3, [r7, #22]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	8afa      	ldrh	r2, [r7, #22]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e052      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054e8:	e04e      	b.n	8005588 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d827      	bhi.n	8005542 <UART_SetConfig+0x506>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <UART_SetConfig+0x4bc>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800552d 	.word	0x0800552d
 8005504:	08005543 	.word	0x08005543
 8005508:	08005533 	.word	0x08005533
 800550c:	08005543 	.word	0x08005543
 8005510:	08005543 	.word	0x08005543
 8005514:	08005543 	.word	0x08005543
 8005518:	0800553b 	.word	0x0800553b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800551c:	f7fd fcac 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8005520:	61f8      	str	r0, [r7, #28]
        break;
 8005522:	e014      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fd fcbe 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8005528:	61f8      	str	r0, [r7, #28]
        break;
 800552a:	e010      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800552c:	4b1e      	ldr	r3, [pc, #120]	@ (80055a8 <UART_SetConfig+0x56c>)
 800552e:	61fb      	str	r3, [r7, #28]
        break;
 8005530:	e00d      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005532:	f7fd fc09 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8005536:	61f8      	str	r0, [r7, #28]
        break;
 8005538:	e009      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800553e:	61fb      	str	r3, [r7, #28]
        break;
 8005540:	e005      	b.n	800554e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800554c:	bf00      	nop
    }

    if (pclk != 0U)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d019      	beq.n	8005588 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085a      	lsrs	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	441a      	add	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	d909      	bls.n	8005582 <UART_SetConfig+0x546>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005574:	d205      	bcs.n	8005582 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e002      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005594:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	@ 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a2:	bf00      	nop
 80055a4:	40008000 	.word	0x40008000
 80055a8:	00f42400 	.word	0x00f42400

080055ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01a      	beq.n	80056c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056aa:	d10a      	bne.n	80056c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b098      	sub	sp, #96	@ 0x60
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005700:	f7fc fa60 	bl	8001bc4 <HAL_GetTick>
 8005704:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d12e      	bne.n	8005772 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005714:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f88c 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d021      	beq.n	8005772 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800573c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005742:	653b      	str	r3, [r7, #80]	@ 0x50
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e062      	b.n	8005838 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d149      	bne.n	8005814 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005788:	2200      	movs	r2, #0
 800578a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f856 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d03c      	beq.n	8005814 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	623b      	str	r3, [r7, #32]
   return(result);
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60fb      	str	r3, [r7, #12]
   return(result);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ec:	61fa      	str	r2, [r7, #28]
 80057ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	617b      	str	r3, [r7, #20]
   return(result);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e011      	b.n	8005838 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3758      	adds	r7, #88	@ 0x58
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005850:	e049      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d045      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fc f9b3 	bl	8001bc4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <UART_WaitOnFlagUntilTimeout+0x30>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e048      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d031      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b08      	cmp	r3, #8
 800588e:	d110      	bne.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2208      	movs	r2, #8
 8005896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f8ff 	bl	8005a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2208      	movs	r2, #8
 80058a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e029      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c0:	d111      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f8e5 	bl	8005a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e00f      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4013      	ands	r3, r2
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	429a      	cmp	r2, r3
 8005902:	d0a6      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005910:	b480      	push	{r7}
 8005912:	b097      	sub	sp, #92	@ 0x5c
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005942:	d10e      	bne.n	8005962 <UART_Start_Receive_IT+0x52>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <UART_Start_Receive_IT+0x48>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005952:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005956:	e02d      	b.n	80059b4 <UART_Start_Receive_IT+0xa4>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	22ff      	movs	r2, #255	@ 0xff
 800595c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005960:	e028      	b.n	80059b4 <UART_Start_Receive_IT+0xa4>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10d      	bne.n	8005986 <UART_Start_Receive_IT+0x76>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <UART_Start_Receive_IT+0x6c>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	22ff      	movs	r2, #255	@ 0xff
 8005976:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800597a:	e01b      	b.n	80059b4 <UART_Start_Receive_IT+0xa4>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	227f      	movs	r2, #127	@ 0x7f
 8005980:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005984:	e016      	b.n	80059b4 <UART_Start_Receive_IT+0xa4>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800598e:	d10d      	bne.n	80059ac <UART_Start_Receive_IT+0x9c>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <UART_Start_Receive_IT+0x92>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	227f      	movs	r2, #127	@ 0x7f
 800599c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059a0:	e008      	b.n	80059b4 <UART_Start_Receive_IT+0xa4>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	223f      	movs	r2, #63	@ 0x3f
 80059a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059aa:	e003      	b.n	80059b4 <UART_Start_Receive_IT+0xa4>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2222      	movs	r2, #34	@ 0x22
 80059c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3308      	adds	r3, #8
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	657b      	str	r3, [r7, #84]	@ 0x54
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80059e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80059f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a00:	d107      	bne.n	8005a12 <UART_Start_Receive_IT+0x102>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	@ (8005a94 <UART_Start_Receive_IT+0x184>)
 8005a0e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005a10:	e002      	b.n	8005a18 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a20      	ldr	r2, [pc, #128]	@ (8005a98 <UART_Start_Receive_IT+0x188>)
 8005a16:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a40:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_Start_Receive_IT+0x110>
 8005a52:	e018      	b.n	8005a86 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	613b      	str	r3, [r7, #16]
   return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f043 0320 	orr.w	r3, r3, #32
 8005a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a72:	623b      	str	r3, [r7, #32]
 8005a74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	375c      	adds	r7, #92	@ 0x5c
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	08005f19 	.word	0x08005f19
 8005a98:	08005d5d 	.word	0x08005d5d

08005a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b095      	sub	sp, #84	@ 0x54
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e6      	bne.n	8005aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e5      	bne.n	8005ad6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d118      	bne.n	8005b44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f023 0310 	bic.w	r3, r3, #16
 8005b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6979      	ldr	r1, [r7, #20]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b58:	bf00      	nop
 8005b5a:	3754      	adds	r7, #84	@ 0x54
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fa44 	bl	8005010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b08f      	sub	sp, #60	@ 0x3c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b9c:	2b21      	cmp	r3, #33	@ 0x21
 8005b9e:	d14c      	bne.n	8005c3a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d132      	bne.n	8005c12 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bcc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005c10:	e013      	b.n	8005c3a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005c3a:	bf00      	nop
 8005c3c:	373c      	adds	r7, #60	@ 0x3c
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b091      	sub	sp, #68	@ 0x44
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c52:	2b21      	cmp	r3, #33	@ 0x21
 8005c54:	d151      	bne.n	8005cfa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d132      	bne.n	8005cc8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e6      	bne.n	8005c62 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e6      	bne.n	8005c94 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005cc6:	e018      	b.n	8005cfa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	1c9a      	adds	r2, r3, #2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005cfa:	bf00      	nop
 8005cfc:	3744      	adds	r7, #68	@ 0x44
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b088      	sub	sp, #32
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6979      	ldr	r1, [r7, #20]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff f955 	bl	8004ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d52:	bf00      	nop
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b09c      	sub	sp, #112	@ 0x70
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d74:	2b22      	cmp	r3, #34	@ 0x22
 8005d76:	f040 80be 	bne.w	8005ef6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005d80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d88:	b2d9      	uxtb	r1, r3
 8005d8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d94:	400a      	ands	r2, r1
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 80a3 	bne.w	8005f0a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005de2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005de4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005de8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e6      	bne.n	8005dc4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e16:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a34      	ldr	r2, [pc, #208]	@ (8005f14 <UART_RxISR_8BIT+0x1b8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d01f      	beq.n	8005e88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d018      	beq.n	8005e88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	623b      	str	r3, [r7, #32]
   return(result);
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d12e      	bne.n	8005eee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0310 	bic.w	r3, r3, #16
 8005eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d103      	bne.n	8005ede <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2210      	movs	r2, #16
 8005edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff f89c 	bl	8005024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005eec:	e00d      	b.n	8005f0a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb fad8 	bl	80014a4 <HAL_UART_RxCpltCallback>
}
 8005ef4:	e009      	b.n	8005f0a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	8b1b      	ldrh	r3, [r3, #24]
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0208 	orr.w	r2, r2, #8
 8005f06:	b292      	uxth	r2, r2
 8005f08:	831a      	strh	r2, [r3, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	3770      	adds	r7, #112	@ 0x70
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40008000 	.word	0x40008000

08005f18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b09c      	sub	sp, #112	@ 0x70
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f30:	2b22      	cmp	r3, #34	@ 0x22
 8005f32:	f040 80be 	bne.w	80060b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f46:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005f4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f4e:	4013      	ands	r3, r2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 80a3 	bne.w	80060c6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f94:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fa0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a34      	ldr	r2, [pc, #208]	@ (80060d0 <UART_RxISR_16BIT+0x1b8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d01f      	beq.n	8006044 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006032:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	2b01      	cmp	r3, #1
 800604a:	d12e      	bne.n	80060aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f023 0310 	bic.w	r3, r3, #16
 8006066:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	613b      	str	r3, [r7, #16]
   return(result);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e6      	bne.n	8006052 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b10      	cmp	r3, #16
 8006090:	d103      	bne.n	800609a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2210      	movs	r2, #16
 8006098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fe ffbe 	bl	8005024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060a8:	e00d      	b.n	80060c6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fb f9fa 	bl	80014a4 <HAL_UART_RxCpltCallback>
}
 80060b0:	e009      	b.n	80060c6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	8b1b      	ldrh	r3, [r3, #24]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	b292      	uxth	r2, r2
 80060c4:	831a      	strh	r2, [r3, #24]
}
 80060c6:	bf00      	nop
 80060c8:	3770      	adds	r7, #112	@ 0x70
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40008000 	.word	0x40008000

080060d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <_strtol_l.constprop.0>:
 80060e8:	2b24      	cmp	r3, #36	@ 0x24
 80060ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ee:	4686      	mov	lr, r0
 80060f0:	4690      	mov	r8, r2
 80060f2:	d801      	bhi.n	80060f8 <_strtol_l.constprop.0+0x10>
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d106      	bne.n	8006106 <_strtol_l.constprop.0+0x1e>
 80060f8:	f000 fe56 	bl	8006da8 <__errno>
 80060fc:	2316      	movs	r3, #22
 80060fe:	6003      	str	r3, [r0, #0]
 8006100:	2000      	movs	r0, #0
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	4834      	ldr	r0, [pc, #208]	@ (80061d8 <_strtol_l.constprop.0+0xf0>)
 8006108:	460d      	mov	r5, r1
 800610a:	462a      	mov	r2, r5
 800610c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006110:	5d06      	ldrb	r6, [r0, r4]
 8006112:	f016 0608 	ands.w	r6, r6, #8
 8006116:	d1f8      	bne.n	800610a <_strtol_l.constprop.0+0x22>
 8006118:	2c2d      	cmp	r4, #45	@ 0x2d
 800611a:	d12d      	bne.n	8006178 <_strtol_l.constprop.0+0x90>
 800611c:	782c      	ldrb	r4, [r5, #0]
 800611e:	2601      	movs	r6, #1
 8006120:	1c95      	adds	r5, r2, #2
 8006122:	f033 0210 	bics.w	r2, r3, #16
 8006126:	d109      	bne.n	800613c <_strtol_l.constprop.0+0x54>
 8006128:	2c30      	cmp	r4, #48	@ 0x30
 800612a:	d12a      	bne.n	8006182 <_strtol_l.constprop.0+0x9a>
 800612c:	782a      	ldrb	r2, [r5, #0]
 800612e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006132:	2a58      	cmp	r2, #88	@ 0x58
 8006134:	d125      	bne.n	8006182 <_strtol_l.constprop.0+0x9a>
 8006136:	786c      	ldrb	r4, [r5, #1]
 8006138:	2310      	movs	r3, #16
 800613a:	3502      	adds	r5, #2
 800613c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006140:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006144:	2200      	movs	r2, #0
 8006146:	fbbc f9f3 	udiv	r9, ip, r3
 800614a:	4610      	mov	r0, r2
 800614c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006150:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006154:	2f09      	cmp	r7, #9
 8006156:	d81b      	bhi.n	8006190 <_strtol_l.constprop.0+0xa8>
 8006158:	463c      	mov	r4, r7
 800615a:	42a3      	cmp	r3, r4
 800615c:	dd27      	ble.n	80061ae <_strtol_l.constprop.0+0xc6>
 800615e:	1c57      	adds	r7, r2, #1
 8006160:	d007      	beq.n	8006172 <_strtol_l.constprop.0+0x8a>
 8006162:	4581      	cmp	r9, r0
 8006164:	d320      	bcc.n	80061a8 <_strtol_l.constprop.0+0xc0>
 8006166:	d101      	bne.n	800616c <_strtol_l.constprop.0+0x84>
 8006168:	45a2      	cmp	sl, r4
 800616a:	db1d      	blt.n	80061a8 <_strtol_l.constprop.0+0xc0>
 800616c:	fb00 4003 	mla	r0, r0, r3, r4
 8006170:	2201      	movs	r2, #1
 8006172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006176:	e7eb      	b.n	8006150 <_strtol_l.constprop.0+0x68>
 8006178:	2c2b      	cmp	r4, #43	@ 0x2b
 800617a:	bf04      	itt	eq
 800617c:	782c      	ldrbeq	r4, [r5, #0]
 800617e:	1c95      	addeq	r5, r2, #2
 8006180:	e7cf      	b.n	8006122 <_strtol_l.constprop.0+0x3a>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1da      	bne.n	800613c <_strtol_l.constprop.0+0x54>
 8006186:	2c30      	cmp	r4, #48	@ 0x30
 8006188:	bf0c      	ite	eq
 800618a:	2308      	moveq	r3, #8
 800618c:	230a      	movne	r3, #10
 800618e:	e7d5      	b.n	800613c <_strtol_l.constprop.0+0x54>
 8006190:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006194:	2f19      	cmp	r7, #25
 8006196:	d801      	bhi.n	800619c <_strtol_l.constprop.0+0xb4>
 8006198:	3c37      	subs	r4, #55	@ 0x37
 800619a:	e7de      	b.n	800615a <_strtol_l.constprop.0+0x72>
 800619c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80061a0:	2f19      	cmp	r7, #25
 80061a2:	d804      	bhi.n	80061ae <_strtol_l.constprop.0+0xc6>
 80061a4:	3c57      	subs	r4, #87	@ 0x57
 80061a6:	e7d8      	b.n	800615a <_strtol_l.constprop.0+0x72>
 80061a8:	f04f 32ff 	mov.w	r2, #4294967295
 80061ac:	e7e1      	b.n	8006172 <_strtol_l.constprop.0+0x8a>
 80061ae:	1c53      	adds	r3, r2, #1
 80061b0:	d108      	bne.n	80061c4 <_strtol_l.constprop.0+0xdc>
 80061b2:	2322      	movs	r3, #34	@ 0x22
 80061b4:	f8ce 3000 	str.w	r3, [lr]
 80061b8:	4660      	mov	r0, ip
 80061ba:	f1b8 0f00 	cmp.w	r8, #0
 80061be:	d0a0      	beq.n	8006102 <_strtol_l.constprop.0+0x1a>
 80061c0:	1e69      	subs	r1, r5, #1
 80061c2:	e006      	b.n	80061d2 <_strtol_l.constprop.0+0xea>
 80061c4:	b106      	cbz	r6, 80061c8 <_strtol_l.constprop.0+0xe0>
 80061c6:	4240      	negs	r0, r0
 80061c8:	f1b8 0f00 	cmp.w	r8, #0
 80061cc:	d099      	beq.n	8006102 <_strtol_l.constprop.0+0x1a>
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	d1f6      	bne.n	80061c0 <_strtol_l.constprop.0+0xd8>
 80061d2:	f8c8 1000 	str.w	r1, [r8]
 80061d6:	e794      	b.n	8006102 <_strtol_l.constprop.0+0x1a>
 80061d8:	08008f35 	.word	0x08008f35

080061dc <strtol>:
 80061dc:	4613      	mov	r3, r2
 80061de:	460a      	mov	r2, r1
 80061e0:	4601      	mov	r1, r0
 80061e2:	4802      	ldr	r0, [pc, #8]	@ (80061ec <strtol+0x10>)
 80061e4:	6800      	ldr	r0, [r0, #0]
 80061e6:	f7ff bf7f 	b.w	80060e8 <_strtol_l.constprop.0>
 80061ea:	bf00      	nop
 80061ec:	20000034 	.word	0x20000034

080061f0 <__cvt>:
 80061f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	ec57 6b10 	vmov	r6, r7, d0
 80061f8:	2f00      	cmp	r7, #0
 80061fa:	460c      	mov	r4, r1
 80061fc:	4619      	mov	r1, r3
 80061fe:	463b      	mov	r3, r7
 8006200:	bfbb      	ittet	lt
 8006202:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006206:	461f      	movlt	r7, r3
 8006208:	2300      	movge	r3, #0
 800620a:	232d      	movlt	r3, #45	@ 0x2d
 800620c:	700b      	strb	r3, [r1, #0]
 800620e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006210:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006214:	4691      	mov	r9, r2
 8006216:	f023 0820 	bic.w	r8, r3, #32
 800621a:	bfbc      	itt	lt
 800621c:	4632      	movlt	r2, r6
 800621e:	4616      	movlt	r6, r2
 8006220:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006224:	d005      	beq.n	8006232 <__cvt+0x42>
 8006226:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800622a:	d100      	bne.n	800622e <__cvt+0x3e>
 800622c:	3401      	adds	r4, #1
 800622e:	2102      	movs	r1, #2
 8006230:	e000      	b.n	8006234 <__cvt+0x44>
 8006232:	2103      	movs	r1, #3
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	ab02      	add	r3, sp, #8
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	ec47 6b10 	vmov	d0, r6, r7
 8006240:	4653      	mov	r3, sl
 8006242:	4622      	mov	r2, r4
 8006244:	f000 fe68 	bl	8006f18 <_dtoa_r>
 8006248:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800624c:	4605      	mov	r5, r0
 800624e:	d119      	bne.n	8006284 <__cvt+0x94>
 8006250:	f019 0f01 	tst.w	r9, #1
 8006254:	d00e      	beq.n	8006274 <__cvt+0x84>
 8006256:	eb00 0904 	add.w	r9, r0, r4
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	f7fa fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8006266:	b108      	cbz	r0, 800626c <__cvt+0x7c>
 8006268:	f8cd 900c 	str.w	r9, [sp, #12]
 800626c:	2230      	movs	r2, #48	@ 0x30
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	454b      	cmp	r3, r9
 8006272:	d31e      	bcc.n	80062b2 <__cvt+0xc2>
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006278:	1b5b      	subs	r3, r3, r5
 800627a:	4628      	mov	r0, r5
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	b004      	add	sp, #16
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006288:	eb00 0904 	add.w	r9, r0, r4
 800628c:	d1e5      	bne.n	800625a <__cvt+0x6a>
 800628e:	7803      	ldrb	r3, [r0, #0]
 8006290:	2b30      	cmp	r3, #48	@ 0x30
 8006292:	d10a      	bne.n	80062aa <__cvt+0xba>
 8006294:	2200      	movs	r2, #0
 8006296:	2300      	movs	r3, #0
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a0:	b918      	cbnz	r0, 80062aa <__cvt+0xba>
 80062a2:	f1c4 0401 	rsb	r4, r4, #1
 80062a6:	f8ca 4000 	str.w	r4, [sl]
 80062aa:	f8da 3000 	ldr.w	r3, [sl]
 80062ae:	4499      	add	r9, r3
 80062b0:	e7d3      	b.n	800625a <__cvt+0x6a>
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	9103      	str	r1, [sp, #12]
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	e7d9      	b.n	800626e <__cvt+0x7e>

080062ba <__exponent>:
 80062ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062bc:	2900      	cmp	r1, #0
 80062be:	bfba      	itte	lt
 80062c0:	4249      	neglt	r1, r1
 80062c2:	232d      	movlt	r3, #45	@ 0x2d
 80062c4:	232b      	movge	r3, #43	@ 0x2b
 80062c6:	2909      	cmp	r1, #9
 80062c8:	7002      	strb	r2, [r0, #0]
 80062ca:	7043      	strb	r3, [r0, #1]
 80062cc:	dd29      	ble.n	8006322 <__exponent+0x68>
 80062ce:	f10d 0307 	add.w	r3, sp, #7
 80062d2:	461d      	mov	r5, r3
 80062d4:	270a      	movs	r7, #10
 80062d6:	461a      	mov	r2, r3
 80062d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80062dc:	fb07 1416 	mls	r4, r7, r6, r1
 80062e0:	3430      	adds	r4, #48	@ 0x30
 80062e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062e6:	460c      	mov	r4, r1
 80062e8:	2c63      	cmp	r4, #99	@ 0x63
 80062ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80062ee:	4631      	mov	r1, r6
 80062f0:	dcf1      	bgt.n	80062d6 <__exponent+0x1c>
 80062f2:	3130      	adds	r1, #48	@ 0x30
 80062f4:	1e94      	subs	r4, r2, #2
 80062f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062fa:	1c41      	adds	r1, r0, #1
 80062fc:	4623      	mov	r3, r4
 80062fe:	42ab      	cmp	r3, r5
 8006300:	d30a      	bcc.n	8006318 <__exponent+0x5e>
 8006302:	f10d 0309 	add.w	r3, sp, #9
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	42ac      	cmp	r4, r5
 800630a:	bf88      	it	hi
 800630c:	2300      	movhi	r3, #0
 800630e:	3302      	adds	r3, #2
 8006310:	4403      	add	r3, r0
 8006312:	1a18      	subs	r0, r3, r0
 8006314:	b003      	add	sp, #12
 8006316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006318:	f813 6b01 	ldrb.w	r6, [r3], #1
 800631c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006320:	e7ed      	b.n	80062fe <__exponent+0x44>
 8006322:	2330      	movs	r3, #48	@ 0x30
 8006324:	3130      	adds	r1, #48	@ 0x30
 8006326:	7083      	strb	r3, [r0, #2]
 8006328:	70c1      	strb	r1, [r0, #3]
 800632a:	1d03      	adds	r3, r0, #4
 800632c:	e7f1      	b.n	8006312 <__exponent+0x58>
	...

08006330 <_printf_float>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	b08d      	sub	sp, #52	@ 0x34
 8006336:	460c      	mov	r4, r1
 8006338:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800633c:	4616      	mov	r6, r2
 800633e:	461f      	mov	r7, r3
 8006340:	4605      	mov	r5, r0
 8006342:	f000 fce7 	bl	8006d14 <_localeconv_r>
 8006346:	6803      	ldr	r3, [r0, #0]
 8006348:	9304      	str	r3, [sp, #16]
 800634a:	4618      	mov	r0, r3
 800634c:	f7f9 ff90 	bl	8000270 <strlen>
 8006350:	2300      	movs	r3, #0
 8006352:	930a      	str	r3, [sp, #40]	@ 0x28
 8006354:	f8d8 3000 	ldr.w	r3, [r8]
 8006358:	9005      	str	r0, [sp, #20]
 800635a:	3307      	adds	r3, #7
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	f103 0208 	add.w	r2, r3, #8
 8006364:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006368:	f8d4 b000 	ldr.w	fp, [r4]
 800636c:	f8c8 2000 	str.w	r2, [r8]
 8006370:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006374:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006378:	9307      	str	r3, [sp, #28]
 800637a:	f8cd 8018 	str.w	r8, [sp, #24]
 800637e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006386:	4b9c      	ldr	r3, [pc, #624]	@ (80065f8 <_printf_float+0x2c8>)
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	f7fa fbce 	bl	8000b2c <__aeabi_dcmpun>
 8006390:	bb70      	cbnz	r0, 80063f0 <_printf_float+0xc0>
 8006392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006396:	4b98      	ldr	r3, [pc, #608]	@ (80065f8 <_printf_float+0x2c8>)
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	f7fa fba8 	bl	8000af0 <__aeabi_dcmple>
 80063a0:	bb30      	cbnz	r0, 80063f0 <_printf_float+0xc0>
 80063a2:	2200      	movs	r2, #0
 80063a4:	2300      	movs	r3, #0
 80063a6:	4640      	mov	r0, r8
 80063a8:	4649      	mov	r1, r9
 80063aa:	f7fa fb97 	bl	8000adc <__aeabi_dcmplt>
 80063ae:	b110      	cbz	r0, 80063b6 <_printf_float+0x86>
 80063b0:	232d      	movs	r3, #45	@ 0x2d
 80063b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063b6:	4a91      	ldr	r2, [pc, #580]	@ (80065fc <_printf_float+0x2cc>)
 80063b8:	4b91      	ldr	r3, [pc, #580]	@ (8006600 <_printf_float+0x2d0>)
 80063ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063be:	bf94      	ite	ls
 80063c0:	4690      	movls	r8, r2
 80063c2:	4698      	movhi	r8, r3
 80063c4:	2303      	movs	r3, #3
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	f02b 0304 	bic.w	r3, fp, #4
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	f04f 0900 	mov.w	r9, #0
 80063d2:	9700      	str	r7, [sp, #0]
 80063d4:	4633      	mov	r3, r6
 80063d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 f9d2 	bl	8006784 <_printf_common>
 80063e0:	3001      	adds	r0, #1
 80063e2:	f040 808d 	bne.w	8006500 <_printf_float+0x1d0>
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	b00d      	add	sp, #52	@ 0x34
 80063ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	4649      	mov	r1, r9
 80063f8:	f7fa fb98 	bl	8000b2c <__aeabi_dcmpun>
 80063fc:	b140      	cbz	r0, 8006410 <_printf_float+0xe0>
 80063fe:	464b      	mov	r3, r9
 8006400:	2b00      	cmp	r3, #0
 8006402:	bfbc      	itt	lt
 8006404:	232d      	movlt	r3, #45	@ 0x2d
 8006406:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800640a:	4a7e      	ldr	r2, [pc, #504]	@ (8006604 <_printf_float+0x2d4>)
 800640c:	4b7e      	ldr	r3, [pc, #504]	@ (8006608 <_printf_float+0x2d8>)
 800640e:	e7d4      	b.n	80063ba <_printf_float+0x8a>
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006416:	9206      	str	r2, [sp, #24]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	d13b      	bne.n	8006494 <_printf_float+0x164>
 800641c:	2306      	movs	r3, #6
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006424:	2300      	movs	r3, #0
 8006426:	6022      	str	r2, [r4, #0]
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	ab0a      	add	r3, sp, #40	@ 0x28
 800642c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006430:	ab09      	add	r3, sp, #36	@ 0x24
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	6861      	ldr	r1, [r4, #4]
 8006436:	ec49 8b10 	vmov	d0, r8, r9
 800643a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800643e:	4628      	mov	r0, r5
 8006440:	f7ff fed6 	bl	80061f0 <__cvt>
 8006444:	9b06      	ldr	r3, [sp, #24]
 8006446:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006448:	2b47      	cmp	r3, #71	@ 0x47
 800644a:	4680      	mov	r8, r0
 800644c:	d129      	bne.n	80064a2 <_printf_float+0x172>
 800644e:	1cc8      	adds	r0, r1, #3
 8006450:	db02      	blt.n	8006458 <_printf_float+0x128>
 8006452:	6863      	ldr	r3, [r4, #4]
 8006454:	4299      	cmp	r1, r3
 8006456:	dd41      	ble.n	80064dc <_printf_float+0x1ac>
 8006458:	f1aa 0a02 	sub.w	sl, sl, #2
 800645c:	fa5f fa8a 	uxtb.w	sl, sl
 8006460:	3901      	subs	r1, #1
 8006462:	4652      	mov	r2, sl
 8006464:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006468:	9109      	str	r1, [sp, #36]	@ 0x24
 800646a:	f7ff ff26 	bl	80062ba <__exponent>
 800646e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006470:	1813      	adds	r3, r2, r0
 8006472:	2a01      	cmp	r2, #1
 8006474:	4681      	mov	r9, r0
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	dc02      	bgt.n	8006480 <_printf_float+0x150>
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	07d2      	lsls	r2, r2, #31
 800647e:	d501      	bpl.n	8006484 <_printf_float+0x154>
 8006480:	3301      	adds	r3, #1
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0a2      	beq.n	80063d2 <_printf_float+0xa2>
 800648c:	232d      	movs	r3, #45	@ 0x2d
 800648e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006492:	e79e      	b.n	80063d2 <_printf_float+0xa2>
 8006494:	9a06      	ldr	r2, [sp, #24]
 8006496:	2a47      	cmp	r2, #71	@ 0x47
 8006498:	d1c2      	bne.n	8006420 <_printf_float+0xf0>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1c0      	bne.n	8006420 <_printf_float+0xf0>
 800649e:	2301      	movs	r3, #1
 80064a0:	e7bd      	b.n	800641e <_printf_float+0xee>
 80064a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064a6:	d9db      	bls.n	8006460 <_printf_float+0x130>
 80064a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064ac:	d118      	bne.n	80064e0 <_printf_float+0x1b0>
 80064ae:	2900      	cmp	r1, #0
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	dd0b      	ble.n	80064cc <_printf_float+0x19c>
 80064b4:	6121      	str	r1, [r4, #16]
 80064b6:	b913      	cbnz	r3, 80064be <_printf_float+0x18e>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	07d0      	lsls	r0, r2, #31
 80064bc:	d502      	bpl.n	80064c4 <_printf_float+0x194>
 80064be:	3301      	adds	r3, #1
 80064c0:	440b      	add	r3, r1
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	e7db      	b.n	8006484 <_printf_float+0x154>
 80064cc:	b913      	cbnz	r3, 80064d4 <_printf_float+0x1a4>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	07d2      	lsls	r2, r2, #31
 80064d2:	d501      	bpl.n	80064d8 <_printf_float+0x1a8>
 80064d4:	3302      	adds	r3, #2
 80064d6:	e7f4      	b.n	80064c2 <_printf_float+0x192>
 80064d8:	2301      	movs	r3, #1
 80064da:	e7f2      	b.n	80064c2 <_printf_float+0x192>
 80064dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064e2:	4299      	cmp	r1, r3
 80064e4:	db05      	blt.n	80064f2 <_printf_float+0x1c2>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	6121      	str	r1, [r4, #16]
 80064ea:	07d8      	lsls	r0, r3, #31
 80064ec:	d5ea      	bpl.n	80064c4 <_printf_float+0x194>
 80064ee:	1c4b      	adds	r3, r1, #1
 80064f0:	e7e7      	b.n	80064c2 <_printf_float+0x192>
 80064f2:	2900      	cmp	r1, #0
 80064f4:	bfd4      	ite	le
 80064f6:	f1c1 0202 	rsble	r2, r1, #2
 80064fa:	2201      	movgt	r2, #1
 80064fc:	4413      	add	r3, r2
 80064fe:	e7e0      	b.n	80064c2 <_printf_float+0x192>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	055a      	lsls	r2, r3, #21
 8006504:	d407      	bmi.n	8006516 <_printf_float+0x1e6>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	4642      	mov	r2, r8
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	d12b      	bne.n	800656c <_printf_float+0x23c>
 8006514:	e767      	b.n	80063e6 <_printf_float+0xb6>
 8006516:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800651a:	f240 80dd 	bls.w	80066d8 <_printf_float+0x3a8>
 800651e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006522:	2200      	movs	r2, #0
 8006524:	2300      	movs	r3, #0
 8006526:	f7fa facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800652a:	2800      	cmp	r0, #0
 800652c:	d033      	beq.n	8006596 <_printf_float+0x266>
 800652e:	4a37      	ldr	r2, [pc, #220]	@ (800660c <_printf_float+0x2dc>)
 8006530:	2301      	movs	r3, #1
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f af54 	beq.w	80063e6 <_printf_float+0xb6>
 800653e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006542:	4543      	cmp	r3, r8
 8006544:	db02      	blt.n	800654c <_printf_float+0x21c>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	07d8      	lsls	r0, r3, #31
 800654a:	d50f      	bpl.n	800656c <_printf_float+0x23c>
 800654c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	f43f af45 	beq.w	80063e6 <_printf_float+0xb6>
 800655c:	f04f 0900 	mov.w	r9, #0
 8006560:	f108 38ff 	add.w	r8, r8, #4294967295
 8006564:	f104 0a1a 	add.w	sl, r4, #26
 8006568:	45c8      	cmp	r8, r9
 800656a:	dc09      	bgt.n	8006580 <_printf_float+0x250>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	f100 8103 	bmi.w	800677a <_printf_float+0x44a>
 8006574:	68e0      	ldr	r0, [r4, #12]
 8006576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006578:	4298      	cmp	r0, r3
 800657a:	bfb8      	it	lt
 800657c:	4618      	movlt	r0, r3
 800657e:	e734      	b.n	80063ea <_printf_float+0xba>
 8006580:	2301      	movs	r3, #1
 8006582:	4652      	mov	r2, sl
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f af2b 	beq.w	80063e6 <_printf_float+0xb6>
 8006590:	f109 0901 	add.w	r9, r9, #1
 8006594:	e7e8      	b.n	8006568 <_printf_float+0x238>
 8006596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	dc39      	bgt.n	8006610 <_printf_float+0x2e0>
 800659c:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <_printf_float+0x2dc>)
 800659e:	2301      	movs	r3, #1
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f af1d 	beq.w	80063e6 <_printf_float+0xb6>
 80065ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80065b0:	ea59 0303 	orrs.w	r3, r9, r3
 80065b4:	d102      	bne.n	80065bc <_printf_float+0x28c>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	07d9      	lsls	r1, r3, #31
 80065ba:	d5d7      	bpl.n	800656c <_printf_float+0x23c>
 80065bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f af0d 	beq.w	80063e6 <_printf_float+0xb6>
 80065cc:	f04f 0a00 	mov.w	sl, #0
 80065d0:	f104 0b1a 	add.w	fp, r4, #26
 80065d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d6:	425b      	negs	r3, r3
 80065d8:	4553      	cmp	r3, sl
 80065da:	dc01      	bgt.n	80065e0 <_printf_float+0x2b0>
 80065dc:	464b      	mov	r3, r9
 80065de:	e793      	b.n	8006508 <_printf_float+0x1d8>
 80065e0:	2301      	movs	r3, #1
 80065e2:	465a      	mov	r2, fp
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f aefb 	beq.w	80063e6 <_printf_float+0xb6>
 80065f0:	f10a 0a01 	add.w	sl, sl, #1
 80065f4:	e7ee      	b.n	80065d4 <_printf_float+0x2a4>
 80065f6:	bf00      	nop
 80065f8:	7fefffff 	.word	0x7fefffff
 80065fc:	08009035 	.word	0x08009035
 8006600:	08009039 	.word	0x08009039
 8006604:	0800903d 	.word	0x0800903d
 8006608:	08009041 	.word	0x08009041
 800660c:	08009045 	.word	0x08009045
 8006610:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006612:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006616:	4553      	cmp	r3, sl
 8006618:	bfa8      	it	ge
 800661a:	4653      	movge	r3, sl
 800661c:	2b00      	cmp	r3, #0
 800661e:	4699      	mov	r9, r3
 8006620:	dc36      	bgt.n	8006690 <_printf_float+0x360>
 8006622:	f04f 0b00 	mov.w	fp, #0
 8006626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800662a:	f104 021a 	add.w	r2, r4, #26
 800662e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006630:	9306      	str	r3, [sp, #24]
 8006632:	eba3 0309 	sub.w	r3, r3, r9
 8006636:	455b      	cmp	r3, fp
 8006638:	dc31      	bgt.n	800669e <_printf_float+0x36e>
 800663a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663c:	459a      	cmp	sl, r3
 800663e:	dc3a      	bgt.n	80066b6 <_printf_float+0x386>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	07da      	lsls	r2, r3, #31
 8006644:	d437      	bmi.n	80066b6 <_printf_float+0x386>
 8006646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006648:	ebaa 0903 	sub.w	r9, sl, r3
 800664c:	9b06      	ldr	r3, [sp, #24]
 800664e:	ebaa 0303 	sub.w	r3, sl, r3
 8006652:	4599      	cmp	r9, r3
 8006654:	bfa8      	it	ge
 8006656:	4699      	movge	r9, r3
 8006658:	f1b9 0f00 	cmp.w	r9, #0
 800665c:	dc33      	bgt.n	80066c6 <_printf_float+0x396>
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006666:	f104 0b1a 	add.w	fp, r4, #26
 800666a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666c:	ebaa 0303 	sub.w	r3, sl, r3
 8006670:	eba3 0309 	sub.w	r3, r3, r9
 8006674:	4543      	cmp	r3, r8
 8006676:	f77f af79 	ble.w	800656c <_printf_float+0x23c>
 800667a:	2301      	movs	r3, #1
 800667c:	465a      	mov	r2, fp
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f aeae 	beq.w	80063e6 <_printf_float+0xb6>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	e7ec      	b.n	800666a <_printf_float+0x33a>
 8006690:	4642      	mov	r2, r8
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	d1c2      	bne.n	8006622 <_printf_float+0x2f2>
 800669c:	e6a3      	b.n	80063e6 <_printf_float+0xb6>
 800669e:	2301      	movs	r3, #1
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	9206      	str	r2, [sp, #24]
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	f43f ae9c 	beq.w	80063e6 <_printf_float+0xb6>
 80066ae:	9a06      	ldr	r2, [sp, #24]
 80066b0:	f10b 0b01 	add.w	fp, fp, #1
 80066b4:	e7bb      	b.n	800662e <_printf_float+0x2fe>
 80066b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	d1c0      	bne.n	8006646 <_printf_float+0x316>
 80066c4:	e68f      	b.n	80063e6 <_printf_float+0xb6>
 80066c6:	9a06      	ldr	r2, [sp, #24]
 80066c8:	464b      	mov	r3, r9
 80066ca:	4442      	add	r2, r8
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	d1c3      	bne.n	800665e <_printf_float+0x32e>
 80066d6:	e686      	b.n	80063e6 <_printf_float+0xb6>
 80066d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066dc:	f1ba 0f01 	cmp.w	sl, #1
 80066e0:	dc01      	bgt.n	80066e6 <_printf_float+0x3b6>
 80066e2:	07db      	lsls	r3, r3, #31
 80066e4:	d536      	bpl.n	8006754 <_printf_float+0x424>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4642      	mov	r2, r8
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae78 	beq.w	80063e6 <_printf_float+0xb6>
 80066f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	f43f ae70 	beq.w	80063e6 <_printf_float+0xb6>
 8006706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006712:	f7fa f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006716:	b9c0      	cbnz	r0, 800674a <_printf_float+0x41a>
 8006718:	4653      	mov	r3, sl
 800671a:	f108 0201 	add.w	r2, r8, #1
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	d10c      	bne.n	8006742 <_printf_float+0x412>
 8006728:	e65d      	b.n	80063e6 <_printf_float+0xb6>
 800672a:	2301      	movs	r3, #1
 800672c:	465a      	mov	r2, fp
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	47b8      	blx	r7
 8006734:	3001      	adds	r0, #1
 8006736:	f43f ae56 	beq.w	80063e6 <_printf_float+0xb6>
 800673a:	f108 0801 	add.w	r8, r8, #1
 800673e:	45d0      	cmp	r8, sl
 8006740:	dbf3      	blt.n	800672a <_printf_float+0x3fa>
 8006742:	464b      	mov	r3, r9
 8006744:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006748:	e6df      	b.n	800650a <_printf_float+0x1da>
 800674a:	f04f 0800 	mov.w	r8, #0
 800674e:	f104 0b1a 	add.w	fp, r4, #26
 8006752:	e7f4      	b.n	800673e <_printf_float+0x40e>
 8006754:	2301      	movs	r3, #1
 8006756:	4642      	mov	r2, r8
 8006758:	e7e1      	b.n	800671e <_printf_float+0x3ee>
 800675a:	2301      	movs	r3, #1
 800675c:	464a      	mov	r2, r9
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f ae3e 	beq.w	80063e6 <_printf_float+0xb6>
 800676a:	f108 0801 	add.w	r8, r8, #1
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006772:	1a5b      	subs	r3, r3, r1
 8006774:	4543      	cmp	r3, r8
 8006776:	dcf0      	bgt.n	800675a <_printf_float+0x42a>
 8006778:	e6fc      	b.n	8006574 <_printf_float+0x244>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	f104 0919 	add.w	r9, r4, #25
 8006782:	e7f4      	b.n	800676e <_printf_float+0x43e>

08006784 <_printf_common>:
 8006784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	4616      	mov	r6, r2
 800678a:	4698      	mov	r8, r3
 800678c:	688a      	ldr	r2, [r1, #8]
 800678e:	690b      	ldr	r3, [r1, #16]
 8006790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006794:	4293      	cmp	r3, r2
 8006796:	bfb8      	it	lt
 8006798:	4613      	movlt	r3, r2
 800679a:	6033      	str	r3, [r6, #0]
 800679c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067a0:	4607      	mov	r7, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	b10a      	cbz	r2, 80067aa <_printf_common+0x26>
 80067a6:	3301      	adds	r3, #1
 80067a8:	6033      	str	r3, [r6, #0]
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	0699      	lsls	r1, r3, #26
 80067ae:	bf42      	ittt	mi
 80067b0:	6833      	ldrmi	r3, [r6, #0]
 80067b2:	3302      	addmi	r3, #2
 80067b4:	6033      	strmi	r3, [r6, #0]
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	f015 0506 	ands.w	r5, r5, #6
 80067bc:	d106      	bne.n	80067cc <_printf_common+0x48>
 80067be:	f104 0a19 	add.w	sl, r4, #25
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	6832      	ldr	r2, [r6, #0]
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	dc26      	bgt.n	800681a <_printf_common+0x96>
 80067cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	3b00      	subs	r3, #0
 80067d4:	bf18      	it	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	0692      	lsls	r2, r2, #26
 80067da:	d42b      	bmi.n	8006834 <_printf_common+0xb0>
 80067dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067e0:	4641      	mov	r1, r8
 80067e2:	4638      	mov	r0, r7
 80067e4:	47c8      	blx	r9
 80067e6:	3001      	adds	r0, #1
 80067e8:	d01e      	beq.n	8006828 <_printf_common+0xa4>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	6922      	ldr	r2, [r4, #16]
 80067ee:	f003 0306 	and.w	r3, r3, #6
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	bf02      	ittt	eq
 80067f6:	68e5      	ldreq	r5, [r4, #12]
 80067f8:	6833      	ldreq	r3, [r6, #0]
 80067fa:	1aed      	subeq	r5, r5, r3
 80067fc:	68a3      	ldr	r3, [r4, #8]
 80067fe:	bf0c      	ite	eq
 8006800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006804:	2500      	movne	r5, #0
 8006806:	4293      	cmp	r3, r2
 8006808:	bfc4      	itt	gt
 800680a:	1a9b      	subgt	r3, r3, r2
 800680c:	18ed      	addgt	r5, r5, r3
 800680e:	2600      	movs	r6, #0
 8006810:	341a      	adds	r4, #26
 8006812:	42b5      	cmp	r5, r6
 8006814:	d11a      	bne.n	800684c <_printf_common+0xc8>
 8006816:	2000      	movs	r0, #0
 8006818:	e008      	b.n	800682c <_printf_common+0xa8>
 800681a:	2301      	movs	r3, #1
 800681c:	4652      	mov	r2, sl
 800681e:	4641      	mov	r1, r8
 8006820:	4638      	mov	r0, r7
 8006822:	47c8      	blx	r9
 8006824:	3001      	adds	r0, #1
 8006826:	d103      	bne.n	8006830 <_printf_common+0xac>
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006830:	3501      	adds	r5, #1
 8006832:	e7c6      	b.n	80067c2 <_printf_common+0x3e>
 8006834:	18e1      	adds	r1, r4, r3
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	2030      	movs	r0, #48	@ 0x30
 800683a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800683e:	4422      	add	r2, r4
 8006840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006848:	3302      	adds	r3, #2
 800684a:	e7c7      	b.n	80067dc <_printf_common+0x58>
 800684c:	2301      	movs	r3, #1
 800684e:	4622      	mov	r2, r4
 8006850:	4641      	mov	r1, r8
 8006852:	4638      	mov	r0, r7
 8006854:	47c8      	blx	r9
 8006856:	3001      	adds	r0, #1
 8006858:	d0e6      	beq.n	8006828 <_printf_common+0xa4>
 800685a:	3601      	adds	r6, #1
 800685c:	e7d9      	b.n	8006812 <_printf_common+0x8e>
	...

08006860 <_printf_i>:
 8006860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	7e0f      	ldrb	r7, [r1, #24]
 8006866:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006868:	2f78      	cmp	r7, #120	@ 0x78
 800686a:	4691      	mov	r9, r2
 800686c:	4680      	mov	r8, r0
 800686e:	460c      	mov	r4, r1
 8006870:	469a      	mov	sl, r3
 8006872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006876:	d807      	bhi.n	8006888 <_printf_i+0x28>
 8006878:	2f62      	cmp	r7, #98	@ 0x62
 800687a:	d80a      	bhi.n	8006892 <_printf_i+0x32>
 800687c:	2f00      	cmp	r7, #0
 800687e:	f000 80d2 	beq.w	8006a26 <_printf_i+0x1c6>
 8006882:	2f58      	cmp	r7, #88	@ 0x58
 8006884:	f000 80b9 	beq.w	80069fa <_printf_i+0x19a>
 8006888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800688c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006890:	e03a      	b.n	8006908 <_printf_i+0xa8>
 8006892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006896:	2b15      	cmp	r3, #21
 8006898:	d8f6      	bhi.n	8006888 <_printf_i+0x28>
 800689a:	a101      	add	r1, pc, #4	@ (adr r1, 80068a0 <_printf_i+0x40>)
 800689c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068a0:	080068f9 	.word	0x080068f9
 80068a4:	0800690d 	.word	0x0800690d
 80068a8:	08006889 	.word	0x08006889
 80068ac:	08006889 	.word	0x08006889
 80068b0:	08006889 	.word	0x08006889
 80068b4:	08006889 	.word	0x08006889
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	08006889 	.word	0x08006889
 80068c0:	08006889 	.word	0x08006889
 80068c4:	08006889 	.word	0x08006889
 80068c8:	08006889 	.word	0x08006889
 80068cc:	08006a0d 	.word	0x08006a0d
 80068d0:	08006937 	.word	0x08006937
 80068d4:	080069c7 	.word	0x080069c7
 80068d8:	08006889 	.word	0x08006889
 80068dc:	08006889 	.word	0x08006889
 80068e0:	08006a2f 	.word	0x08006a2f
 80068e4:	08006889 	.word	0x08006889
 80068e8:	08006937 	.word	0x08006937
 80068ec:	08006889 	.word	0x08006889
 80068f0:	08006889 	.word	0x08006889
 80068f4:	080069cf 	.word	0x080069cf
 80068f8:	6833      	ldr	r3, [r6, #0]
 80068fa:	1d1a      	adds	r2, r3, #4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6032      	str	r2, [r6, #0]
 8006900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006908:	2301      	movs	r3, #1
 800690a:	e09d      	b.n	8006a48 <_printf_i+0x1e8>
 800690c:	6833      	ldr	r3, [r6, #0]
 800690e:	6820      	ldr	r0, [r4, #0]
 8006910:	1d19      	adds	r1, r3, #4
 8006912:	6031      	str	r1, [r6, #0]
 8006914:	0606      	lsls	r6, r0, #24
 8006916:	d501      	bpl.n	800691c <_printf_i+0xbc>
 8006918:	681d      	ldr	r5, [r3, #0]
 800691a:	e003      	b.n	8006924 <_printf_i+0xc4>
 800691c:	0645      	lsls	r5, r0, #25
 800691e:	d5fb      	bpl.n	8006918 <_printf_i+0xb8>
 8006920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006924:	2d00      	cmp	r5, #0
 8006926:	da03      	bge.n	8006930 <_printf_i+0xd0>
 8006928:	232d      	movs	r3, #45	@ 0x2d
 800692a:	426d      	negs	r5, r5
 800692c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006930:	4859      	ldr	r0, [pc, #356]	@ (8006a98 <_printf_i+0x238>)
 8006932:	230a      	movs	r3, #10
 8006934:	e011      	b.n	800695a <_printf_i+0xfa>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	6833      	ldr	r3, [r6, #0]
 800693a:	0608      	lsls	r0, r1, #24
 800693c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006940:	d402      	bmi.n	8006948 <_printf_i+0xe8>
 8006942:	0649      	lsls	r1, r1, #25
 8006944:	bf48      	it	mi
 8006946:	b2ad      	uxthmi	r5, r5
 8006948:	2f6f      	cmp	r7, #111	@ 0x6f
 800694a:	4853      	ldr	r0, [pc, #332]	@ (8006a98 <_printf_i+0x238>)
 800694c:	6033      	str	r3, [r6, #0]
 800694e:	bf14      	ite	ne
 8006950:	230a      	movne	r3, #10
 8006952:	2308      	moveq	r3, #8
 8006954:	2100      	movs	r1, #0
 8006956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800695a:	6866      	ldr	r6, [r4, #4]
 800695c:	60a6      	str	r6, [r4, #8]
 800695e:	2e00      	cmp	r6, #0
 8006960:	bfa2      	ittt	ge
 8006962:	6821      	ldrge	r1, [r4, #0]
 8006964:	f021 0104 	bicge.w	r1, r1, #4
 8006968:	6021      	strge	r1, [r4, #0]
 800696a:	b90d      	cbnz	r5, 8006970 <_printf_i+0x110>
 800696c:	2e00      	cmp	r6, #0
 800696e:	d04b      	beq.n	8006a08 <_printf_i+0x1a8>
 8006970:	4616      	mov	r6, r2
 8006972:	fbb5 f1f3 	udiv	r1, r5, r3
 8006976:	fb03 5711 	mls	r7, r3, r1, r5
 800697a:	5dc7      	ldrb	r7, [r0, r7]
 800697c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006980:	462f      	mov	r7, r5
 8006982:	42bb      	cmp	r3, r7
 8006984:	460d      	mov	r5, r1
 8006986:	d9f4      	bls.n	8006972 <_printf_i+0x112>
 8006988:	2b08      	cmp	r3, #8
 800698a:	d10b      	bne.n	80069a4 <_printf_i+0x144>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	07df      	lsls	r7, r3, #31
 8006990:	d508      	bpl.n	80069a4 <_printf_i+0x144>
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	4299      	cmp	r1, r3
 8006998:	bfde      	ittt	le
 800699a:	2330      	movle	r3, #48	@ 0x30
 800699c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069a4:	1b92      	subs	r2, r2, r6
 80069a6:	6122      	str	r2, [r4, #16]
 80069a8:	f8cd a000 	str.w	sl, [sp]
 80069ac:	464b      	mov	r3, r9
 80069ae:	aa03      	add	r2, sp, #12
 80069b0:	4621      	mov	r1, r4
 80069b2:	4640      	mov	r0, r8
 80069b4:	f7ff fee6 	bl	8006784 <_printf_common>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d14a      	bne.n	8006a52 <_printf_i+0x1f2>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	b004      	add	sp, #16
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	4833      	ldr	r0, [pc, #204]	@ (8006a9c <_printf_i+0x23c>)
 80069d0:	2778      	movs	r7, #120	@ 0x78
 80069d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	6831      	ldr	r1, [r6, #0]
 80069da:	061f      	lsls	r7, r3, #24
 80069dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80069e0:	d402      	bmi.n	80069e8 <_printf_i+0x188>
 80069e2:	065f      	lsls	r7, r3, #25
 80069e4:	bf48      	it	mi
 80069e6:	b2ad      	uxthmi	r5, r5
 80069e8:	6031      	str	r1, [r6, #0]
 80069ea:	07d9      	lsls	r1, r3, #31
 80069ec:	bf44      	itt	mi
 80069ee:	f043 0320 	orrmi.w	r3, r3, #32
 80069f2:	6023      	strmi	r3, [r4, #0]
 80069f4:	b11d      	cbz	r5, 80069fe <_printf_i+0x19e>
 80069f6:	2310      	movs	r3, #16
 80069f8:	e7ac      	b.n	8006954 <_printf_i+0xf4>
 80069fa:	4827      	ldr	r0, [pc, #156]	@ (8006a98 <_printf_i+0x238>)
 80069fc:	e7e9      	b.n	80069d2 <_printf_i+0x172>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	f023 0320 	bic.w	r3, r3, #32
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	e7f6      	b.n	80069f6 <_printf_i+0x196>
 8006a08:	4616      	mov	r6, r2
 8006a0a:	e7bd      	b.n	8006988 <_printf_i+0x128>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	6825      	ldr	r5, [r4, #0]
 8006a10:	6961      	ldr	r1, [r4, #20]
 8006a12:	1d18      	adds	r0, r3, #4
 8006a14:	6030      	str	r0, [r6, #0]
 8006a16:	062e      	lsls	r6, r5, #24
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	d501      	bpl.n	8006a20 <_printf_i+0x1c0>
 8006a1c:	6019      	str	r1, [r3, #0]
 8006a1e:	e002      	b.n	8006a26 <_printf_i+0x1c6>
 8006a20:	0668      	lsls	r0, r5, #25
 8006a22:	d5fb      	bpl.n	8006a1c <_printf_i+0x1bc>
 8006a24:	8019      	strh	r1, [r3, #0]
 8006a26:	2300      	movs	r3, #0
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	4616      	mov	r6, r2
 8006a2c:	e7bc      	b.n	80069a8 <_printf_i+0x148>
 8006a2e:	6833      	ldr	r3, [r6, #0]
 8006a30:	1d1a      	adds	r2, r3, #4
 8006a32:	6032      	str	r2, [r6, #0]
 8006a34:	681e      	ldr	r6, [r3, #0]
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7f9 fbc8 	bl	80001d0 <memchr>
 8006a40:	b108      	cbz	r0, 8006a46 <_printf_i+0x1e6>
 8006a42:	1b80      	subs	r0, r0, r6
 8006a44:	6060      	str	r0, [r4, #4]
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	6123      	str	r3, [r4, #16]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a50:	e7aa      	b.n	80069a8 <_printf_i+0x148>
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	4632      	mov	r2, r6
 8006a56:	4649      	mov	r1, r9
 8006a58:	4640      	mov	r0, r8
 8006a5a:	47d0      	blx	sl
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d0ad      	beq.n	80069bc <_printf_i+0x15c>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	079b      	lsls	r3, r3, #30
 8006a64:	d413      	bmi.n	8006a8e <_printf_i+0x22e>
 8006a66:	68e0      	ldr	r0, [r4, #12]
 8006a68:	9b03      	ldr	r3, [sp, #12]
 8006a6a:	4298      	cmp	r0, r3
 8006a6c:	bfb8      	it	lt
 8006a6e:	4618      	movlt	r0, r3
 8006a70:	e7a6      	b.n	80069c0 <_printf_i+0x160>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4632      	mov	r2, r6
 8006a76:	4649      	mov	r1, r9
 8006a78:	4640      	mov	r0, r8
 8006a7a:	47d0      	blx	sl
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d09d      	beq.n	80069bc <_printf_i+0x15c>
 8006a80:	3501      	adds	r5, #1
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	9903      	ldr	r1, [sp, #12]
 8006a86:	1a5b      	subs	r3, r3, r1
 8006a88:	42ab      	cmp	r3, r5
 8006a8a:	dcf2      	bgt.n	8006a72 <_printf_i+0x212>
 8006a8c:	e7eb      	b.n	8006a66 <_printf_i+0x206>
 8006a8e:	2500      	movs	r5, #0
 8006a90:	f104 0619 	add.w	r6, r4, #25
 8006a94:	e7f5      	b.n	8006a82 <_printf_i+0x222>
 8006a96:	bf00      	nop
 8006a98:	08009047 	.word	0x08009047
 8006a9c:	08009058 	.word	0x08009058

08006aa0 <std>:
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8006aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aae:	6083      	str	r3, [r0, #8]
 8006ab0:	8181      	strh	r1, [r0, #12]
 8006ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ab4:	81c2      	strh	r2, [r0, #14]
 8006ab6:	6183      	str	r3, [r0, #24]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	2208      	movs	r2, #8
 8006abc:	305c      	adds	r0, #92	@ 0x5c
 8006abe:	f000 f914 	bl	8006cea <memset>
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <std+0x58>)
 8006ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <std+0x5c>)
 8006ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006aca:	4b0d      	ldr	r3, [pc, #52]	@ (8006b00 <std+0x60>)
 8006acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <std+0x64>)
 8006ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <std+0x68>)
 8006ad4:	6224      	str	r4, [r4, #32]
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	d006      	beq.n	8006ae8 <std+0x48>
 8006ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ade:	4294      	cmp	r4, r2
 8006ae0:	d002      	beq.n	8006ae8 <std+0x48>
 8006ae2:	33d0      	adds	r3, #208	@ 0xd0
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d105      	bne.n	8006af4 <std+0x54>
 8006ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af0:	f000 b984 	b.w	8006dfc <__retarget_lock_init_recursive>
 8006af4:	bd10      	pop	{r4, pc}
 8006af6:	bf00      	nop
 8006af8:	08006c65 	.word	0x08006c65
 8006afc:	08006c87 	.word	0x08006c87
 8006b00:	08006cbf 	.word	0x08006cbf
 8006b04:	08006ce3 	.word	0x08006ce3
 8006b08:	20000300 	.word	0x20000300

08006b0c <stdio_exit_handler>:
 8006b0c:	4a02      	ldr	r2, [pc, #8]	@ (8006b18 <stdio_exit_handler+0xc>)
 8006b0e:	4903      	ldr	r1, [pc, #12]	@ (8006b1c <stdio_exit_handler+0x10>)
 8006b10:	4803      	ldr	r0, [pc, #12]	@ (8006b20 <stdio_exit_handler+0x14>)
 8006b12:	f000 b869 	b.w	8006be8 <_fwalk_sglue>
 8006b16:	bf00      	nop
 8006b18:	20000028 	.word	0x20000028
 8006b1c:	0800875d 	.word	0x0800875d
 8006b20:	20000038 	.word	0x20000038

08006b24 <cleanup_stdio>:
 8006b24:	6841      	ldr	r1, [r0, #4]
 8006b26:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <cleanup_stdio+0x34>)
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	d001      	beq.n	8006b34 <cleanup_stdio+0x10>
 8006b30:	f001 fe14 	bl	800875c <_fflush_r>
 8006b34:	68a1      	ldr	r1, [r4, #8]
 8006b36:	4b09      	ldr	r3, [pc, #36]	@ (8006b5c <cleanup_stdio+0x38>)
 8006b38:	4299      	cmp	r1, r3
 8006b3a:	d002      	beq.n	8006b42 <cleanup_stdio+0x1e>
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f001 fe0d 	bl	800875c <_fflush_r>
 8006b42:	68e1      	ldr	r1, [r4, #12]
 8006b44:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <cleanup_stdio+0x3c>)
 8006b46:	4299      	cmp	r1, r3
 8006b48:	d004      	beq.n	8006b54 <cleanup_stdio+0x30>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b50:	f001 be04 	b.w	800875c <_fflush_r>
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	bf00      	nop
 8006b58:	20000300 	.word	0x20000300
 8006b5c:	20000368 	.word	0x20000368
 8006b60:	200003d0 	.word	0x200003d0

08006b64 <global_stdio_init.part.0>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <global_stdio_init.part.0+0x30>)
 8006b68:	4c0b      	ldr	r4, [pc, #44]	@ (8006b98 <global_stdio_init.part.0+0x34>)
 8006b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b9c <global_stdio_init.part.0+0x38>)
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	2200      	movs	r2, #0
 8006b72:	2104      	movs	r1, #4
 8006b74:	f7ff ff94 	bl	8006aa0 <std>
 8006b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	2109      	movs	r1, #9
 8006b80:	f7ff ff8e 	bl	8006aa0 <std>
 8006b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b88:	2202      	movs	r2, #2
 8006b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8e:	2112      	movs	r1, #18
 8006b90:	f7ff bf86 	b.w	8006aa0 <std>
 8006b94:	20000438 	.word	0x20000438
 8006b98:	20000300 	.word	0x20000300
 8006b9c:	08006b0d 	.word	0x08006b0d

08006ba0 <__sfp_lock_acquire>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__sfp_lock_acquire+0x8>)
 8006ba2:	f000 b92c 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000441 	.word	0x20000441

08006bac <__sfp_lock_release>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__sfp_lock_release+0x8>)
 8006bae:	f000 b927 	b.w	8006e00 <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000441 	.word	0x20000441

08006bb8 <__sinit>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4604      	mov	r4, r0
 8006bbc:	f7ff fff0 	bl	8006ba0 <__sfp_lock_acquire>
 8006bc0:	6a23      	ldr	r3, [r4, #32]
 8006bc2:	b11b      	cbz	r3, 8006bcc <__sinit+0x14>
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	f7ff bff0 	b.w	8006bac <__sfp_lock_release>
 8006bcc:	4b04      	ldr	r3, [pc, #16]	@ (8006be0 <__sinit+0x28>)
 8006bce:	6223      	str	r3, [r4, #32]
 8006bd0:	4b04      	ldr	r3, [pc, #16]	@ (8006be4 <__sinit+0x2c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f5      	bne.n	8006bc4 <__sinit+0xc>
 8006bd8:	f7ff ffc4 	bl	8006b64 <global_stdio_init.part.0>
 8006bdc:	e7f2      	b.n	8006bc4 <__sinit+0xc>
 8006bde:	bf00      	nop
 8006be0:	08006b25 	.word	0x08006b25
 8006be4:	20000438 	.word	0x20000438

08006be8 <_fwalk_sglue>:
 8006be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bec:	4607      	mov	r7, r0
 8006bee:	4688      	mov	r8, r1
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8006bfc:	d505      	bpl.n	8006c0a <_fwalk_sglue+0x22>
 8006bfe:	6824      	ldr	r4, [r4, #0]
 8006c00:	2c00      	cmp	r4, #0
 8006c02:	d1f7      	bne.n	8006bf4 <_fwalk_sglue+0xc>
 8006c04:	4630      	mov	r0, r6
 8006c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d907      	bls.n	8006c20 <_fwalk_sglue+0x38>
 8006c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c14:	3301      	adds	r3, #1
 8006c16:	d003      	beq.n	8006c20 <_fwalk_sglue+0x38>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	47c0      	blx	r8
 8006c1e:	4306      	orrs	r6, r0
 8006c20:	3568      	adds	r5, #104	@ 0x68
 8006c22:	e7e9      	b.n	8006bf8 <_fwalk_sglue+0x10>

08006c24 <siprintf>:
 8006c24:	b40e      	push	{r1, r2, r3}
 8006c26:	b500      	push	{lr}
 8006c28:	b09c      	sub	sp, #112	@ 0x70
 8006c2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c2c:	9002      	str	r0, [sp, #8]
 8006c2e:	9006      	str	r0, [sp, #24]
 8006c30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c34:	4809      	ldr	r0, [pc, #36]	@ (8006c5c <siprintf+0x38>)
 8006c36:	9107      	str	r1, [sp, #28]
 8006c38:	9104      	str	r1, [sp, #16]
 8006c3a:	4909      	ldr	r1, [pc, #36]	@ (8006c60 <siprintf+0x3c>)
 8006c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c40:	9105      	str	r1, [sp, #20]
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	a902      	add	r1, sp, #8
 8006c48:	f001 fc08 	bl	800845c <_svfiprintf_r>
 8006c4c:	9b02      	ldr	r3, [sp, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	b01c      	add	sp, #112	@ 0x70
 8006c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c58:	b003      	add	sp, #12
 8006c5a:	4770      	bx	lr
 8006c5c:	20000034 	.word	0x20000034
 8006c60:	ffff0208 	.word	0xffff0208

08006c64 <__sread>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6c:	f000 f878 	bl	8006d60 <_read_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	bfab      	itete	ge
 8006c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c76:	89a3      	ldrhlt	r3, [r4, #12]
 8006c78:	181b      	addge	r3, r3, r0
 8006c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c7e:	bfac      	ite	ge
 8006c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c82:	81a3      	strhlt	r3, [r4, #12]
 8006c84:	bd10      	pop	{r4, pc}

08006c86 <__swrite>:
 8006c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	898b      	ldrh	r3, [r1, #12]
 8006c8e:	05db      	lsls	r3, r3, #23
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4616      	mov	r6, r2
 8006c96:	d505      	bpl.n	8006ca4 <__swrite+0x1e>
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f000 f84c 	bl	8006d3c <_lseek_r>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	f000 b863 	b.w	8006d84 <_write_r>

08006cbe <__sseek>:
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc6:	f000 f839 	bl	8006d3c <_lseek_r>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	bf15      	itete	ne
 8006cd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cda:	81a3      	strheq	r3, [r4, #12]
 8006cdc:	bf18      	it	ne
 8006cde:	81a3      	strhne	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__sclose>:
 8006ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce6:	f000 b819 	b.w	8006d1c <_close_r>

08006cea <memset>:
 8006cea:	4402      	add	r2, r0
 8006cec:	4603      	mov	r3, r0
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d100      	bne.n	8006cf4 <memset+0xa>
 8006cf2:	4770      	bx	lr
 8006cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf8:	e7f9      	b.n	8006cee <memset+0x4>

08006cfa <strchr>:
 8006cfa:	b2c9      	uxtb	r1, r1
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d04:	b112      	cbz	r2, 8006d0c <strchr+0x12>
 8006d06:	428a      	cmp	r2, r1
 8006d08:	d1f9      	bne.n	8006cfe <strchr+0x4>
 8006d0a:	4770      	bx	lr
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	bf18      	it	ne
 8006d10:	2000      	movne	r0, #0
 8006d12:	4770      	bx	lr

08006d14 <_localeconv_r>:
 8006d14:	4800      	ldr	r0, [pc, #0]	@ (8006d18 <_localeconv_r+0x4>)
 8006d16:	4770      	bx	lr
 8006d18:	20000174 	.word	0x20000174

08006d1c <_close_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d06      	ldr	r5, [pc, #24]	@ (8006d38 <_close_r+0x1c>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	602b      	str	r3, [r5, #0]
 8006d28:	f7fa fe36 	bl	8001998 <_close>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d102      	bne.n	8006d36 <_close_r+0x1a>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	b103      	cbz	r3, 8006d36 <_close_r+0x1a>
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	2000043c 	.word	0x2000043c

08006d3c <_lseek_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4d07      	ldr	r5, [pc, #28]	@ (8006d5c <_lseek_r+0x20>)
 8006d40:	4604      	mov	r4, r0
 8006d42:	4608      	mov	r0, r1
 8006d44:	4611      	mov	r1, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f7fa fe4b 	bl	80019e6 <_lseek>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_lseek_r+0x1e>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_lseek_r+0x1e>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	2000043c 	.word	0x2000043c

08006d60 <_read_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d07      	ldr	r5, [pc, #28]	@ (8006d80 <_read_r+0x20>)
 8006d64:	4604      	mov	r4, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	4611      	mov	r1, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f7fa fdd9 	bl	8001926 <_read>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_read_r+0x1e>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_read_r+0x1e>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	2000043c 	.word	0x2000043c

08006d84 <_write_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d07      	ldr	r5, [pc, #28]	@ (8006da4 <_write_r+0x20>)
 8006d88:	4604      	mov	r4, r0
 8006d8a:	4608      	mov	r0, r1
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	602a      	str	r2, [r5, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f7fa fde4 	bl	8001960 <_write>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_write_r+0x1e>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_write_r+0x1e>
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	2000043c 	.word	0x2000043c

08006da8 <__errno>:
 8006da8:	4b01      	ldr	r3, [pc, #4]	@ (8006db0 <__errno+0x8>)
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000034 	.word	0x20000034

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	@ (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	@ (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f002 f866 	bl	8008e98 <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	080092b0 	.word	0x080092b0
 8006df0:	080092b0 	.word	0x080092b0
 8006df4:	080092b0 	.word	0x080092b0
 8006df8:	080092b4 	.word	0x080092b4

08006dfc <__retarget_lock_init_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <__retarget_lock_acquire_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <__retarget_lock_release_recursive>:
 8006e00:	4770      	bx	lr

08006e02 <quorem>:
 8006e02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e06:	6903      	ldr	r3, [r0, #16]
 8006e08:	690c      	ldr	r4, [r1, #16]
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	db7e      	blt.n	8006f0e <quorem+0x10c>
 8006e10:	3c01      	subs	r4, #1
 8006e12:	f101 0814 	add.w	r8, r1, #20
 8006e16:	00a3      	lsls	r3, r4, #2
 8006e18:	f100 0514 	add.w	r5, r0, #20
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e38:	d32e      	bcc.n	8006e98 <quorem+0x96>
 8006e3a:	f04f 0a00 	mov.w	sl, #0
 8006e3e:	46c4      	mov	ip, r8
 8006e40:	46ae      	mov	lr, r5
 8006e42:	46d3      	mov	fp, sl
 8006e44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e48:	b298      	uxth	r0, r3
 8006e4a:	fb06 a000 	mla	r0, r6, r0, sl
 8006e4e:	0c02      	lsrs	r2, r0, #16
 8006e50:	0c1b      	lsrs	r3, r3, #16
 8006e52:	fb06 2303 	mla	r3, r6, r3, r2
 8006e56:	f8de 2000 	ldr.w	r2, [lr]
 8006e5a:	b280      	uxth	r0, r0
 8006e5c:	b292      	uxth	r2, r2
 8006e5e:	1a12      	subs	r2, r2, r0
 8006e60:	445a      	add	r2, fp
 8006e62:	f8de 0000 	ldr.w	r0, [lr]
 8006e66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e74:	b292      	uxth	r2, r2
 8006e76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e7a:	45e1      	cmp	r9, ip
 8006e7c:	f84e 2b04 	str.w	r2, [lr], #4
 8006e80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e84:	d2de      	bcs.n	8006e44 <quorem+0x42>
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	58eb      	ldr	r3, [r5, r3]
 8006e8a:	b92b      	cbnz	r3, 8006e98 <quorem+0x96>
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	3b04      	subs	r3, #4
 8006e90:	429d      	cmp	r5, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	d32f      	bcc.n	8006ef6 <quorem+0xf4>
 8006e96:	613c      	str	r4, [r7, #16]
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f001 f97b 	bl	8008194 <__mcmp>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	db25      	blt.n	8006eee <quorem+0xec>
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eaa:	f8d1 c000 	ldr.w	ip, [r1]
 8006eae:	fa1f fe82 	uxth.w	lr, r2
 8006eb2:	fa1f f38c 	uxth.w	r3, ip
 8006eb6:	eba3 030e 	sub.w	r3, r3, lr
 8006eba:	4403      	add	r3, r0
 8006ebc:	0c12      	lsrs	r2, r2, #16
 8006ebe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ec2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ecc:	45c1      	cmp	r9, r8
 8006ece:	f841 3b04 	str.w	r3, [r1], #4
 8006ed2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ed6:	d2e6      	bcs.n	8006ea6 <quorem+0xa4>
 8006ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006edc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee0:	b922      	cbnz	r2, 8006eec <quorem+0xea>
 8006ee2:	3b04      	subs	r3, #4
 8006ee4:	429d      	cmp	r5, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	d30b      	bcc.n	8006f02 <quorem+0x100>
 8006eea:	613c      	str	r4, [r7, #16]
 8006eec:	3601      	adds	r6, #1
 8006eee:	4630      	mov	r0, r6
 8006ef0:	b003      	add	sp, #12
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	d1cb      	bne.n	8006e96 <quorem+0x94>
 8006efe:	3c01      	subs	r4, #1
 8006f00:	e7c6      	b.n	8006e90 <quorem+0x8e>
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d1ef      	bne.n	8006eea <quorem+0xe8>
 8006f0a:	3c01      	subs	r4, #1
 8006f0c:	e7ea      	b.n	8006ee4 <quorem+0xe2>
 8006f0e:	2000      	movs	r0, #0
 8006f10:	e7ee      	b.n	8006ef0 <quorem+0xee>
 8006f12:	0000      	movs	r0, r0
 8006f14:	0000      	movs	r0, r0
	...

08006f18 <_dtoa_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	69c7      	ldr	r7, [r0, #28]
 8006f1e:	b099      	sub	sp, #100	@ 0x64
 8006f20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f24:	ec55 4b10 	vmov	r4, r5, d0
 8006f28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f2c:	4683      	mov	fp, r0
 8006f2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f32:	b97f      	cbnz	r7, 8006f54 <_dtoa_r+0x3c>
 8006f34:	2010      	movs	r0, #16
 8006f36:	f000 fdfd 	bl	8007b34 <malloc>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f40:	b920      	cbnz	r0, 8006f4c <_dtoa_r+0x34>
 8006f42:	4ba7      	ldr	r3, [pc, #668]	@ (80071e0 <_dtoa_r+0x2c8>)
 8006f44:	21ef      	movs	r1, #239	@ 0xef
 8006f46:	48a7      	ldr	r0, [pc, #668]	@ (80071e4 <_dtoa_r+0x2cc>)
 8006f48:	f001 fc68 	bl	800881c <__assert_func>
 8006f4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f50:	6007      	str	r7, [r0, #0]
 8006f52:	60c7      	str	r7, [r0, #12]
 8006f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	b159      	cbz	r1, 8006f74 <_dtoa_r+0x5c>
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	604a      	str	r2, [r1, #4]
 8006f60:	2301      	movs	r3, #1
 8006f62:	4093      	lsls	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
 8006f66:	4658      	mov	r0, fp
 8006f68:	f000 feda 	bl	8007d20 <_Bfree>
 8006f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	1e2b      	subs	r3, r5, #0
 8006f76:	bfb9      	ittee	lt
 8006f78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f7c:	9303      	strlt	r3, [sp, #12]
 8006f7e:	2300      	movge	r3, #0
 8006f80:	6033      	strge	r3, [r6, #0]
 8006f82:	9f03      	ldr	r7, [sp, #12]
 8006f84:	4b98      	ldr	r3, [pc, #608]	@ (80071e8 <_dtoa_r+0x2d0>)
 8006f86:	bfbc      	itt	lt
 8006f88:	2201      	movlt	r2, #1
 8006f8a:	6032      	strlt	r2, [r6, #0]
 8006f8c:	43bb      	bics	r3, r7
 8006f8e:	d112      	bne.n	8006fb6 <_dtoa_r+0x9e>
 8006f90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f9c:	4323      	orrs	r3, r4
 8006f9e:	f000 854d 	beq.w	8007a3c <_dtoa_r+0xb24>
 8006fa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80071fc <_dtoa_r+0x2e4>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 854f 	beq.w	8007a4c <_dtoa_r+0xb34>
 8006fae:	f10a 0303 	add.w	r3, sl, #3
 8006fb2:	f000 bd49 	b.w	8007a48 <_dtoa_r+0xb30>
 8006fb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	ec51 0b17 	vmov	r0, r1, d7
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006fc6:	f7f9 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fca:	4680      	mov	r8, r0
 8006fcc:	b158      	cbz	r0, 8006fe6 <_dtoa_r+0xce>
 8006fce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fd6:	b113      	cbz	r3, 8006fde <_dtoa_r+0xc6>
 8006fd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006fda:	4b84      	ldr	r3, [pc, #528]	@ (80071ec <_dtoa_r+0x2d4>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007200 <_dtoa_r+0x2e8>
 8006fe2:	f000 bd33 	b.w	8007a4c <_dtoa_r+0xb34>
 8006fe6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006fea:	aa16      	add	r2, sp, #88	@ 0x58
 8006fec:	a917      	add	r1, sp, #92	@ 0x5c
 8006fee:	4658      	mov	r0, fp
 8006ff0:	f001 f980 	bl	80082f4 <__d2b>
 8006ff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d077      	beq.n	80070ee <_dtoa_r+0x1d6>
 8006ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007000:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800700c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007018:	4619      	mov	r1, r3
 800701a:	2200      	movs	r2, #0
 800701c:	4b74      	ldr	r3, [pc, #464]	@ (80071f0 <_dtoa_r+0x2d8>)
 800701e:	f7f9 f933 	bl	8000288 <__aeabi_dsub>
 8007022:	a369      	add	r3, pc, #420	@ (adr r3, 80071c8 <_dtoa_r+0x2b0>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	a368      	add	r3, pc, #416	@ (adr r3, 80071d0 <_dtoa_r+0x2b8>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f92b 	bl	800028c <__adddf3>
 8007036:	4604      	mov	r4, r0
 8007038:	4630      	mov	r0, r6
 800703a:	460d      	mov	r5, r1
 800703c:	f7f9 fa72 	bl	8000524 <__aeabi_i2d>
 8007040:	a365      	add	r3, pc, #404	@ (adr r3, 80071d8 <_dtoa_r+0x2c0>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fad7 	bl	80005f8 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 f91b 	bl	800028c <__adddf3>
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	f7f9 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800705e:	2200      	movs	r2, #0
 8007060:	4607      	mov	r7, r0
 8007062:	2300      	movs	r3, #0
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 fd38 	bl	8000adc <__aeabi_dcmplt>
 800706c:	b140      	cbz	r0, 8007080 <_dtoa_r+0x168>
 800706e:	4638      	mov	r0, r7
 8007070:	f7f9 fa58 	bl	8000524 <__aeabi_i2d>
 8007074:	4622      	mov	r2, r4
 8007076:	462b      	mov	r3, r5
 8007078:	f7f9 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800707c:	b900      	cbnz	r0, 8007080 <_dtoa_r+0x168>
 800707e:	3f01      	subs	r7, #1
 8007080:	2f16      	cmp	r7, #22
 8007082:	d851      	bhi.n	8007128 <_dtoa_r+0x210>
 8007084:	4b5b      	ldr	r3, [pc, #364]	@ (80071f4 <_dtoa_r+0x2dc>)
 8007086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007092:	f7f9 fd23 	bl	8000adc <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d048      	beq.n	800712c <_dtoa_r+0x214>
 800709a:	3f01      	subs	r7, #1
 800709c:	2300      	movs	r3, #0
 800709e:	9312      	str	r3, [sp, #72]	@ 0x48
 80070a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070a2:	1b9b      	subs	r3, r3, r6
 80070a4:	1e5a      	subs	r2, r3, #1
 80070a6:	bf44      	itt	mi
 80070a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80070ac:	2300      	movmi	r3, #0
 80070ae:	9208      	str	r2, [sp, #32]
 80070b0:	bf54      	ite	pl
 80070b2:	f04f 0800 	movpl.w	r8, #0
 80070b6:	9308      	strmi	r3, [sp, #32]
 80070b8:	2f00      	cmp	r7, #0
 80070ba:	db39      	blt.n	8007130 <_dtoa_r+0x218>
 80070bc:	9b08      	ldr	r3, [sp, #32]
 80070be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070c0:	443b      	add	r3, r7
 80070c2:	9308      	str	r3, [sp, #32]
 80070c4:	2300      	movs	r3, #0
 80070c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d864      	bhi.n	8007198 <_dtoa_r+0x280>
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	bfc4      	itt	gt
 80070d2:	3b04      	subgt	r3, #4
 80070d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80070d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d8:	f1a3 0302 	sub.w	r3, r3, #2
 80070dc:	bfcc      	ite	gt
 80070de:	2400      	movgt	r4, #0
 80070e0:	2401      	movle	r4, #1
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d863      	bhi.n	80071ae <_dtoa_r+0x296>
 80070e6:	e8df f003 	tbb	[pc, r3]
 80070ea:	372a      	.short	0x372a
 80070ec:	5535      	.short	0x5535
 80070ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80070f2:	441e      	add	r6, r3
 80070f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	bfc1      	itttt	gt
 80070fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007100:	409f      	lslgt	r7, r3
 8007102:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007106:	fa24 f303 	lsrgt.w	r3, r4, r3
 800710a:	bfd6      	itet	le
 800710c:	f1c3 0320 	rsble	r3, r3, #32
 8007110:	ea47 0003 	orrgt.w	r0, r7, r3
 8007114:	fa04 f003 	lslle.w	r0, r4, r3
 8007118:	f7f9 f9f4 	bl	8000504 <__aeabi_ui2d>
 800711c:	2201      	movs	r2, #1
 800711e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007122:	3e01      	subs	r6, #1
 8007124:	9214      	str	r2, [sp, #80]	@ 0x50
 8007126:	e777      	b.n	8007018 <_dtoa_r+0x100>
 8007128:	2301      	movs	r3, #1
 800712a:	e7b8      	b.n	800709e <_dtoa_r+0x186>
 800712c:	9012      	str	r0, [sp, #72]	@ 0x48
 800712e:	e7b7      	b.n	80070a0 <_dtoa_r+0x188>
 8007130:	427b      	negs	r3, r7
 8007132:	930a      	str	r3, [sp, #40]	@ 0x28
 8007134:	2300      	movs	r3, #0
 8007136:	eba8 0807 	sub.w	r8, r8, r7
 800713a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800713c:	e7c4      	b.n	80070c8 <_dtoa_r+0x1b0>
 800713e:	2300      	movs	r3, #0
 8007140:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	dc35      	bgt.n	80071b4 <_dtoa_r+0x29c>
 8007148:	2301      	movs	r3, #1
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	9307      	str	r3, [sp, #28]
 800714e:	461a      	mov	r2, r3
 8007150:	920e      	str	r2, [sp, #56]	@ 0x38
 8007152:	e00b      	b.n	800716c <_dtoa_r+0x254>
 8007154:	2301      	movs	r3, #1
 8007156:	e7f3      	b.n	8007140 <_dtoa_r+0x228>
 8007158:	2300      	movs	r3, #0
 800715a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800715c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	bfb8      	it	lt
 800716a:	2301      	movlt	r3, #1
 800716c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007170:	2100      	movs	r1, #0
 8007172:	2204      	movs	r2, #4
 8007174:	f102 0514 	add.w	r5, r2, #20
 8007178:	429d      	cmp	r5, r3
 800717a:	d91f      	bls.n	80071bc <_dtoa_r+0x2a4>
 800717c:	6041      	str	r1, [r0, #4]
 800717e:	4658      	mov	r0, fp
 8007180:	f000 fd8e 	bl	8007ca0 <_Balloc>
 8007184:	4682      	mov	sl, r0
 8007186:	2800      	cmp	r0, #0
 8007188:	d13c      	bne.n	8007204 <_dtoa_r+0x2ec>
 800718a:	4b1b      	ldr	r3, [pc, #108]	@ (80071f8 <_dtoa_r+0x2e0>)
 800718c:	4602      	mov	r2, r0
 800718e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007192:	e6d8      	b.n	8006f46 <_dtoa_r+0x2e>
 8007194:	2301      	movs	r3, #1
 8007196:	e7e0      	b.n	800715a <_dtoa_r+0x242>
 8007198:	2401      	movs	r4, #1
 800719a:	2300      	movs	r3, #0
 800719c:	9309      	str	r3, [sp, #36]	@ 0x24
 800719e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	2200      	movs	r2, #0
 80071aa:	2312      	movs	r3, #18
 80071ac:	e7d0      	b.n	8007150 <_dtoa_r+0x238>
 80071ae:	2301      	movs	r3, #1
 80071b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071b2:	e7f5      	b.n	80071a0 <_dtoa_r+0x288>
 80071b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	9307      	str	r3, [sp, #28]
 80071ba:	e7d7      	b.n	800716c <_dtoa_r+0x254>
 80071bc:	3101      	adds	r1, #1
 80071be:	0052      	lsls	r2, r2, #1
 80071c0:	e7d8      	b.n	8007174 <_dtoa_r+0x25c>
 80071c2:	bf00      	nop
 80071c4:	f3af 8000 	nop.w
 80071c8:	636f4361 	.word	0x636f4361
 80071cc:	3fd287a7 	.word	0x3fd287a7
 80071d0:	8b60c8b3 	.word	0x8b60c8b3
 80071d4:	3fc68a28 	.word	0x3fc68a28
 80071d8:	509f79fb 	.word	0x509f79fb
 80071dc:	3fd34413 	.word	0x3fd34413
 80071e0:	08009076 	.word	0x08009076
 80071e4:	0800908d 	.word	0x0800908d
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	08009046 	.word	0x08009046
 80071f0:	3ff80000 	.word	0x3ff80000
 80071f4:	08009188 	.word	0x08009188
 80071f8:	080090e5 	.word	0x080090e5
 80071fc:	08009072 	.word	0x08009072
 8007200:	08009045 	.word	0x08009045
 8007204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007208:	6018      	str	r0, [r3, #0]
 800720a:	9b07      	ldr	r3, [sp, #28]
 800720c:	2b0e      	cmp	r3, #14
 800720e:	f200 80a4 	bhi.w	800735a <_dtoa_r+0x442>
 8007212:	2c00      	cmp	r4, #0
 8007214:	f000 80a1 	beq.w	800735a <_dtoa_r+0x442>
 8007218:	2f00      	cmp	r7, #0
 800721a:	dd33      	ble.n	8007284 <_dtoa_r+0x36c>
 800721c:	4bad      	ldr	r3, [pc, #692]	@ (80074d4 <_dtoa_r+0x5bc>)
 800721e:	f007 020f 	and.w	r2, r7, #15
 8007222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007226:	ed93 7b00 	vldr	d7, [r3]
 800722a:	05f8      	lsls	r0, r7, #23
 800722c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007234:	d516      	bpl.n	8007264 <_dtoa_r+0x34c>
 8007236:	4ba8      	ldr	r3, [pc, #672]	@ (80074d8 <_dtoa_r+0x5c0>)
 8007238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800723c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007240:	f7f9 fb04 	bl	800084c <__aeabi_ddiv>
 8007244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007248:	f004 040f 	and.w	r4, r4, #15
 800724c:	2603      	movs	r6, #3
 800724e:	4da2      	ldr	r5, [pc, #648]	@ (80074d8 <_dtoa_r+0x5c0>)
 8007250:	b954      	cbnz	r4, 8007268 <_dtoa_r+0x350>
 8007252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800725a:	f7f9 faf7 	bl	800084c <__aeabi_ddiv>
 800725e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007262:	e028      	b.n	80072b6 <_dtoa_r+0x39e>
 8007264:	2602      	movs	r6, #2
 8007266:	e7f2      	b.n	800724e <_dtoa_r+0x336>
 8007268:	07e1      	lsls	r1, r4, #31
 800726a:	d508      	bpl.n	800727e <_dtoa_r+0x366>
 800726c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800727c:	3601      	adds	r6, #1
 800727e:	1064      	asrs	r4, r4, #1
 8007280:	3508      	adds	r5, #8
 8007282:	e7e5      	b.n	8007250 <_dtoa_r+0x338>
 8007284:	f000 80d2 	beq.w	800742c <_dtoa_r+0x514>
 8007288:	427c      	negs	r4, r7
 800728a:	4b92      	ldr	r3, [pc, #584]	@ (80074d4 <_dtoa_r+0x5bc>)
 800728c:	4d92      	ldr	r5, [pc, #584]	@ (80074d8 <_dtoa_r+0x5c0>)
 800728e:	f004 020f 	and.w	r2, r4, #15
 8007292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800729e:	f7f9 f9ab 	bl	80005f8 <__aeabi_dmul>
 80072a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a6:	1124      	asrs	r4, r4, #4
 80072a8:	2300      	movs	r3, #0
 80072aa:	2602      	movs	r6, #2
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	f040 80b2 	bne.w	8007416 <_dtoa_r+0x4fe>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1d3      	bne.n	800725e <_dtoa_r+0x346>
 80072b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80b7 	beq.w	8007430 <_dtoa_r+0x518>
 80072c2:	4b86      	ldr	r3, [pc, #536]	@ (80074dc <_dtoa_r+0x5c4>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f9 fc07 	bl	8000adc <__aeabi_dcmplt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f000 80ae 	beq.w	8007430 <_dtoa_r+0x518>
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80aa 	beq.w	8007430 <_dtoa_r+0x518>
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dd37      	ble.n	8007352 <_dtoa_r+0x43a>
 80072e2:	1e7b      	subs	r3, r7, #1
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	4620      	mov	r0, r4
 80072e8:	4b7d      	ldr	r3, [pc, #500]	@ (80074e0 <_dtoa_r+0x5c8>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 f983 	bl	80005f8 <__aeabi_dmul>
 80072f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072f6:	9c00      	ldr	r4, [sp, #0]
 80072f8:	3601      	adds	r6, #1
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7f9 f912 	bl	8000524 <__aeabi_i2d>
 8007300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007304:	f7f9 f978 	bl	80005f8 <__aeabi_dmul>
 8007308:	4b76      	ldr	r3, [pc, #472]	@ (80074e4 <_dtoa_r+0x5cc>)
 800730a:	2200      	movs	r2, #0
 800730c:	f7f8 ffbe 	bl	800028c <__adddf3>
 8007310:	4605      	mov	r5, r0
 8007312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007316:	2c00      	cmp	r4, #0
 8007318:	f040 808d 	bne.w	8007436 <_dtoa_r+0x51e>
 800731c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007320:	4b71      	ldr	r3, [pc, #452]	@ (80074e8 <_dtoa_r+0x5d0>)
 8007322:	2200      	movs	r2, #0
 8007324:	f7f8 ffb0 	bl	8000288 <__aeabi_dsub>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007330:	462a      	mov	r2, r5
 8007332:	4633      	mov	r3, r6
 8007334:	f7f9 fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8007338:	2800      	cmp	r0, #0
 800733a:	f040 828b 	bne.w	8007854 <_dtoa_r+0x93c>
 800733e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007342:	462a      	mov	r2, r5
 8007344:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007348:	f7f9 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800734c:	2800      	cmp	r0, #0
 800734e:	f040 8128 	bne.w	80075a2 <_dtoa_r+0x68a>
 8007352:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007356:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800735a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800735c:	2b00      	cmp	r3, #0
 800735e:	f2c0 815a 	blt.w	8007616 <_dtoa_r+0x6fe>
 8007362:	2f0e      	cmp	r7, #14
 8007364:	f300 8157 	bgt.w	8007616 <_dtoa_r+0x6fe>
 8007368:	4b5a      	ldr	r3, [pc, #360]	@ (80074d4 <_dtoa_r+0x5bc>)
 800736a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800736e:	ed93 7b00 	vldr	d7, [r3]
 8007372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	ed8d 7b00 	vstr	d7, [sp]
 800737a:	da03      	bge.n	8007384 <_dtoa_r+0x46c>
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f340 8101 	ble.w	8007586 <_dtoa_r+0x66e>
 8007384:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007388:	4656      	mov	r6, sl
 800738a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 fa5b 	bl	800084c <__aeabi_ddiv>
 8007396:	f7f9 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800739a:	4680      	mov	r8, r0
 800739c:	f7f9 f8c2 	bl	8000524 <__aeabi_i2d>
 80073a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073a4:	f7f9 f928 	bl	80005f8 <__aeabi_dmul>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073b4:	f7f8 ff68 	bl	8000288 <__aeabi_dsub>
 80073b8:	f806 4b01 	strb.w	r4, [r6], #1
 80073bc:	9d07      	ldr	r5, [sp, #28]
 80073be:	eba6 040a 	sub.w	r4, r6, sl
 80073c2:	42a5      	cmp	r5, r4
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	f040 8117 	bne.w	80075fa <_dtoa_r+0x6e2>
 80073cc:	f7f8 ff5e 	bl	800028c <__adddf3>
 80073d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073d4:	4604      	mov	r4, r0
 80073d6:	460d      	mov	r5, r1
 80073d8:	f7f9 fb9e 	bl	8000b18 <__aeabi_dcmpgt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	f040 80f9 	bne.w	80075d4 <_dtoa_r+0x6bc>
 80073e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f9 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ee:	b118      	cbz	r0, 80073f8 <_dtoa_r+0x4e0>
 80073f0:	f018 0f01 	tst.w	r8, #1
 80073f4:	f040 80ee 	bne.w	80075d4 <_dtoa_r+0x6bc>
 80073f8:	4649      	mov	r1, r9
 80073fa:	4658      	mov	r0, fp
 80073fc:	f000 fc90 	bl	8007d20 <_Bfree>
 8007400:	2300      	movs	r3, #0
 8007402:	7033      	strb	r3, [r6, #0]
 8007404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007406:	3701      	adds	r7, #1
 8007408:	601f      	str	r7, [r3, #0]
 800740a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 831d 	beq.w	8007a4c <_dtoa_r+0xb34>
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	e31a      	b.n	8007a4c <_dtoa_r+0xb34>
 8007416:	07e2      	lsls	r2, r4, #31
 8007418:	d505      	bpl.n	8007426 <_dtoa_r+0x50e>
 800741a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	3601      	adds	r6, #1
 8007424:	2301      	movs	r3, #1
 8007426:	1064      	asrs	r4, r4, #1
 8007428:	3508      	adds	r5, #8
 800742a:	e73f      	b.n	80072ac <_dtoa_r+0x394>
 800742c:	2602      	movs	r6, #2
 800742e:	e742      	b.n	80072b6 <_dtoa_r+0x39e>
 8007430:	9c07      	ldr	r4, [sp, #28]
 8007432:	9704      	str	r7, [sp, #16]
 8007434:	e761      	b.n	80072fa <_dtoa_r+0x3e2>
 8007436:	4b27      	ldr	r3, [pc, #156]	@ (80074d4 <_dtoa_r+0x5bc>)
 8007438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800743a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800743e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007442:	4454      	add	r4, sl
 8007444:	2900      	cmp	r1, #0
 8007446:	d053      	beq.n	80074f0 <_dtoa_r+0x5d8>
 8007448:	4928      	ldr	r1, [pc, #160]	@ (80074ec <_dtoa_r+0x5d4>)
 800744a:	2000      	movs	r0, #0
 800744c:	f7f9 f9fe 	bl	800084c <__aeabi_ddiv>
 8007450:	4633      	mov	r3, r6
 8007452:	462a      	mov	r2, r5
 8007454:	f7f8 ff18 	bl	8000288 <__aeabi_dsub>
 8007458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800745c:	4656      	mov	r6, sl
 800745e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007462:	f7f9 fb79 	bl	8000b58 <__aeabi_d2iz>
 8007466:	4605      	mov	r5, r0
 8007468:	f7f9 f85c 	bl	8000524 <__aeabi_i2d>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007474:	f7f8 ff08 	bl	8000288 <__aeabi_dsub>
 8007478:	3530      	adds	r5, #48	@ 0x30
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007482:	f806 5b01 	strb.w	r5, [r6], #1
 8007486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800748a:	f7f9 fb27 	bl	8000adc <__aeabi_dcmplt>
 800748e:	2800      	cmp	r0, #0
 8007490:	d171      	bne.n	8007576 <_dtoa_r+0x65e>
 8007492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007496:	4911      	ldr	r1, [pc, #68]	@ (80074dc <_dtoa_r+0x5c4>)
 8007498:	2000      	movs	r0, #0
 800749a:	f7f8 fef5 	bl	8000288 <__aeabi_dsub>
 800749e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074a2:	f7f9 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f040 8095 	bne.w	80075d6 <_dtoa_r+0x6be>
 80074ac:	42a6      	cmp	r6, r4
 80074ae:	f43f af50 	beq.w	8007352 <_dtoa_r+0x43a>
 80074b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074b6:	4b0a      	ldr	r3, [pc, #40]	@ (80074e0 <_dtoa_r+0x5c8>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	f7f9 f89d 	bl	80005f8 <__aeabi_dmul>
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <_dtoa_r+0x5c8>)
 80074c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074c4:	2200      	movs	r2, #0
 80074c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ca:	f7f9 f895 	bl	80005f8 <__aeabi_dmul>
 80074ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d2:	e7c4      	b.n	800745e <_dtoa_r+0x546>
 80074d4:	08009188 	.word	0x08009188
 80074d8:	08009160 	.word	0x08009160
 80074dc:	3ff00000 	.word	0x3ff00000
 80074e0:	40240000 	.word	0x40240000
 80074e4:	401c0000 	.word	0x401c0000
 80074e8:	40140000 	.word	0x40140000
 80074ec:	3fe00000 	.word	0x3fe00000
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	f7f9 f880 	bl	80005f8 <__aeabi_dmul>
 80074f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80074fe:	4656      	mov	r6, sl
 8007500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007504:	f7f9 fb28 	bl	8000b58 <__aeabi_d2iz>
 8007508:	4605      	mov	r5, r0
 800750a:	f7f9 f80b 	bl	8000524 <__aeabi_i2d>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007516:	f7f8 feb7 	bl	8000288 <__aeabi_dsub>
 800751a:	3530      	adds	r5, #48	@ 0x30
 800751c:	f806 5b01 	strb.w	r5, [r6], #1
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	42a6      	cmp	r6, r4
 8007526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	d124      	bne.n	800757a <_dtoa_r+0x662>
 8007530:	4bac      	ldr	r3, [pc, #688]	@ (80077e4 <_dtoa_r+0x8cc>)
 8007532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007536:	f7f8 fea9 	bl	800028c <__adddf3>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007542:	f7f9 fae9 	bl	8000b18 <__aeabi_dcmpgt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d145      	bne.n	80075d6 <_dtoa_r+0x6be>
 800754a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800754e:	49a5      	ldr	r1, [pc, #660]	@ (80077e4 <_dtoa_r+0x8cc>)
 8007550:	2000      	movs	r0, #0
 8007552:	f7f8 fe99 	bl	8000288 <__aeabi_dsub>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755e:	f7f9 fabd 	bl	8000adc <__aeabi_dcmplt>
 8007562:	2800      	cmp	r0, #0
 8007564:	f43f aef5 	beq.w	8007352 <_dtoa_r+0x43a>
 8007568:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800756a:	1e73      	subs	r3, r6, #1
 800756c:	9315      	str	r3, [sp, #84]	@ 0x54
 800756e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007572:	2b30      	cmp	r3, #48	@ 0x30
 8007574:	d0f8      	beq.n	8007568 <_dtoa_r+0x650>
 8007576:	9f04      	ldr	r7, [sp, #16]
 8007578:	e73e      	b.n	80073f8 <_dtoa_r+0x4e0>
 800757a:	4b9b      	ldr	r3, [pc, #620]	@ (80077e8 <_dtoa_r+0x8d0>)
 800757c:	f7f9 f83c 	bl	80005f8 <__aeabi_dmul>
 8007580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007584:	e7bc      	b.n	8007500 <_dtoa_r+0x5e8>
 8007586:	d10c      	bne.n	80075a2 <_dtoa_r+0x68a>
 8007588:	4b98      	ldr	r3, [pc, #608]	@ (80077ec <_dtoa_r+0x8d4>)
 800758a:	2200      	movs	r2, #0
 800758c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007590:	f7f9 f832 	bl	80005f8 <__aeabi_dmul>
 8007594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007598:	f7f9 fab4 	bl	8000b04 <__aeabi_dcmpge>
 800759c:	2800      	cmp	r0, #0
 800759e:	f000 8157 	beq.w	8007850 <_dtoa_r+0x938>
 80075a2:	2400      	movs	r4, #0
 80075a4:	4625      	mov	r5, r4
 80075a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075a8:	43db      	mvns	r3, r3
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	4656      	mov	r6, sl
 80075ae:	2700      	movs	r7, #0
 80075b0:	4621      	mov	r1, r4
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fbb4 	bl	8007d20 <_Bfree>
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	d0dc      	beq.n	8007576 <_dtoa_r+0x65e>
 80075bc:	b12f      	cbz	r7, 80075ca <_dtoa_r+0x6b2>
 80075be:	42af      	cmp	r7, r5
 80075c0:	d003      	beq.n	80075ca <_dtoa_r+0x6b2>
 80075c2:	4639      	mov	r1, r7
 80075c4:	4658      	mov	r0, fp
 80075c6:	f000 fbab 	bl	8007d20 <_Bfree>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fba7 	bl	8007d20 <_Bfree>
 80075d2:	e7d0      	b.n	8007576 <_dtoa_r+0x65e>
 80075d4:	9704      	str	r7, [sp, #16]
 80075d6:	4633      	mov	r3, r6
 80075d8:	461e      	mov	r6, r3
 80075da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075de:	2a39      	cmp	r2, #57	@ 0x39
 80075e0:	d107      	bne.n	80075f2 <_dtoa_r+0x6da>
 80075e2:	459a      	cmp	sl, r3
 80075e4:	d1f8      	bne.n	80075d8 <_dtoa_r+0x6c0>
 80075e6:	9a04      	ldr	r2, [sp, #16]
 80075e8:	3201      	adds	r2, #1
 80075ea:	9204      	str	r2, [sp, #16]
 80075ec:	2230      	movs	r2, #48	@ 0x30
 80075ee:	f88a 2000 	strb.w	r2, [sl]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	3201      	adds	r2, #1
 80075f6:	701a      	strb	r2, [r3, #0]
 80075f8:	e7bd      	b.n	8007576 <_dtoa_r+0x65e>
 80075fa:	4b7b      	ldr	r3, [pc, #492]	@ (80077e8 <_dtoa_r+0x8d0>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	f7f8 fffb 	bl	80005f8 <__aeabi_dmul>
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	4604      	mov	r4, r0
 8007608:	460d      	mov	r5, r1
 800760a:	f7f9 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f aebb 	beq.w	800738a <_dtoa_r+0x472>
 8007614:	e6f0      	b.n	80073f8 <_dtoa_r+0x4e0>
 8007616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007618:	2a00      	cmp	r2, #0
 800761a:	f000 80db 	beq.w	80077d4 <_dtoa_r+0x8bc>
 800761e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007620:	2a01      	cmp	r2, #1
 8007622:	f300 80bf 	bgt.w	80077a4 <_dtoa_r+0x88c>
 8007626:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007628:	2a00      	cmp	r2, #0
 800762a:	f000 80b7 	beq.w	800779c <_dtoa_r+0x884>
 800762e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007632:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007634:	4646      	mov	r6, r8
 8007636:	9a08      	ldr	r2, [sp, #32]
 8007638:	2101      	movs	r1, #1
 800763a:	441a      	add	r2, r3
 800763c:	4658      	mov	r0, fp
 800763e:	4498      	add	r8, r3
 8007640:	9208      	str	r2, [sp, #32]
 8007642:	f000 fc21 	bl	8007e88 <__i2b>
 8007646:	4605      	mov	r5, r0
 8007648:	b15e      	cbz	r6, 8007662 <_dtoa_r+0x74a>
 800764a:	9b08      	ldr	r3, [sp, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dd08      	ble.n	8007662 <_dtoa_r+0x74a>
 8007650:	42b3      	cmp	r3, r6
 8007652:	9a08      	ldr	r2, [sp, #32]
 8007654:	bfa8      	it	ge
 8007656:	4633      	movge	r3, r6
 8007658:	eba8 0803 	sub.w	r8, r8, r3
 800765c:	1af6      	subs	r6, r6, r3
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	9308      	str	r3, [sp, #32]
 8007662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007664:	b1f3      	cbz	r3, 80076a4 <_dtoa_r+0x78c>
 8007666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 80b7 	beq.w	80077dc <_dtoa_r+0x8c4>
 800766e:	b18c      	cbz	r4, 8007694 <_dtoa_r+0x77c>
 8007670:	4629      	mov	r1, r5
 8007672:	4622      	mov	r2, r4
 8007674:	4658      	mov	r0, fp
 8007676:	f000 fcc7 	bl	8008008 <__pow5mult>
 800767a:	464a      	mov	r2, r9
 800767c:	4601      	mov	r1, r0
 800767e:	4605      	mov	r5, r0
 8007680:	4658      	mov	r0, fp
 8007682:	f000 fc17 	bl	8007eb4 <__multiply>
 8007686:	4649      	mov	r1, r9
 8007688:	9004      	str	r0, [sp, #16]
 800768a:	4658      	mov	r0, fp
 800768c:	f000 fb48 	bl	8007d20 <_Bfree>
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	4699      	mov	r9, r3
 8007694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007696:	1b1a      	subs	r2, r3, r4
 8007698:	d004      	beq.n	80076a4 <_dtoa_r+0x78c>
 800769a:	4649      	mov	r1, r9
 800769c:	4658      	mov	r0, fp
 800769e:	f000 fcb3 	bl	8008008 <__pow5mult>
 80076a2:	4681      	mov	r9, r0
 80076a4:	2101      	movs	r1, #1
 80076a6:	4658      	mov	r0, fp
 80076a8:	f000 fbee 	bl	8007e88 <__i2b>
 80076ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ae:	4604      	mov	r4, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 81cf 	beq.w	8007a54 <_dtoa_r+0xb3c>
 80076b6:	461a      	mov	r2, r3
 80076b8:	4601      	mov	r1, r0
 80076ba:	4658      	mov	r0, fp
 80076bc:	f000 fca4 	bl	8008008 <__pow5mult>
 80076c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	4604      	mov	r4, r0
 80076c6:	f300 8095 	bgt.w	80077f4 <_dtoa_r+0x8dc>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8087 	bne.w	80077e0 <_dtoa_r+0x8c8>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 8089 	bne.w	80077f0 <_dtoa_r+0x8d8>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076e4:	0d1b      	lsrs	r3, r3, #20
 80076e6:	051b      	lsls	r3, r3, #20
 80076e8:	b12b      	cbz	r3, 80076f6 <_dtoa_r+0x7de>
 80076ea:	9b08      	ldr	r3, [sp, #32]
 80076ec:	3301      	adds	r3, #1
 80076ee:	9308      	str	r3, [sp, #32]
 80076f0:	f108 0801 	add.w	r8, r8, #1
 80076f4:	2301      	movs	r3, #1
 80076f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 81b0 	beq.w	8007a60 <_dtoa_r+0xb48>
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007706:	6918      	ldr	r0, [r3, #16]
 8007708:	f000 fb72 	bl	8007df0 <__hi0bits>
 800770c:	f1c0 0020 	rsb	r0, r0, #32
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	4418      	add	r0, r3
 8007714:	f010 001f 	ands.w	r0, r0, #31
 8007718:	d077      	beq.n	800780a <_dtoa_r+0x8f2>
 800771a:	f1c0 0320 	rsb	r3, r0, #32
 800771e:	2b04      	cmp	r3, #4
 8007720:	dd6b      	ble.n	80077fa <_dtoa_r+0x8e2>
 8007722:	9b08      	ldr	r3, [sp, #32]
 8007724:	f1c0 001c 	rsb	r0, r0, #28
 8007728:	4403      	add	r3, r0
 800772a:	4480      	add	r8, r0
 800772c:	4406      	add	r6, r0
 800772e:	9308      	str	r3, [sp, #32]
 8007730:	f1b8 0f00 	cmp.w	r8, #0
 8007734:	dd05      	ble.n	8007742 <_dtoa_r+0x82a>
 8007736:	4649      	mov	r1, r9
 8007738:	4642      	mov	r2, r8
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fcbe 	bl	80080bc <__lshift>
 8007740:	4681      	mov	r9, r0
 8007742:	9b08      	ldr	r3, [sp, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd05      	ble.n	8007754 <_dtoa_r+0x83c>
 8007748:	4621      	mov	r1, r4
 800774a:	461a      	mov	r2, r3
 800774c:	4658      	mov	r0, fp
 800774e:	f000 fcb5 	bl	80080bc <__lshift>
 8007752:	4604      	mov	r4, r0
 8007754:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007756:	2b00      	cmp	r3, #0
 8007758:	d059      	beq.n	800780e <_dtoa_r+0x8f6>
 800775a:	4621      	mov	r1, r4
 800775c:	4648      	mov	r0, r9
 800775e:	f000 fd19 	bl	8008194 <__mcmp>
 8007762:	2800      	cmp	r0, #0
 8007764:	da53      	bge.n	800780e <_dtoa_r+0x8f6>
 8007766:	1e7b      	subs	r3, r7, #1
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	4649      	mov	r1, r9
 800776c:	2300      	movs	r3, #0
 800776e:	220a      	movs	r2, #10
 8007770:	4658      	mov	r0, fp
 8007772:	f000 faf7 	bl	8007d64 <__multadd>
 8007776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007778:	4681      	mov	r9, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8172 	beq.w	8007a64 <_dtoa_r+0xb4c>
 8007780:	2300      	movs	r3, #0
 8007782:	4629      	mov	r1, r5
 8007784:	220a      	movs	r2, #10
 8007786:	4658      	mov	r0, fp
 8007788:	f000 faec 	bl	8007d64 <__multadd>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	4605      	mov	r5, r0
 8007792:	dc67      	bgt.n	8007864 <_dtoa_r+0x94c>
 8007794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007796:	2b02      	cmp	r3, #2
 8007798:	dc41      	bgt.n	800781e <_dtoa_r+0x906>
 800779a:	e063      	b.n	8007864 <_dtoa_r+0x94c>
 800779c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800779e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077a2:	e746      	b.n	8007632 <_dtoa_r+0x71a>
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	1e5c      	subs	r4, r3, #1
 80077a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	bfbf      	itttt	lt
 80077ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077b4:	1ae3      	sublt	r3, r4, r3
 80077b6:	bfb4      	ite	lt
 80077b8:	18d2      	addlt	r2, r2, r3
 80077ba:	1b1c      	subge	r4, r3, r4
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	bfbc      	itt	lt
 80077c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077c2:	2400      	movlt	r4, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bfb5      	itete	lt
 80077c8:	eba8 0603 	sublt.w	r6, r8, r3
 80077cc:	9b07      	ldrge	r3, [sp, #28]
 80077ce:	2300      	movlt	r3, #0
 80077d0:	4646      	movge	r6, r8
 80077d2:	e730      	b.n	8007636 <_dtoa_r+0x71e>
 80077d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077d8:	4646      	mov	r6, r8
 80077da:	e735      	b.n	8007648 <_dtoa_r+0x730>
 80077dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077de:	e75c      	b.n	800769a <_dtoa_r+0x782>
 80077e0:	2300      	movs	r3, #0
 80077e2:	e788      	b.n	80076f6 <_dtoa_r+0x7de>
 80077e4:	3fe00000 	.word	0x3fe00000
 80077e8:	40240000 	.word	0x40240000
 80077ec:	40140000 	.word	0x40140000
 80077f0:	9b02      	ldr	r3, [sp, #8]
 80077f2:	e780      	b.n	80076f6 <_dtoa_r+0x7de>
 80077f4:	2300      	movs	r3, #0
 80077f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f8:	e782      	b.n	8007700 <_dtoa_r+0x7e8>
 80077fa:	d099      	beq.n	8007730 <_dtoa_r+0x818>
 80077fc:	9a08      	ldr	r2, [sp, #32]
 80077fe:	331c      	adds	r3, #28
 8007800:	441a      	add	r2, r3
 8007802:	4498      	add	r8, r3
 8007804:	441e      	add	r6, r3
 8007806:	9208      	str	r2, [sp, #32]
 8007808:	e792      	b.n	8007730 <_dtoa_r+0x818>
 800780a:	4603      	mov	r3, r0
 800780c:	e7f6      	b.n	80077fc <_dtoa_r+0x8e4>
 800780e:	9b07      	ldr	r3, [sp, #28]
 8007810:	9704      	str	r7, [sp, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	dc20      	bgt.n	8007858 <_dtoa_r+0x940>
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781a:	2b02      	cmp	r3, #2
 800781c:	dd1e      	ble.n	800785c <_dtoa_r+0x944>
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f47f aec0 	bne.w	80075a6 <_dtoa_r+0x68e>
 8007826:	4621      	mov	r1, r4
 8007828:	2205      	movs	r2, #5
 800782a:	4658      	mov	r0, fp
 800782c:	f000 fa9a 	bl	8007d64 <__multadd>
 8007830:	4601      	mov	r1, r0
 8007832:	4604      	mov	r4, r0
 8007834:	4648      	mov	r0, r9
 8007836:	f000 fcad 	bl	8008194 <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	f77f aeb3 	ble.w	80075a6 <_dtoa_r+0x68e>
 8007840:	4656      	mov	r6, sl
 8007842:	2331      	movs	r3, #49	@ 0x31
 8007844:	f806 3b01 	strb.w	r3, [r6], #1
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	3301      	adds	r3, #1
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	e6ae      	b.n	80075ae <_dtoa_r+0x696>
 8007850:	9c07      	ldr	r4, [sp, #28]
 8007852:	9704      	str	r7, [sp, #16]
 8007854:	4625      	mov	r5, r4
 8007856:	e7f3      	b.n	8007840 <_dtoa_r+0x928>
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8104 	beq.w	8007a6c <_dtoa_r+0xb54>
 8007864:	2e00      	cmp	r6, #0
 8007866:	dd05      	ble.n	8007874 <_dtoa_r+0x95c>
 8007868:	4629      	mov	r1, r5
 800786a:	4632      	mov	r2, r6
 800786c:	4658      	mov	r0, fp
 800786e:	f000 fc25 	bl	80080bc <__lshift>
 8007872:	4605      	mov	r5, r0
 8007874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d05a      	beq.n	8007930 <_dtoa_r+0xa18>
 800787a:	6869      	ldr	r1, [r5, #4]
 800787c:	4658      	mov	r0, fp
 800787e:	f000 fa0f 	bl	8007ca0 <_Balloc>
 8007882:	4606      	mov	r6, r0
 8007884:	b928      	cbnz	r0, 8007892 <_dtoa_r+0x97a>
 8007886:	4b84      	ldr	r3, [pc, #528]	@ (8007a98 <_dtoa_r+0xb80>)
 8007888:	4602      	mov	r2, r0
 800788a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800788e:	f7ff bb5a 	b.w	8006f46 <_dtoa_r+0x2e>
 8007892:	692a      	ldr	r2, [r5, #16]
 8007894:	3202      	adds	r2, #2
 8007896:	0092      	lsls	r2, r2, #2
 8007898:	f105 010c 	add.w	r1, r5, #12
 800789c:	300c      	adds	r0, #12
 800789e:	f000 ffaf 	bl	8008800 <memcpy>
 80078a2:	2201      	movs	r2, #1
 80078a4:	4631      	mov	r1, r6
 80078a6:	4658      	mov	r0, fp
 80078a8:	f000 fc08 	bl	80080bc <__lshift>
 80078ac:	f10a 0301 	add.w	r3, sl, #1
 80078b0:	9307      	str	r3, [sp, #28]
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	4453      	add	r3, sl
 80078b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	462f      	mov	r7, r5
 80078c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c2:	4605      	mov	r5, r0
 80078c4:	9b07      	ldr	r3, [sp, #28]
 80078c6:	4621      	mov	r1, r4
 80078c8:	3b01      	subs	r3, #1
 80078ca:	4648      	mov	r0, r9
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	f7ff fa98 	bl	8006e02 <quorem>
 80078d2:	4639      	mov	r1, r7
 80078d4:	9002      	str	r0, [sp, #8]
 80078d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078da:	4648      	mov	r0, r9
 80078dc:	f000 fc5a 	bl	8008194 <__mcmp>
 80078e0:	462a      	mov	r2, r5
 80078e2:	9008      	str	r0, [sp, #32]
 80078e4:	4621      	mov	r1, r4
 80078e6:	4658      	mov	r0, fp
 80078e8:	f000 fc70 	bl	80081cc <__mdiff>
 80078ec:	68c2      	ldr	r2, [r0, #12]
 80078ee:	4606      	mov	r6, r0
 80078f0:	bb02      	cbnz	r2, 8007934 <_dtoa_r+0xa1c>
 80078f2:	4601      	mov	r1, r0
 80078f4:	4648      	mov	r0, r9
 80078f6:	f000 fc4d 	bl	8008194 <__mcmp>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4631      	mov	r1, r6
 80078fe:	4658      	mov	r0, fp
 8007900:	920e      	str	r2, [sp, #56]	@ 0x38
 8007902:	f000 fa0d 	bl	8007d20 <_Bfree>
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800790a:	9e07      	ldr	r6, [sp, #28]
 800790c:	ea43 0102 	orr.w	r1, r3, r2
 8007910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007912:	4319      	orrs	r1, r3
 8007914:	d110      	bne.n	8007938 <_dtoa_r+0xa20>
 8007916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800791a:	d029      	beq.n	8007970 <_dtoa_r+0xa58>
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dd02      	ble.n	8007928 <_dtoa_r+0xa10>
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007928:	9b00      	ldr	r3, [sp, #0]
 800792a:	f883 8000 	strb.w	r8, [r3]
 800792e:	e63f      	b.n	80075b0 <_dtoa_r+0x698>
 8007930:	4628      	mov	r0, r5
 8007932:	e7bb      	b.n	80078ac <_dtoa_r+0x994>
 8007934:	2201      	movs	r2, #1
 8007936:	e7e1      	b.n	80078fc <_dtoa_r+0x9e4>
 8007938:	9b08      	ldr	r3, [sp, #32]
 800793a:	2b00      	cmp	r3, #0
 800793c:	db04      	blt.n	8007948 <_dtoa_r+0xa30>
 800793e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007940:	430b      	orrs	r3, r1
 8007942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007944:	430b      	orrs	r3, r1
 8007946:	d120      	bne.n	800798a <_dtoa_r+0xa72>
 8007948:	2a00      	cmp	r2, #0
 800794a:	dded      	ble.n	8007928 <_dtoa_r+0xa10>
 800794c:	4649      	mov	r1, r9
 800794e:	2201      	movs	r2, #1
 8007950:	4658      	mov	r0, fp
 8007952:	f000 fbb3 	bl	80080bc <__lshift>
 8007956:	4621      	mov	r1, r4
 8007958:	4681      	mov	r9, r0
 800795a:	f000 fc1b 	bl	8008194 <__mcmp>
 800795e:	2800      	cmp	r0, #0
 8007960:	dc03      	bgt.n	800796a <_dtoa_r+0xa52>
 8007962:	d1e1      	bne.n	8007928 <_dtoa_r+0xa10>
 8007964:	f018 0f01 	tst.w	r8, #1
 8007968:	d0de      	beq.n	8007928 <_dtoa_r+0xa10>
 800796a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800796e:	d1d8      	bne.n	8007922 <_dtoa_r+0xa0a>
 8007970:	9a00      	ldr	r2, [sp, #0]
 8007972:	2339      	movs	r3, #57	@ 0x39
 8007974:	7013      	strb	r3, [r2, #0]
 8007976:	4633      	mov	r3, r6
 8007978:	461e      	mov	r6, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007980:	2a39      	cmp	r2, #57	@ 0x39
 8007982:	d052      	beq.n	8007a2a <_dtoa_r+0xb12>
 8007984:	3201      	adds	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e612      	b.n	80075b0 <_dtoa_r+0x698>
 800798a:	2a00      	cmp	r2, #0
 800798c:	dd07      	ble.n	800799e <_dtoa_r+0xa86>
 800798e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007992:	d0ed      	beq.n	8007970 <_dtoa_r+0xa58>
 8007994:	9a00      	ldr	r2, [sp, #0]
 8007996:	f108 0301 	add.w	r3, r8, #1
 800799a:	7013      	strb	r3, [r2, #0]
 800799c:	e608      	b.n	80075b0 <_dtoa_r+0x698>
 800799e:	9b07      	ldr	r3, [sp, #28]
 80079a0:	9a07      	ldr	r2, [sp, #28]
 80079a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d028      	beq.n	80079fe <_dtoa_r+0xae6>
 80079ac:	4649      	mov	r1, r9
 80079ae:	2300      	movs	r3, #0
 80079b0:	220a      	movs	r2, #10
 80079b2:	4658      	mov	r0, fp
 80079b4:	f000 f9d6 	bl	8007d64 <__multadd>
 80079b8:	42af      	cmp	r7, r5
 80079ba:	4681      	mov	r9, r0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	f04f 020a 	mov.w	r2, #10
 80079c4:	4639      	mov	r1, r7
 80079c6:	4658      	mov	r0, fp
 80079c8:	d107      	bne.n	80079da <_dtoa_r+0xac2>
 80079ca:	f000 f9cb 	bl	8007d64 <__multadd>
 80079ce:	4607      	mov	r7, r0
 80079d0:	4605      	mov	r5, r0
 80079d2:	9b07      	ldr	r3, [sp, #28]
 80079d4:	3301      	adds	r3, #1
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	e774      	b.n	80078c4 <_dtoa_r+0x9ac>
 80079da:	f000 f9c3 	bl	8007d64 <__multadd>
 80079de:	4629      	mov	r1, r5
 80079e0:	4607      	mov	r7, r0
 80079e2:	2300      	movs	r3, #0
 80079e4:	220a      	movs	r2, #10
 80079e6:	4658      	mov	r0, fp
 80079e8:	f000 f9bc 	bl	8007d64 <__multadd>
 80079ec:	4605      	mov	r5, r0
 80079ee:	e7f0      	b.n	80079d2 <_dtoa_r+0xaba>
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bfcc      	ite	gt
 80079f6:	461e      	movgt	r6, r3
 80079f8:	2601      	movle	r6, #1
 80079fa:	4456      	add	r6, sl
 80079fc:	2700      	movs	r7, #0
 80079fe:	4649      	mov	r1, r9
 8007a00:	2201      	movs	r2, #1
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fb5a 	bl	80080bc <__lshift>
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4681      	mov	r9, r0
 8007a0c:	f000 fbc2 	bl	8008194 <__mcmp>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	dcb0      	bgt.n	8007976 <_dtoa_r+0xa5e>
 8007a14:	d102      	bne.n	8007a1c <_dtoa_r+0xb04>
 8007a16:	f018 0f01 	tst.w	r8, #1
 8007a1a:	d1ac      	bne.n	8007976 <_dtoa_r+0xa5e>
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	461e      	mov	r6, r3
 8007a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a24:	2a30      	cmp	r2, #48	@ 0x30
 8007a26:	d0fa      	beq.n	8007a1e <_dtoa_r+0xb06>
 8007a28:	e5c2      	b.n	80075b0 <_dtoa_r+0x698>
 8007a2a:	459a      	cmp	sl, r3
 8007a2c:	d1a4      	bne.n	8007978 <_dtoa_r+0xa60>
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	3301      	adds	r3, #1
 8007a32:	9304      	str	r3, [sp, #16]
 8007a34:	2331      	movs	r3, #49	@ 0x31
 8007a36:	f88a 3000 	strb.w	r3, [sl]
 8007a3a:	e5b9      	b.n	80075b0 <_dtoa_r+0x698>
 8007a3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a9c <_dtoa_r+0xb84>
 8007a42:	b11b      	cbz	r3, 8007a4c <_dtoa_r+0xb34>
 8007a44:	f10a 0308 	add.w	r3, sl, #8
 8007a48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	b019      	add	sp, #100	@ 0x64
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	f77f ae37 	ble.w	80076ca <_dtoa_r+0x7b2>
 8007a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a60:	2001      	movs	r0, #1
 8007a62:	e655      	b.n	8007710 <_dtoa_r+0x7f8>
 8007a64:	9b00      	ldr	r3, [sp, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f77f aed6 	ble.w	8007818 <_dtoa_r+0x900>
 8007a6c:	4656      	mov	r6, sl
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4648      	mov	r0, r9
 8007a72:	f7ff f9c6 	bl	8006e02 <quorem>
 8007a76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a7a:	f806 8b01 	strb.w	r8, [r6], #1
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	eba6 020a 	sub.w	r2, r6, sl
 8007a84:	4293      	cmp	r3, r2
 8007a86:	ddb3      	ble.n	80079f0 <_dtoa_r+0xad8>
 8007a88:	4649      	mov	r1, r9
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	4658      	mov	r0, fp
 8007a90:	f000 f968 	bl	8007d64 <__multadd>
 8007a94:	4681      	mov	r9, r0
 8007a96:	e7ea      	b.n	8007a6e <_dtoa_r+0xb56>
 8007a98:	080090e5 	.word	0x080090e5
 8007a9c:	08009069 	.word	0x08009069

08007aa0 <_free_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d041      	beq.n	8007b2c <_free_r+0x8c>
 8007aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aac:	1f0c      	subs	r4, r1, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bfb8      	it	lt
 8007ab2:	18e4      	addlt	r4, r4, r3
 8007ab4:	f000 f8e8 	bl	8007c88 <__malloc_lock>
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b30 <_free_r+0x90>)
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	b933      	cbnz	r3, 8007acc <_free_r+0x2c>
 8007abe:	6063      	str	r3, [r4, #4]
 8007ac0:	6014      	str	r4, [r2, #0]
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac8:	f000 b8e4 	b.w	8007c94 <__malloc_unlock>
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d908      	bls.n	8007ae2 <_free_r+0x42>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	1821      	adds	r1, r4, r0
 8007ad4:	428b      	cmp	r3, r1
 8007ad6:	bf01      	itttt	eq
 8007ad8:	6819      	ldreq	r1, [r3, #0]
 8007ada:	685b      	ldreq	r3, [r3, #4]
 8007adc:	1809      	addeq	r1, r1, r0
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	e7ed      	b.n	8007abe <_free_r+0x1e>
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	b10b      	cbz	r3, 8007aec <_free_r+0x4c>
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	d9fa      	bls.n	8007ae2 <_free_r+0x42>
 8007aec:	6811      	ldr	r1, [r2, #0]
 8007aee:	1850      	adds	r0, r2, r1
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d10b      	bne.n	8007b0c <_free_r+0x6c>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	4401      	add	r1, r0
 8007af8:	1850      	adds	r0, r2, r1
 8007afa:	4283      	cmp	r3, r0
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	d1e0      	bne.n	8007ac2 <_free_r+0x22>
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	6053      	str	r3, [r2, #4]
 8007b06:	4408      	add	r0, r1
 8007b08:	6010      	str	r0, [r2, #0]
 8007b0a:	e7da      	b.n	8007ac2 <_free_r+0x22>
 8007b0c:	d902      	bls.n	8007b14 <_free_r+0x74>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	e7d6      	b.n	8007ac2 <_free_r+0x22>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	1821      	adds	r1, r4, r0
 8007b18:	428b      	cmp	r3, r1
 8007b1a:	bf04      	itt	eq
 8007b1c:	6819      	ldreq	r1, [r3, #0]
 8007b1e:	685b      	ldreq	r3, [r3, #4]
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	bf04      	itt	eq
 8007b24:	1809      	addeq	r1, r1, r0
 8007b26:	6021      	streq	r1, [r4, #0]
 8007b28:	6054      	str	r4, [r2, #4]
 8007b2a:	e7ca      	b.n	8007ac2 <_free_r+0x22>
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000448 	.word	0x20000448

08007b34 <malloc>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	@ (8007b40 <malloc+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f000 b825 	b.w	8007b88 <_malloc_r>
 8007b3e:	bf00      	nop
 8007b40:	20000034 	.word	0x20000034

08007b44 <sbrk_aligned>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0f      	ldr	r6, [pc, #60]	@ (8007b84 <sbrk_aligned+0x40>)
 8007b48:	460c      	mov	r4, r1
 8007b4a:	6831      	ldr	r1, [r6, #0]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	b911      	cbnz	r1, 8007b56 <sbrk_aligned+0x12>
 8007b50:	f000 fe46 	bl	80087e0 <_sbrk_r>
 8007b54:	6030      	str	r0, [r6, #0]
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 fe41 	bl	80087e0 <_sbrk_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d103      	bne.n	8007b6a <sbrk_aligned+0x26>
 8007b62:	f04f 34ff 	mov.w	r4, #4294967295
 8007b66:	4620      	mov	r0, r4
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	1cc4      	adds	r4, r0, #3
 8007b6c:	f024 0403 	bic.w	r4, r4, #3
 8007b70:	42a0      	cmp	r0, r4
 8007b72:	d0f8      	beq.n	8007b66 <sbrk_aligned+0x22>
 8007b74:	1a21      	subs	r1, r4, r0
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 fe32 	bl	80087e0 <_sbrk_r>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1f2      	bne.n	8007b66 <sbrk_aligned+0x22>
 8007b80:	e7ef      	b.n	8007b62 <sbrk_aligned+0x1e>
 8007b82:	bf00      	nop
 8007b84:	20000444 	.word	0x20000444

08007b88 <_malloc_r>:
 8007b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	1ccd      	adds	r5, r1, #3
 8007b8e:	f025 0503 	bic.w	r5, r5, #3
 8007b92:	3508      	adds	r5, #8
 8007b94:	2d0c      	cmp	r5, #12
 8007b96:	bf38      	it	cc
 8007b98:	250c      	movcc	r5, #12
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	db01      	blt.n	8007ba4 <_malloc_r+0x1c>
 8007ba0:	42a9      	cmp	r1, r5
 8007ba2:	d904      	bls.n	8007bae <_malloc_r+0x26>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	6033      	str	r3, [r6, #0]
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c84 <_malloc_r+0xfc>
 8007bb2:	f000 f869 	bl	8007c88 <__malloc_lock>
 8007bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bba:	461c      	mov	r4, r3
 8007bbc:	bb44      	cbnz	r4, 8007c10 <_malloc_r+0x88>
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7ff ffbf 	bl	8007b44 <sbrk_aligned>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	4604      	mov	r4, r0
 8007bca:	d158      	bne.n	8007c7e <_malloc_r+0xf6>
 8007bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8007bd0:	4627      	mov	r7, r4
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	d143      	bne.n	8007c5e <_malloc_r+0xd6>
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	d04b      	beq.n	8007c72 <_malloc_r+0xea>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4630      	mov	r0, r6
 8007be0:	eb04 0903 	add.w	r9, r4, r3
 8007be4:	f000 fdfc 	bl	80087e0 <_sbrk_r>
 8007be8:	4581      	cmp	r9, r0
 8007bea:	d142      	bne.n	8007c72 <_malloc_r+0xea>
 8007bec:	6821      	ldr	r1, [r4, #0]
 8007bee:	1a6d      	subs	r5, r5, r1
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffa6 	bl	8007b44 <sbrk_aligned>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d03a      	beq.n	8007c72 <_malloc_r+0xea>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	442b      	add	r3, r5
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	f8d8 3000 	ldr.w	r3, [r8]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	bb62      	cbnz	r2, 8007c64 <_malloc_r+0xdc>
 8007c0a:	f8c8 7000 	str.w	r7, [r8]
 8007c0e:	e00f      	b.n	8007c30 <_malloc_r+0xa8>
 8007c10:	6822      	ldr	r2, [r4, #0]
 8007c12:	1b52      	subs	r2, r2, r5
 8007c14:	d420      	bmi.n	8007c58 <_malloc_r+0xd0>
 8007c16:	2a0b      	cmp	r2, #11
 8007c18:	d917      	bls.n	8007c4a <_malloc_r+0xc2>
 8007c1a:	1961      	adds	r1, r4, r5
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	6025      	str	r5, [r4, #0]
 8007c20:	bf18      	it	ne
 8007c22:	6059      	strne	r1, [r3, #4]
 8007c24:	6863      	ldr	r3, [r4, #4]
 8007c26:	bf08      	it	eq
 8007c28:	f8c8 1000 	streq.w	r1, [r8]
 8007c2c:	5162      	str	r2, [r4, r5]
 8007c2e:	604b      	str	r3, [r1, #4]
 8007c30:	4630      	mov	r0, r6
 8007c32:	f000 f82f 	bl	8007c94 <__malloc_unlock>
 8007c36:	f104 000b 	add.w	r0, r4, #11
 8007c3a:	1d23      	adds	r3, r4, #4
 8007c3c:	f020 0007 	bic.w	r0, r0, #7
 8007c40:	1ac2      	subs	r2, r0, r3
 8007c42:	bf1c      	itt	ne
 8007c44:	1a1b      	subne	r3, r3, r0
 8007c46:	50a3      	strne	r3, [r4, r2]
 8007c48:	e7af      	b.n	8007baa <_malloc_r+0x22>
 8007c4a:	6862      	ldr	r2, [r4, #4]
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	bf0c      	ite	eq
 8007c50:	f8c8 2000 	streq.w	r2, [r8]
 8007c54:	605a      	strne	r2, [r3, #4]
 8007c56:	e7eb      	b.n	8007c30 <_malloc_r+0xa8>
 8007c58:	4623      	mov	r3, r4
 8007c5a:	6864      	ldr	r4, [r4, #4]
 8007c5c:	e7ae      	b.n	8007bbc <_malloc_r+0x34>
 8007c5e:	463c      	mov	r4, r7
 8007c60:	687f      	ldr	r7, [r7, #4]
 8007c62:	e7b6      	b.n	8007bd2 <_malloc_r+0x4a>
 8007c64:	461a      	mov	r2, r3
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	d1fb      	bne.n	8007c64 <_malloc_r+0xdc>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	6053      	str	r3, [r2, #4]
 8007c70:	e7de      	b.n	8007c30 <_malloc_r+0xa8>
 8007c72:	230c      	movs	r3, #12
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	4630      	mov	r0, r6
 8007c78:	f000 f80c 	bl	8007c94 <__malloc_unlock>
 8007c7c:	e794      	b.n	8007ba8 <_malloc_r+0x20>
 8007c7e:	6005      	str	r5, [r0, #0]
 8007c80:	e7d6      	b.n	8007c30 <_malloc_r+0xa8>
 8007c82:	bf00      	nop
 8007c84:	20000448 	.word	0x20000448

08007c88 <__malloc_lock>:
 8007c88:	4801      	ldr	r0, [pc, #4]	@ (8007c90 <__malloc_lock+0x8>)
 8007c8a:	f7ff b8b8 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20000440 	.word	0x20000440

08007c94 <__malloc_unlock>:
 8007c94:	4801      	ldr	r0, [pc, #4]	@ (8007c9c <__malloc_unlock+0x8>)
 8007c96:	f7ff b8b3 	b.w	8006e00 <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20000440 	.word	0x20000440

08007ca0 <_Balloc>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	69c6      	ldr	r6, [r0, #28]
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	b976      	cbnz	r6, 8007cc8 <_Balloc+0x28>
 8007caa:	2010      	movs	r0, #16
 8007cac:	f7ff ff42 	bl	8007b34 <malloc>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	61e0      	str	r0, [r4, #28]
 8007cb4:	b920      	cbnz	r0, 8007cc0 <_Balloc+0x20>
 8007cb6:	4b18      	ldr	r3, [pc, #96]	@ (8007d18 <_Balloc+0x78>)
 8007cb8:	4818      	ldr	r0, [pc, #96]	@ (8007d1c <_Balloc+0x7c>)
 8007cba:	216b      	movs	r1, #107	@ 0x6b
 8007cbc:	f000 fdae 	bl	800881c <__assert_func>
 8007cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cc4:	6006      	str	r6, [r0, #0]
 8007cc6:	60c6      	str	r6, [r0, #12]
 8007cc8:	69e6      	ldr	r6, [r4, #28]
 8007cca:	68f3      	ldr	r3, [r6, #12]
 8007ccc:	b183      	cbz	r3, 8007cf0 <_Balloc+0x50>
 8007cce:	69e3      	ldr	r3, [r4, #28]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cd6:	b9b8      	cbnz	r0, 8007d08 <_Balloc+0x68>
 8007cd8:	2101      	movs	r1, #1
 8007cda:	fa01 f605 	lsl.w	r6, r1, r5
 8007cde:	1d72      	adds	r2, r6, #5
 8007ce0:	0092      	lsls	r2, r2, #2
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 fdb8 	bl	8008858 <_calloc_r>
 8007ce8:	b160      	cbz	r0, 8007d04 <_Balloc+0x64>
 8007cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cee:	e00e      	b.n	8007d0e <_Balloc+0x6e>
 8007cf0:	2221      	movs	r2, #33	@ 0x21
 8007cf2:	2104      	movs	r1, #4
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fdaf 	bl	8008858 <_calloc_r>
 8007cfa:	69e3      	ldr	r3, [r4, #28]
 8007cfc:	60f0      	str	r0, [r6, #12]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e4      	bne.n	8007cce <_Balloc+0x2e>
 8007d04:	2000      	movs	r0, #0
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	6802      	ldr	r2, [r0, #0]
 8007d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d14:	e7f7      	b.n	8007d06 <_Balloc+0x66>
 8007d16:	bf00      	nop
 8007d18:	08009076 	.word	0x08009076
 8007d1c:	080090f6 	.word	0x080090f6

08007d20 <_Bfree>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	69c6      	ldr	r6, [r0, #28]
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	b976      	cbnz	r6, 8007d48 <_Bfree+0x28>
 8007d2a:	2010      	movs	r0, #16
 8007d2c:	f7ff ff02 	bl	8007b34 <malloc>
 8007d30:	4602      	mov	r2, r0
 8007d32:	61e8      	str	r0, [r5, #28]
 8007d34:	b920      	cbnz	r0, 8007d40 <_Bfree+0x20>
 8007d36:	4b09      	ldr	r3, [pc, #36]	@ (8007d5c <_Bfree+0x3c>)
 8007d38:	4809      	ldr	r0, [pc, #36]	@ (8007d60 <_Bfree+0x40>)
 8007d3a:	218f      	movs	r1, #143	@ 0x8f
 8007d3c:	f000 fd6e 	bl	800881c <__assert_func>
 8007d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d44:	6006      	str	r6, [r0, #0]
 8007d46:	60c6      	str	r6, [r0, #12]
 8007d48:	b13c      	cbz	r4, 8007d5a <_Bfree+0x3a>
 8007d4a:	69eb      	ldr	r3, [r5, #28]
 8007d4c:	6862      	ldr	r2, [r4, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d54:	6021      	str	r1, [r4, #0]
 8007d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	08009076 	.word	0x08009076
 8007d60:	080090f6 	.word	0x080090f6

08007d64 <__multadd>:
 8007d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d68:	690d      	ldr	r5, [r1, #16]
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	461e      	mov	r6, r3
 8007d70:	f101 0c14 	add.w	ip, r1, #20
 8007d74:	2000      	movs	r0, #0
 8007d76:	f8dc 3000 	ldr.w	r3, [ip]
 8007d7a:	b299      	uxth	r1, r3
 8007d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8007d80:	0c1e      	lsrs	r6, r3, #16
 8007d82:	0c0b      	lsrs	r3, r1, #16
 8007d84:	fb02 3306 	mla	r3, r2, r6, r3
 8007d88:	b289      	uxth	r1, r1
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d90:	4285      	cmp	r5, r0
 8007d92:	f84c 1b04 	str.w	r1, [ip], #4
 8007d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d9a:	dcec      	bgt.n	8007d76 <__multadd+0x12>
 8007d9c:	b30e      	cbz	r6, 8007de2 <__multadd+0x7e>
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	dc19      	bgt.n	8007dd8 <__multadd+0x74>
 8007da4:	6861      	ldr	r1, [r4, #4]
 8007da6:	4638      	mov	r0, r7
 8007da8:	3101      	adds	r1, #1
 8007daa:	f7ff ff79 	bl	8007ca0 <_Balloc>
 8007dae:	4680      	mov	r8, r0
 8007db0:	b928      	cbnz	r0, 8007dbe <__multadd+0x5a>
 8007db2:	4602      	mov	r2, r0
 8007db4:	4b0c      	ldr	r3, [pc, #48]	@ (8007de8 <__multadd+0x84>)
 8007db6:	480d      	ldr	r0, [pc, #52]	@ (8007dec <__multadd+0x88>)
 8007db8:	21ba      	movs	r1, #186	@ 0xba
 8007dba:	f000 fd2f 	bl	800881c <__assert_func>
 8007dbe:	6922      	ldr	r2, [r4, #16]
 8007dc0:	3202      	adds	r2, #2
 8007dc2:	f104 010c 	add.w	r1, r4, #12
 8007dc6:	0092      	lsls	r2, r2, #2
 8007dc8:	300c      	adds	r0, #12
 8007dca:	f000 fd19 	bl	8008800 <memcpy>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ffa5 	bl	8007d20 <_Bfree>
 8007dd6:	4644      	mov	r4, r8
 8007dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ddc:	3501      	adds	r5, #1
 8007dde:	615e      	str	r6, [r3, #20]
 8007de0:	6125      	str	r5, [r4, #16]
 8007de2:	4620      	mov	r0, r4
 8007de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de8:	080090e5 	.word	0x080090e5
 8007dec:	080090f6 	.word	0x080090f6

08007df0 <__hi0bits>:
 8007df0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007df4:	4603      	mov	r3, r0
 8007df6:	bf36      	itet	cc
 8007df8:	0403      	lslcc	r3, r0, #16
 8007dfa:	2000      	movcs	r0, #0
 8007dfc:	2010      	movcc	r0, #16
 8007dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e02:	bf3c      	itt	cc
 8007e04:	021b      	lslcc	r3, r3, #8
 8007e06:	3008      	addcc	r0, #8
 8007e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e0c:	bf3c      	itt	cc
 8007e0e:	011b      	lslcc	r3, r3, #4
 8007e10:	3004      	addcc	r0, #4
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e16:	bf3c      	itt	cc
 8007e18:	009b      	lslcc	r3, r3, #2
 8007e1a:	3002      	addcc	r0, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	db05      	blt.n	8007e2c <__hi0bits+0x3c>
 8007e20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e24:	f100 0001 	add.w	r0, r0, #1
 8007e28:	bf08      	it	eq
 8007e2a:	2020      	moveq	r0, #32
 8007e2c:	4770      	bx	lr

08007e2e <__lo0bits>:
 8007e2e:	6803      	ldr	r3, [r0, #0]
 8007e30:	4602      	mov	r2, r0
 8007e32:	f013 0007 	ands.w	r0, r3, #7
 8007e36:	d00b      	beq.n	8007e50 <__lo0bits+0x22>
 8007e38:	07d9      	lsls	r1, r3, #31
 8007e3a:	d421      	bmi.n	8007e80 <__lo0bits+0x52>
 8007e3c:	0798      	lsls	r0, r3, #30
 8007e3e:	bf49      	itett	mi
 8007e40:	085b      	lsrmi	r3, r3, #1
 8007e42:	089b      	lsrpl	r3, r3, #2
 8007e44:	2001      	movmi	r0, #1
 8007e46:	6013      	strmi	r3, [r2, #0]
 8007e48:	bf5c      	itt	pl
 8007e4a:	6013      	strpl	r3, [r2, #0]
 8007e4c:	2002      	movpl	r0, #2
 8007e4e:	4770      	bx	lr
 8007e50:	b299      	uxth	r1, r3
 8007e52:	b909      	cbnz	r1, 8007e58 <__lo0bits+0x2a>
 8007e54:	0c1b      	lsrs	r3, r3, #16
 8007e56:	2010      	movs	r0, #16
 8007e58:	b2d9      	uxtb	r1, r3
 8007e5a:	b909      	cbnz	r1, 8007e60 <__lo0bits+0x32>
 8007e5c:	3008      	adds	r0, #8
 8007e5e:	0a1b      	lsrs	r3, r3, #8
 8007e60:	0719      	lsls	r1, r3, #28
 8007e62:	bf04      	itt	eq
 8007e64:	091b      	lsreq	r3, r3, #4
 8007e66:	3004      	addeq	r0, #4
 8007e68:	0799      	lsls	r1, r3, #30
 8007e6a:	bf04      	itt	eq
 8007e6c:	089b      	lsreq	r3, r3, #2
 8007e6e:	3002      	addeq	r0, #2
 8007e70:	07d9      	lsls	r1, r3, #31
 8007e72:	d403      	bmi.n	8007e7c <__lo0bits+0x4e>
 8007e74:	085b      	lsrs	r3, r3, #1
 8007e76:	f100 0001 	add.w	r0, r0, #1
 8007e7a:	d003      	beq.n	8007e84 <__lo0bits+0x56>
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	4770      	bx	lr
 8007e80:	2000      	movs	r0, #0
 8007e82:	4770      	bx	lr
 8007e84:	2020      	movs	r0, #32
 8007e86:	4770      	bx	lr

08007e88 <__i2b>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	f7ff ff07 	bl	8007ca0 <_Balloc>
 8007e92:	4602      	mov	r2, r0
 8007e94:	b928      	cbnz	r0, 8007ea2 <__i2b+0x1a>
 8007e96:	4b05      	ldr	r3, [pc, #20]	@ (8007eac <__i2b+0x24>)
 8007e98:	4805      	ldr	r0, [pc, #20]	@ (8007eb0 <__i2b+0x28>)
 8007e9a:	f240 1145 	movw	r1, #325	@ 0x145
 8007e9e:	f000 fcbd 	bl	800881c <__assert_func>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	6144      	str	r4, [r0, #20]
 8007ea6:	6103      	str	r3, [r0, #16]
 8007ea8:	bd10      	pop	{r4, pc}
 8007eaa:	bf00      	nop
 8007eac:	080090e5 	.word	0x080090e5
 8007eb0:	080090f6 	.word	0x080090f6

08007eb4 <__multiply>:
 8007eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	4614      	mov	r4, r2
 8007eba:	690a      	ldr	r2, [r1, #16]
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	bfa8      	it	ge
 8007ec2:	4623      	movge	r3, r4
 8007ec4:	460f      	mov	r7, r1
 8007ec6:	bfa4      	itt	ge
 8007ec8:	460c      	movge	r4, r1
 8007eca:	461f      	movge	r7, r3
 8007ecc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ed0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	6861      	ldr	r1, [r4, #4]
 8007ed8:	eb0a 0609 	add.w	r6, sl, r9
 8007edc:	42b3      	cmp	r3, r6
 8007ede:	b085      	sub	sp, #20
 8007ee0:	bfb8      	it	lt
 8007ee2:	3101      	addlt	r1, #1
 8007ee4:	f7ff fedc 	bl	8007ca0 <_Balloc>
 8007ee8:	b930      	cbnz	r0, 8007ef8 <__multiply+0x44>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b44      	ldr	r3, [pc, #272]	@ (8008000 <__multiply+0x14c>)
 8007eee:	4845      	ldr	r0, [pc, #276]	@ (8008004 <__multiply+0x150>)
 8007ef0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ef4:	f000 fc92 	bl	800881c <__assert_func>
 8007ef8:	f100 0514 	add.w	r5, r0, #20
 8007efc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f00:	462b      	mov	r3, r5
 8007f02:	2200      	movs	r2, #0
 8007f04:	4543      	cmp	r3, r8
 8007f06:	d321      	bcc.n	8007f4c <__multiply+0x98>
 8007f08:	f107 0114 	add.w	r1, r7, #20
 8007f0c:	f104 0214 	add.w	r2, r4, #20
 8007f10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f18:	9302      	str	r3, [sp, #8]
 8007f1a:	1b13      	subs	r3, r2, r4
 8007f1c:	3b15      	subs	r3, #21
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	3304      	adds	r3, #4
 8007f24:	f104 0715 	add.w	r7, r4, #21
 8007f28:	42ba      	cmp	r2, r7
 8007f2a:	bf38      	it	cc
 8007f2c:	2304      	movcc	r3, #4
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	9103      	str	r1, [sp, #12]
 8007f34:	428b      	cmp	r3, r1
 8007f36:	d80c      	bhi.n	8007f52 <__multiply+0x9e>
 8007f38:	2e00      	cmp	r6, #0
 8007f3a:	dd03      	ble.n	8007f44 <__multiply+0x90>
 8007f3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d05b      	beq.n	8007ffc <__multiply+0x148>
 8007f44:	6106      	str	r6, [r0, #16]
 8007f46:	b005      	add	sp, #20
 8007f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4c:	f843 2b04 	str.w	r2, [r3], #4
 8007f50:	e7d8      	b.n	8007f04 <__multiply+0x50>
 8007f52:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f56:	f1ba 0f00 	cmp.w	sl, #0
 8007f5a:	d024      	beq.n	8007fa6 <__multiply+0xf2>
 8007f5c:	f104 0e14 	add.w	lr, r4, #20
 8007f60:	46a9      	mov	r9, r5
 8007f62:	f04f 0c00 	mov.w	ip, #0
 8007f66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f6a:	f8d9 3000 	ldr.w	r3, [r9]
 8007f6e:	fa1f fb87 	uxth.w	fp, r7
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f7c:	f8d9 7000 	ldr.w	r7, [r9]
 8007f80:	4463      	add	r3, ip
 8007f82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f86:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f94:	4572      	cmp	r2, lr
 8007f96:	f849 3b04 	str.w	r3, [r9], #4
 8007f9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f9e:	d8e2      	bhi.n	8007f66 <__multiply+0xb2>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	f845 c003 	str.w	ip, [r5, r3]
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fac:	3104      	adds	r1, #4
 8007fae:	f1b9 0f00 	cmp.w	r9, #0
 8007fb2:	d021      	beq.n	8007ff8 <__multiply+0x144>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	f104 0c14 	add.w	ip, r4, #20
 8007fba:	46ae      	mov	lr, r5
 8007fbc:	f04f 0a00 	mov.w	sl, #0
 8007fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8007fc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fc8:	fb09 770b 	mla	r7, r9, fp, r7
 8007fcc:	4457      	add	r7, sl
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fd4:	f84e 3b04 	str.w	r3, [lr], #4
 8007fd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fe0:	f8be 3000 	ldrh.w	r3, [lr]
 8007fe4:	fb09 330a 	mla	r3, r9, sl, r3
 8007fe8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fec:	4562      	cmp	r2, ip
 8007fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff2:	d8e5      	bhi.n	8007fc0 <__multiply+0x10c>
 8007ff4:	9f01      	ldr	r7, [sp, #4]
 8007ff6:	51eb      	str	r3, [r5, r7]
 8007ff8:	3504      	adds	r5, #4
 8007ffa:	e799      	b.n	8007f30 <__multiply+0x7c>
 8007ffc:	3e01      	subs	r6, #1
 8007ffe:	e79b      	b.n	8007f38 <__multiply+0x84>
 8008000:	080090e5 	.word	0x080090e5
 8008004:	080090f6 	.word	0x080090f6

08008008 <__pow5mult>:
 8008008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800800c:	4615      	mov	r5, r2
 800800e:	f012 0203 	ands.w	r2, r2, #3
 8008012:	4607      	mov	r7, r0
 8008014:	460e      	mov	r6, r1
 8008016:	d007      	beq.n	8008028 <__pow5mult+0x20>
 8008018:	4c25      	ldr	r4, [pc, #148]	@ (80080b0 <__pow5mult+0xa8>)
 800801a:	3a01      	subs	r2, #1
 800801c:	2300      	movs	r3, #0
 800801e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008022:	f7ff fe9f 	bl	8007d64 <__multadd>
 8008026:	4606      	mov	r6, r0
 8008028:	10ad      	asrs	r5, r5, #2
 800802a:	d03d      	beq.n	80080a8 <__pow5mult+0xa0>
 800802c:	69fc      	ldr	r4, [r7, #28]
 800802e:	b97c      	cbnz	r4, 8008050 <__pow5mult+0x48>
 8008030:	2010      	movs	r0, #16
 8008032:	f7ff fd7f 	bl	8007b34 <malloc>
 8008036:	4602      	mov	r2, r0
 8008038:	61f8      	str	r0, [r7, #28]
 800803a:	b928      	cbnz	r0, 8008048 <__pow5mult+0x40>
 800803c:	4b1d      	ldr	r3, [pc, #116]	@ (80080b4 <__pow5mult+0xac>)
 800803e:	481e      	ldr	r0, [pc, #120]	@ (80080b8 <__pow5mult+0xb0>)
 8008040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008044:	f000 fbea 	bl	800881c <__assert_func>
 8008048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800804c:	6004      	str	r4, [r0, #0]
 800804e:	60c4      	str	r4, [r0, #12]
 8008050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008058:	b94c      	cbnz	r4, 800806e <__pow5mult+0x66>
 800805a:	f240 2171 	movw	r1, #625	@ 0x271
 800805e:	4638      	mov	r0, r7
 8008060:	f7ff ff12 	bl	8007e88 <__i2b>
 8008064:	2300      	movs	r3, #0
 8008066:	f8c8 0008 	str.w	r0, [r8, #8]
 800806a:	4604      	mov	r4, r0
 800806c:	6003      	str	r3, [r0, #0]
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	07eb      	lsls	r3, r5, #31
 8008074:	d50a      	bpl.n	800808c <__pow5mult+0x84>
 8008076:	4631      	mov	r1, r6
 8008078:	4622      	mov	r2, r4
 800807a:	4638      	mov	r0, r7
 800807c:	f7ff ff1a 	bl	8007eb4 <__multiply>
 8008080:	4631      	mov	r1, r6
 8008082:	4680      	mov	r8, r0
 8008084:	4638      	mov	r0, r7
 8008086:	f7ff fe4b 	bl	8007d20 <_Bfree>
 800808a:	4646      	mov	r6, r8
 800808c:	106d      	asrs	r5, r5, #1
 800808e:	d00b      	beq.n	80080a8 <__pow5mult+0xa0>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	b938      	cbnz	r0, 80080a4 <__pow5mult+0x9c>
 8008094:	4622      	mov	r2, r4
 8008096:	4621      	mov	r1, r4
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff ff0b 	bl	8007eb4 <__multiply>
 800809e:	6020      	str	r0, [r4, #0]
 80080a0:	f8c0 9000 	str.w	r9, [r0]
 80080a4:	4604      	mov	r4, r0
 80080a6:	e7e4      	b.n	8008072 <__pow5mult+0x6a>
 80080a8:	4630      	mov	r0, r6
 80080aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ae:	bf00      	nop
 80080b0:	08009150 	.word	0x08009150
 80080b4:	08009076 	.word	0x08009076
 80080b8:	080090f6 	.word	0x080090f6

080080bc <__lshift>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	460c      	mov	r4, r1
 80080c2:	6849      	ldr	r1, [r1, #4]
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	4607      	mov	r7, r0
 80080ce:	4691      	mov	r9, r2
 80080d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080d4:	f108 0601 	add.w	r6, r8, #1
 80080d8:	42b3      	cmp	r3, r6
 80080da:	db0b      	blt.n	80080f4 <__lshift+0x38>
 80080dc:	4638      	mov	r0, r7
 80080de:	f7ff fddf 	bl	8007ca0 <_Balloc>
 80080e2:	4605      	mov	r5, r0
 80080e4:	b948      	cbnz	r0, 80080fa <__lshift+0x3e>
 80080e6:	4602      	mov	r2, r0
 80080e8:	4b28      	ldr	r3, [pc, #160]	@ (800818c <__lshift+0xd0>)
 80080ea:	4829      	ldr	r0, [pc, #164]	@ (8008190 <__lshift+0xd4>)
 80080ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080f0:	f000 fb94 	bl	800881c <__assert_func>
 80080f4:	3101      	adds	r1, #1
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	e7ee      	b.n	80080d8 <__lshift+0x1c>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f100 0114 	add.w	r1, r0, #20
 8008100:	f100 0210 	add.w	r2, r0, #16
 8008104:	4618      	mov	r0, r3
 8008106:	4553      	cmp	r3, sl
 8008108:	db33      	blt.n	8008172 <__lshift+0xb6>
 800810a:	6920      	ldr	r0, [r4, #16]
 800810c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008110:	f104 0314 	add.w	r3, r4, #20
 8008114:	f019 091f 	ands.w	r9, r9, #31
 8008118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800811c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008120:	d02b      	beq.n	800817a <__lshift+0xbe>
 8008122:	f1c9 0e20 	rsb	lr, r9, #32
 8008126:	468a      	mov	sl, r1
 8008128:	2200      	movs	r2, #0
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	fa00 f009 	lsl.w	r0, r0, r9
 8008130:	4310      	orrs	r0, r2
 8008132:	f84a 0b04 	str.w	r0, [sl], #4
 8008136:	f853 2b04 	ldr.w	r2, [r3], #4
 800813a:	459c      	cmp	ip, r3
 800813c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008140:	d8f3      	bhi.n	800812a <__lshift+0x6e>
 8008142:	ebac 0304 	sub.w	r3, ip, r4
 8008146:	3b15      	subs	r3, #21
 8008148:	f023 0303 	bic.w	r3, r3, #3
 800814c:	3304      	adds	r3, #4
 800814e:	f104 0015 	add.w	r0, r4, #21
 8008152:	4584      	cmp	ip, r0
 8008154:	bf38      	it	cc
 8008156:	2304      	movcc	r3, #4
 8008158:	50ca      	str	r2, [r1, r3]
 800815a:	b10a      	cbz	r2, 8008160 <__lshift+0xa4>
 800815c:	f108 0602 	add.w	r6, r8, #2
 8008160:	3e01      	subs	r6, #1
 8008162:	4638      	mov	r0, r7
 8008164:	612e      	str	r6, [r5, #16]
 8008166:	4621      	mov	r1, r4
 8008168:	f7ff fdda 	bl	8007d20 <_Bfree>
 800816c:	4628      	mov	r0, r5
 800816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008172:	f842 0f04 	str.w	r0, [r2, #4]!
 8008176:	3301      	adds	r3, #1
 8008178:	e7c5      	b.n	8008106 <__lshift+0x4a>
 800817a:	3904      	subs	r1, #4
 800817c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008180:	f841 2f04 	str.w	r2, [r1, #4]!
 8008184:	459c      	cmp	ip, r3
 8008186:	d8f9      	bhi.n	800817c <__lshift+0xc0>
 8008188:	e7ea      	b.n	8008160 <__lshift+0xa4>
 800818a:	bf00      	nop
 800818c:	080090e5 	.word	0x080090e5
 8008190:	080090f6 	.word	0x080090f6

08008194 <__mcmp>:
 8008194:	690a      	ldr	r2, [r1, #16]
 8008196:	4603      	mov	r3, r0
 8008198:	6900      	ldr	r0, [r0, #16]
 800819a:	1a80      	subs	r0, r0, r2
 800819c:	b530      	push	{r4, r5, lr}
 800819e:	d10e      	bne.n	80081be <__mcmp+0x2a>
 80081a0:	3314      	adds	r3, #20
 80081a2:	3114      	adds	r1, #20
 80081a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081b4:	4295      	cmp	r5, r2
 80081b6:	d003      	beq.n	80081c0 <__mcmp+0x2c>
 80081b8:	d205      	bcs.n	80081c6 <__mcmp+0x32>
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	bd30      	pop	{r4, r5, pc}
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d3f3      	bcc.n	80081ac <__mcmp+0x18>
 80081c4:	e7fb      	b.n	80081be <__mcmp+0x2a>
 80081c6:	2001      	movs	r0, #1
 80081c8:	e7f9      	b.n	80081be <__mcmp+0x2a>
	...

080081cc <__mdiff>:
 80081cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	4689      	mov	r9, r1
 80081d2:	4606      	mov	r6, r0
 80081d4:	4611      	mov	r1, r2
 80081d6:	4648      	mov	r0, r9
 80081d8:	4614      	mov	r4, r2
 80081da:	f7ff ffdb 	bl	8008194 <__mcmp>
 80081de:	1e05      	subs	r5, r0, #0
 80081e0:	d112      	bne.n	8008208 <__mdiff+0x3c>
 80081e2:	4629      	mov	r1, r5
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff fd5b 	bl	8007ca0 <_Balloc>
 80081ea:	4602      	mov	r2, r0
 80081ec:	b928      	cbnz	r0, 80081fa <__mdiff+0x2e>
 80081ee:	4b3f      	ldr	r3, [pc, #252]	@ (80082ec <__mdiff+0x120>)
 80081f0:	f240 2137 	movw	r1, #567	@ 0x237
 80081f4:	483e      	ldr	r0, [pc, #248]	@ (80082f0 <__mdiff+0x124>)
 80081f6:	f000 fb11 	bl	800881c <__assert_func>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008200:	4610      	mov	r0, r2
 8008202:	b003      	add	sp, #12
 8008204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008208:	bfbc      	itt	lt
 800820a:	464b      	movlt	r3, r9
 800820c:	46a1      	movlt	r9, r4
 800820e:	4630      	mov	r0, r6
 8008210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008214:	bfba      	itte	lt
 8008216:	461c      	movlt	r4, r3
 8008218:	2501      	movlt	r5, #1
 800821a:	2500      	movge	r5, #0
 800821c:	f7ff fd40 	bl	8007ca0 <_Balloc>
 8008220:	4602      	mov	r2, r0
 8008222:	b918      	cbnz	r0, 800822c <__mdiff+0x60>
 8008224:	4b31      	ldr	r3, [pc, #196]	@ (80082ec <__mdiff+0x120>)
 8008226:	f240 2145 	movw	r1, #581	@ 0x245
 800822a:	e7e3      	b.n	80081f4 <__mdiff+0x28>
 800822c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008230:	6926      	ldr	r6, [r4, #16]
 8008232:	60c5      	str	r5, [r0, #12]
 8008234:	f109 0310 	add.w	r3, r9, #16
 8008238:	f109 0514 	add.w	r5, r9, #20
 800823c:	f104 0e14 	add.w	lr, r4, #20
 8008240:	f100 0b14 	add.w	fp, r0, #20
 8008244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	46d9      	mov	r9, fp
 8008250:	f04f 0c00 	mov.w	ip, #0
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	f85e 0b04 	ldr.w	r0, [lr], #4
 800825a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	fa1f f38a 	uxth.w	r3, sl
 8008264:	4619      	mov	r1, r3
 8008266:	b283      	uxth	r3, r0
 8008268:	1acb      	subs	r3, r1, r3
 800826a:	0c00      	lsrs	r0, r0, #16
 800826c:	4463      	add	r3, ip
 800826e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008276:	b29b      	uxth	r3, r3
 8008278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800827c:	4576      	cmp	r6, lr
 800827e:	f849 3b04 	str.w	r3, [r9], #4
 8008282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008286:	d8e5      	bhi.n	8008254 <__mdiff+0x88>
 8008288:	1b33      	subs	r3, r6, r4
 800828a:	3b15      	subs	r3, #21
 800828c:	f023 0303 	bic.w	r3, r3, #3
 8008290:	3415      	adds	r4, #21
 8008292:	3304      	adds	r3, #4
 8008294:	42a6      	cmp	r6, r4
 8008296:	bf38      	it	cc
 8008298:	2304      	movcc	r3, #4
 800829a:	441d      	add	r5, r3
 800829c:	445b      	add	r3, fp
 800829e:	461e      	mov	r6, r3
 80082a0:	462c      	mov	r4, r5
 80082a2:	4544      	cmp	r4, r8
 80082a4:	d30e      	bcc.n	80082c4 <__mdiff+0xf8>
 80082a6:	f108 0103 	add.w	r1, r8, #3
 80082aa:	1b49      	subs	r1, r1, r5
 80082ac:	f021 0103 	bic.w	r1, r1, #3
 80082b0:	3d03      	subs	r5, #3
 80082b2:	45a8      	cmp	r8, r5
 80082b4:	bf38      	it	cc
 80082b6:	2100      	movcc	r1, #0
 80082b8:	440b      	add	r3, r1
 80082ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082be:	b191      	cbz	r1, 80082e6 <__mdiff+0x11a>
 80082c0:	6117      	str	r7, [r2, #16]
 80082c2:	e79d      	b.n	8008200 <__mdiff+0x34>
 80082c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80082c8:	46e6      	mov	lr, ip
 80082ca:	0c08      	lsrs	r0, r1, #16
 80082cc:	fa1c fc81 	uxtah	ip, ip, r1
 80082d0:	4471      	add	r1, lr
 80082d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082d6:	b289      	uxth	r1, r1
 80082d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082dc:	f846 1b04 	str.w	r1, [r6], #4
 80082e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082e4:	e7dd      	b.n	80082a2 <__mdiff+0xd6>
 80082e6:	3f01      	subs	r7, #1
 80082e8:	e7e7      	b.n	80082ba <__mdiff+0xee>
 80082ea:	bf00      	nop
 80082ec:	080090e5 	.word	0x080090e5
 80082f0:	080090f6 	.word	0x080090f6

080082f4 <__d2b>:
 80082f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082f8:	460f      	mov	r7, r1
 80082fa:	2101      	movs	r1, #1
 80082fc:	ec59 8b10 	vmov	r8, r9, d0
 8008300:	4616      	mov	r6, r2
 8008302:	f7ff fccd 	bl	8007ca0 <_Balloc>
 8008306:	4604      	mov	r4, r0
 8008308:	b930      	cbnz	r0, 8008318 <__d2b+0x24>
 800830a:	4602      	mov	r2, r0
 800830c:	4b23      	ldr	r3, [pc, #140]	@ (800839c <__d2b+0xa8>)
 800830e:	4824      	ldr	r0, [pc, #144]	@ (80083a0 <__d2b+0xac>)
 8008310:	f240 310f 	movw	r1, #783	@ 0x30f
 8008314:	f000 fa82 	bl	800881c <__assert_func>
 8008318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800831c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008320:	b10d      	cbz	r5, 8008326 <__d2b+0x32>
 8008322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	f1b8 0300 	subs.w	r3, r8, #0
 800832c:	d023      	beq.n	8008376 <__d2b+0x82>
 800832e:	4668      	mov	r0, sp
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	f7ff fd7c 	bl	8007e2e <__lo0bits>
 8008336:	e9dd 1200 	ldrd	r1, r2, [sp]
 800833a:	b1d0      	cbz	r0, 8008372 <__d2b+0x7e>
 800833c:	f1c0 0320 	rsb	r3, r0, #32
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	430b      	orrs	r3, r1
 8008346:	40c2      	lsrs	r2, r0
 8008348:	6163      	str	r3, [r4, #20]
 800834a:	9201      	str	r2, [sp, #4]
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	61a3      	str	r3, [r4, #24]
 8008350:	2b00      	cmp	r3, #0
 8008352:	bf0c      	ite	eq
 8008354:	2201      	moveq	r2, #1
 8008356:	2202      	movne	r2, #2
 8008358:	6122      	str	r2, [r4, #16]
 800835a:	b1a5      	cbz	r5, 8008386 <__d2b+0x92>
 800835c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008360:	4405      	add	r5, r0
 8008362:	603d      	str	r5, [r7, #0]
 8008364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008368:	6030      	str	r0, [r6, #0]
 800836a:	4620      	mov	r0, r4
 800836c:	b003      	add	sp, #12
 800836e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008372:	6161      	str	r1, [r4, #20]
 8008374:	e7ea      	b.n	800834c <__d2b+0x58>
 8008376:	a801      	add	r0, sp, #4
 8008378:	f7ff fd59 	bl	8007e2e <__lo0bits>
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	6163      	str	r3, [r4, #20]
 8008380:	3020      	adds	r0, #32
 8008382:	2201      	movs	r2, #1
 8008384:	e7e8      	b.n	8008358 <__d2b+0x64>
 8008386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800838a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800838e:	6038      	str	r0, [r7, #0]
 8008390:	6918      	ldr	r0, [r3, #16]
 8008392:	f7ff fd2d 	bl	8007df0 <__hi0bits>
 8008396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800839a:	e7e5      	b.n	8008368 <__d2b+0x74>
 800839c:	080090e5 	.word	0x080090e5
 80083a0:	080090f6 	.word	0x080090f6

080083a4 <__ssputs_r>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	688e      	ldr	r6, [r1, #8]
 80083aa:	461f      	mov	r7, r3
 80083ac:	42be      	cmp	r6, r7
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	4682      	mov	sl, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	4690      	mov	r8, r2
 80083b6:	d82d      	bhi.n	8008414 <__ssputs_r+0x70>
 80083b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083c0:	d026      	beq.n	8008410 <__ssputs_r+0x6c>
 80083c2:	6965      	ldr	r5, [r4, #20]
 80083c4:	6909      	ldr	r1, [r1, #16]
 80083c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083ca:	eba3 0901 	sub.w	r9, r3, r1
 80083ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083d2:	1c7b      	adds	r3, r7, #1
 80083d4:	444b      	add	r3, r9
 80083d6:	106d      	asrs	r5, r5, #1
 80083d8:	429d      	cmp	r5, r3
 80083da:	bf38      	it	cc
 80083dc:	461d      	movcc	r5, r3
 80083de:	0553      	lsls	r3, r2, #21
 80083e0:	d527      	bpl.n	8008432 <__ssputs_r+0x8e>
 80083e2:	4629      	mov	r1, r5
 80083e4:	f7ff fbd0 	bl	8007b88 <_malloc_r>
 80083e8:	4606      	mov	r6, r0
 80083ea:	b360      	cbz	r0, 8008446 <__ssputs_r+0xa2>
 80083ec:	6921      	ldr	r1, [r4, #16]
 80083ee:	464a      	mov	r2, r9
 80083f0:	f000 fa06 	bl	8008800 <memcpy>
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	6126      	str	r6, [r4, #16]
 8008402:	6165      	str	r5, [r4, #20]
 8008404:	444e      	add	r6, r9
 8008406:	eba5 0509 	sub.w	r5, r5, r9
 800840a:	6026      	str	r6, [r4, #0]
 800840c:	60a5      	str	r5, [r4, #8]
 800840e:	463e      	mov	r6, r7
 8008410:	42be      	cmp	r6, r7
 8008412:	d900      	bls.n	8008416 <__ssputs_r+0x72>
 8008414:	463e      	mov	r6, r7
 8008416:	6820      	ldr	r0, [r4, #0]
 8008418:	4632      	mov	r2, r6
 800841a:	4641      	mov	r1, r8
 800841c:	f000 f9c6 	bl	80087ac <memmove>
 8008420:	68a3      	ldr	r3, [r4, #8]
 8008422:	1b9b      	subs	r3, r3, r6
 8008424:	60a3      	str	r3, [r4, #8]
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	4433      	add	r3, r6
 800842a:	6023      	str	r3, [r4, #0]
 800842c:	2000      	movs	r0, #0
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	462a      	mov	r2, r5
 8008434:	f000 fa36 	bl	80088a4 <_realloc_r>
 8008438:	4606      	mov	r6, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d1e0      	bne.n	8008400 <__ssputs_r+0x5c>
 800843e:	6921      	ldr	r1, [r4, #16]
 8008440:	4650      	mov	r0, sl
 8008442:	f7ff fb2d 	bl	8007aa0 <_free_r>
 8008446:	230c      	movs	r3, #12
 8008448:	f8ca 3000 	str.w	r3, [sl]
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	e7e9      	b.n	800842e <__ssputs_r+0x8a>
	...

0800845c <_svfiprintf_r>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	4698      	mov	r8, r3
 8008462:	898b      	ldrh	r3, [r1, #12]
 8008464:	061b      	lsls	r3, r3, #24
 8008466:	b09d      	sub	sp, #116	@ 0x74
 8008468:	4607      	mov	r7, r0
 800846a:	460d      	mov	r5, r1
 800846c:	4614      	mov	r4, r2
 800846e:	d510      	bpl.n	8008492 <_svfiprintf_r+0x36>
 8008470:	690b      	ldr	r3, [r1, #16]
 8008472:	b973      	cbnz	r3, 8008492 <_svfiprintf_r+0x36>
 8008474:	2140      	movs	r1, #64	@ 0x40
 8008476:	f7ff fb87 	bl	8007b88 <_malloc_r>
 800847a:	6028      	str	r0, [r5, #0]
 800847c:	6128      	str	r0, [r5, #16]
 800847e:	b930      	cbnz	r0, 800848e <_svfiprintf_r+0x32>
 8008480:	230c      	movs	r3, #12
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	b01d      	add	sp, #116	@ 0x74
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	2340      	movs	r3, #64	@ 0x40
 8008490:	616b      	str	r3, [r5, #20]
 8008492:	2300      	movs	r3, #0
 8008494:	9309      	str	r3, [sp, #36]	@ 0x24
 8008496:	2320      	movs	r3, #32
 8008498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800849c:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a0:	2330      	movs	r3, #48	@ 0x30
 80084a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008640 <_svfiprintf_r+0x1e4>
 80084a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084aa:	f04f 0901 	mov.w	r9, #1
 80084ae:	4623      	mov	r3, r4
 80084b0:	469a      	mov	sl, r3
 80084b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b6:	b10a      	cbz	r2, 80084bc <_svfiprintf_r+0x60>
 80084b8:	2a25      	cmp	r2, #37	@ 0x25
 80084ba:	d1f9      	bne.n	80084b0 <_svfiprintf_r+0x54>
 80084bc:	ebba 0b04 	subs.w	fp, sl, r4
 80084c0:	d00b      	beq.n	80084da <_svfiprintf_r+0x7e>
 80084c2:	465b      	mov	r3, fp
 80084c4:	4622      	mov	r2, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7ff ff6b 	bl	80083a4 <__ssputs_r>
 80084ce:	3001      	adds	r0, #1
 80084d0:	f000 80a7 	beq.w	8008622 <_svfiprintf_r+0x1c6>
 80084d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084d6:	445a      	add	r2, fp
 80084d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80084da:	f89a 3000 	ldrb.w	r3, [sl]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 809f 	beq.w	8008622 <_svfiprintf_r+0x1c6>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ee:	f10a 0a01 	add.w	sl, sl, #1
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	9307      	str	r3, [sp, #28]
 80084f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80084fc:	4654      	mov	r4, sl
 80084fe:	2205      	movs	r2, #5
 8008500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008504:	484e      	ldr	r0, [pc, #312]	@ (8008640 <_svfiprintf_r+0x1e4>)
 8008506:	f7f7 fe63 	bl	80001d0 <memchr>
 800850a:	9a04      	ldr	r2, [sp, #16]
 800850c:	b9d8      	cbnz	r0, 8008546 <_svfiprintf_r+0xea>
 800850e:	06d0      	lsls	r0, r2, #27
 8008510:	bf44      	itt	mi
 8008512:	2320      	movmi	r3, #32
 8008514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008518:	0711      	lsls	r1, r2, #28
 800851a:	bf44      	itt	mi
 800851c:	232b      	movmi	r3, #43	@ 0x2b
 800851e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008522:	f89a 3000 	ldrb.w	r3, [sl]
 8008526:	2b2a      	cmp	r3, #42	@ 0x2a
 8008528:	d015      	beq.n	8008556 <_svfiprintf_r+0xfa>
 800852a:	9a07      	ldr	r2, [sp, #28]
 800852c:	4654      	mov	r4, sl
 800852e:	2000      	movs	r0, #0
 8008530:	f04f 0c0a 	mov.w	ip, #10
 8008534:	4621      	mov	r1, r4
 8008536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800853a:	3b30      	subs	r3, #48	@ 0x30
 800853c:	2b09      	cmp	r3, #9
 800853e:	d94b      	bls.n	80085d8 <_svfiprintf_r+0x17c>
 8008540:	b1b0      	cbz	r0, 8008570 <_svfiprintf_r+0x114>
 8008542:	9207      	str	r2, [sp, #28]
 8008544:	e014      	b.n	8008570 <_svfiprintf_r+0x114>
 8008546:	eba0 0308 	sub.w	r3, r0, r8
 800854a:	fa09 f303 	lsl.w	r3, r9, r3
 800854e:	4313      	orrs	r3, r2
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	46a2      	mov	sl, r4
 8008554:	e7d2      	b.n	80084fc <_svfiprintf_r+0xa0>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	1d19      	adds	r1, r3, #4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	9103      	str	r1, [sp, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfbb      	ittet	lt
 8008562:	425b      	neglt	r3, r3
 8008564:	f042 0202 	orrlt.w	r2, r2, #2
 8008568:	9307      	strge	r3, [sp, #28]
 800856a:	9307      	strlt	r3, [sp, #28]
 800856c:	bfb8      	it	lt
 800856e:	9204      	strlt	r2, [sp, #16]
 8008570:	7823      	ldrb	r3, [r4, #0]
 8008572:	2b2e      	cmp	r3, #46	@ 0x2e
 8008574:	d10a      	bne.n	800858c <_svfiprintf_r+0x130>
 8008576:	7863      	ldrb	r3, [r4, #1]
 8008578:	2b2a      	cmp	r3, #42	@ 0x2a
 800857a:	d132      	bne.n	80085e2 <_svfiprintf_r+0x186>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	1d1a      	adds	r2, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9203      	str	r2, [sp, #12]
 8008584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008588:	3402      	adds	r4, #2
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008650 <_svfiprintf_r+0x1f4>
 8008590:	7821      	ldrb	r1, [r4, #0]
 8008592:	2203      	movs	r2, #3
 8008594:	4650      	mov	r0, sl
 8008596:	f7f7 fe1b 	bl	80001d0 <memchr>
 800859a:	b138      	cbz	r0, 80085ac <_svfiprintf_r+0x150>
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	eba0 000a 	sub.w	r0, r0, sl
 80085a2:	2240      	movs	r2, #64	@ 0x40
 80085a4:	4082      	lsls	r2, r0
 80085a6:	4313      	orrs	r3, r2
 80085a8:	3401      	adds	r4, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b0:	4824      	ldr	r0, [pc, #144]	@ (8008644 <_svfiprintf_r+0x1e8>)
 80085b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085b6:	2206      	movs	r2, #6
 80085b8:	f7f7 fe0a 	bl	80001d0 <memchr>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d036      	beq.n	800862e <_svfiprintf_r+0x1d2>
 80085c0:	4b21      	ldr	r3, [pc, #132]	@ (8008648 <_svfiprintf_r+0x1ec>)
 80085c2:	bb1b      	cbnz	r3, 800860c <_svfiprintf_r+0x1b0>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	3307      	adds	r3, #7
 80085c8:	f023 0307 	bic.w	r3, r3, #7
 80085cc:	3308      	adds	r3, #8
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d2:	4433      	add	r3, r6
 80085d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d6:	e76a      	b.n	80084ae <_svfiprintf_r+0x52>
 80085d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085dc:	460c      	mov	r4, r1
 80085de:	2001      	movs	r0, #1
 80085e0:	e7a8      	b.n	8008534 <_svfiprintf_r+0xd8>
 80085e2:	2300      	movs	r3, #0
 80085e4:	3401      	adds	r4, #1
 80085e6:	9305      	str	r3, [sp, #20]
 80085e8:	4619      	mov	r1, r3
 80085ea:	f04f 0c0a 	mov.w	ip, #10
 80085ee:	4620      	mov	r0, r4
 80085f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f4:	3a30      	subs	r2, #48	@ 0x30
 80085f6:	2a09      	cmp	r2, #9
 80085f8:	d903      	bls.n	8008602 <_svfiprintf_r+0x1a6>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0c6      	beq.n	800858c <_svfiprintf_r+0x130>
 80085fe:	9105      	str	r1, [sp, #20]
 8008600:	e7c4      	b.n	800858c <_svfiprintf_r+0x130>
 8008602:	fb0c 2101 	mla	r1, ip, r1, r2
 8008606:	4604      	mov	r4, r0
 8008608:	2301      	movs	r3, #1
 800860a:	e7f0      	b.n	80085ee <_svfiprintf_r+0x192>
 800860c:	ab03      	add	r3, sp, #12
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	462a      	mov	r2, r5
 8008612:	4b0e      	ldr	r3, [pc, #56]	@ (800864c <_svfiprintf_r+0x1f0>)
 8008614:	a904      	add	r1, sp, #16
 8008616:	4638      	mov	r0, r7
 8008618:	f7fd fe8a 	bl	8006330 <_printf_float>
 800861c:	1c42      	adds	r2, r0, #1
 800861e:	4606      	mov	r6, r0
 8008620:	d1d6      	bne.n	80085d0 <_svfiprintf_r+0x174>
 8008622:	89ab      	ldrh	r3, [r5, #12]
 8008624:	065b      	lsls	r3, r3, #25
 8008626:	f53f af2d 	bmi.w	8008484 <_svfiprintf_r+0x28>
 800862a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800862c:	e72c      	b.n	8008488 <_svfiprintf_r+0x2c>
 800862e:	ab03      	add	r3, sp, #12
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	462a      	mov	r2, r5
 8008634:	4b05      	ldr	r3, [pc, #20]	@ (800864c <_svfiprintf_r+0x1f0>)
 8008636:	a904      	add	r1, sp, #16
 8008638:	4638      	mov	r0, r7
 800863a:	f7fe f911 	bl	8006860 <_printf_i>
 800863e:	e7ed      	b.n	800861c <_svfiprintf_r+0x1c0>
 8008640:	08009250 	.word	0x08009250
 8008644:	0800925a 	.word	0x0800925a
 8008648:	08006331 	.word	0x08006331
 800864c:	080083a5 	.word	0x080083a5
 8008650:	08009256 	.word	0x08009256

08008654 <__sflush_r>:
 8008654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	0716      	lsls	r6, r2, #28
 800865e:	4605      	mov	r5, r0
 8008660:	460c      	mov	r4, r1
 8008662:	d454      	bmi.n	800870e <__sflush_r+0xba>
 8008664:	684b      	ldr	r3, [r1, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dc02      	bgt.n	8008670 <__sflush_r+0x1c>
 800866a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	dd48      	ble.n	8008702 <__sflush_r+0xae>
 8008670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008672:	2e00      	cmp	r6, #0
 8008674:	d045      	beq.n	8008702 <__sflush_r+0xae>
 8008676:	2300      	movs	r3, #0
 8008678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800867c:	682f      	ldr	r7, [r5, #0]
 800867e:	6a21      	ldr	r1, [r4, #32]
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	d030      	beq.n	80086e6 <__sflush_r+0x92>
 8008684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	0759      	lsls	r1, r3, #29
 800868a:	d505      	bpl.n	8008698 <__sflush_r+0x44>
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008692:	b10b      	cbz	r3, 8008698 <__sflush_r+0x44>
 8008694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800869c:	6a21      	ldr	r1, [r4, #32]
 800869e:	4628      	mov	r0, r5
 80086a0:	47b0      	blx	r6
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	d106      	bne.n	80086b6 <__sflush_r+0x62>
 80086a8:	6829      	ldr	r1, [r5, #0]
 80086aa:	291d      	cmp	r1, #29
 80086ac:	d82b      	bhi.n	8008706 <__sflush_r+0xb2>
 80086ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008758 <__sflush_r+0x104>)
 80086b0:	410a      	asrs	r2, r1
 80086b2:	07d6      	lsls	r6, r2, #31
 80086b4:	d427      	bmi.n	8008706 <__sflush_r+0xb2>
 80086b6:	2200      	movs	r2, #0
 80086b8:	6062      	str	r2, [r4, #4]
 80086ba:	04d9      	lsls	r1, r3, #19
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	d504      	bpl.n	80086cc <__sflush_r+0x78>
 80086c2:	1c42      	adds	r2, r0, #1
 80086c4:	d101      	bne.n	80086ca <__sflush_r+0x76>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	b903      	cbnz	r3, 80086cc <__sflush_r+0x78>
 80086ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80086cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ce:	602f      	str	r7, [r5, #0]
 80086d0:	b1b9      	cbz	r1, 8008702 <__sflush_r+0xae>
 80086d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086d6:	4299      	cmp	r1, r3
 80086d8:	d002      	beq.n	80086e0 <__sflush_r+0x8c>
 80086da:	4628      	mov	r0, r5
 80086dc:	f7ff f9e0 	bl	8007aa0 <_free_r>
 80086e0:	2300      	movs	r3, #0
 80086e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e4:	e00d      	b.n	8008702 <__sflush_r+0xae>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b0      	blx	r6
 80086ec:	4602      	mov	r2, r0
 80086ee:	1c50      	adds	r0, r2, #1
 80086f0:	d1c9      	bne.n	8008686 <__sflush_r+0x32>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c6      	beq.n	8008686 <__sflush_r+0x32>
 80086f8:	2b1d      	cmp	r3, #29
 80086fa:	d001      	beq.n	8008700 <__sflush_r+0xac>
 80086fc:	2b16      	cmp	r3, #22
 80086fe:	d11e      	bne.n	800873e <__sflush_r+0xea>
 8008700:	602f      	str	r7, [r5, #0]
 8008702:	2000      	movs	r0, #0
 8008704:	e022      	b.n	800874c <__sflush_r+0xf8>
 8008706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870a:	b21b      	sxth	r3, r3
 800870c:	e01b      	b.n	8008746 <__sflush_r+0xf2>
 800870e:	690f      	ldr	r7, [r1, #16]
 8008710:	2f00      	cmp	r7, #0
 8008712:	d0f6      	beq.n	8008702 <__sflush_r+0xae>
 8008714:	0793      	lsls	r3, r2, #30
 8008716:	680e      	ldr	r6, [r1, #0]
 8008718:	bf08      	it	eq
 800871a:	694b      	ldreq	r3, [r1, #20]
 800871c:	600f      	str	r7, [r1, #0]
 800871e:	bf18      	it	ne
 8008720:	2300      	movne	r3, #0
 8008722:	eba6 0807 	sub.w	r8, r6, r7
 8008726:	608b      	str	r3, [r1, #8]
 8008728:	f1b8 0f00 	cmp.w	r8, #0
 800872c:	dde9      	ble.n	8008702 <__sflush_r+0xae>
 800872e:	6a21      	ldr	r1, [r4, #32]
 8008730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008732:	4643      	mov	r3, r8
 8008734:	463a      	mov	r2, r7
 8008736:	4628      	mov	r0, r5
 8008738:	47b0      	blx	r6
 800873a:	2800      	cmp	r0, #0
 800873c:	dc08      	bgt.n	8008750 <__sflush_r+0xfc>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	4407      	add	r7, r0
 8008752:	eba8 0800 	sub.w	r8, r8, r0
 8008756:	e7e7      	b.n	8008728 <__sflush_r+0xd4>
 8008758:	dfbffffe 	.word	0xdfbffffe

0800875c <_fflush_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	4605      	mov	r5, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b913      	cbnz	r3, 800876c <_fflush_r+0x10>
 8008766:	2500      	movs	r5, #0
 8008768:	4628      	mov	r0, r5
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	b118      	cbz	r0, 8008776 <_fflush_r+0x1a>
 800876e:	6a03      	ldr	r3, [r0, #32]
 8008770:	b90b      	cbnz	r3, 8008776 <_fflush_r+0x1a>
 8008772:	f7fe fa21 	bl	8006bb8 <__sinit>
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0f3      	beq.n	8008766 <_fflush_r+0xa>
 800877e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008780:	07d0      	lsls	r0, r2, #31
 8008782:	d404      	bmi.n	800878e <_fflush_r+0x32>
 8008784:	0599      	lsls	r1, r3, #22
 8008786:	d402      	bmi.n	800878e <_fflush_r+0x32>
 8008788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878a:	f7fe fb38 	bl	8006dfe <__retarget_lock_acquire_recursive>
 800878e:	4628      	mov	r0, r5
 8008790:	4621      	mov	r1, r4
 8008792:	f7ff ff5f 	bl	8008654 <__sflush_r>
 8008796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008798:	07da      	lsls	r2, r3, #31
 800879a:	4605      	mov	r5, r0
 800879c:	d4e4      	bmi.n	8008768 <_fflush_r+0xc>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	059b      	lsls	r3, r3, #22
 80087a2:	d4e1      	bmi.n	8008768 <_fflush_r+0xc>
 80087a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a6:	f7fe fb2b 	bl	8006e00 <__retarget_lock_release_recursive>
 80087aa:	e7dd      	b.n	8008768 <_fflush_r+0xc>

080087ac <memmove>:
 80087ac:	4288      	cmp	r0, r1
 80087ae:	b510      	push	{r4, lr}
 80087b0:	eb01 0402 	add.w	r4, r1, r2
 80087b4:	d902      	bls.n	80087bc <memmove+0x10>
 80087b6:	4284      	cmp	r4, r0
 80087b8:	4623      	mov	r3, r4
 80087ba:	d807      	bhi.n	80087cc <memmove+0x20>
 80087bc:	1e43      	subs	r3, r0, #1
 80087be:	42a1      	cmp	r1, r4
 80087c0:	d008      	beq.n	80087d4 <memmove+0x28>
 80087c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ca:	e7f8      	b.n	80087be <memmove+0x12>
 80087cc:	4402      	add	r2, r0
 80087ce:	4601      	mov	r1, r0
 80087d0:	428a      	cmp	r2, r1
 80087d2:	d100      	bne.n	80087d6 <memmove+0x2a>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087de:	e7f7      	b.n	80087d0 <memmove+0x24>

080087e0 <_sbrk_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	@ (80087fc <_sbrk_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 f908 	bl	8001a00 <_sbrk>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_sbrk_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_sbrk_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	2000043c 	.word	0x2000043c

08008800 <memcpy>:
 8008800:	440a      	add	r2, r1
 8008802:	4291      	cmp	r1, r2
 8008804:	f100 33ff 	add.w	r3, r0, #4294967295
 8008808:	d100      	bne.n	800880c <memcpy+0xc>
 800880a:	4770      	bx	lr
 800880c:	b510      	push	{r4, lr}
 800880e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008816:	4291      	cmp	r1, r2
 8008818:	d1f9      	bne.n	800880e <memcpy+0xe>
 800881a:	bd10      	pop	{r4, pc}

0800881c <__assert_func>:
 800881c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881e:	4614      	mov	r4, r2
 8008820:	461a      	mov	r2, r3
 8008822:	4b09      	ldr	r3, [pc, #36]	@ (8008848 <__assert_func+0x2c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4605      	mov	r5, r0
 8008828:	68d8      	ldr	r0, [r3, #12]
 800882a:	b954      	cbnz	r4, 8008842 <__assert_func+0x26>
 800882c:	4b07      	ldr	r3, [pc, #28]	@ (800884c <__assert_func+0x30>)
 800882e:	461c      	mov	r4, r3
 8008830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008834:	9100      	str	r1, [sp, #0]
 8008836:	462b      	mov	r3, r5
 8008838:	4905      	ldr	r1, [pc, #20]	@ (8008850 <__assert_func+0x34>)
 800883a:	f000 f86f 	bl	800891c <fiprintf>
 800883e:	f000 f87f 	bl	8008940 <abort>
 8008842:	4b04      	ldr	r3, [pc, #16]	@ (8008854 <__assert_func+0x38>)
 8008844:	e7f4      	b.n	8008830 <__assert_func+0x14>
 8008846:	bf00      	nop
 8008848:	20000034 	.word	0x20000034
 800884c:	080092a6 	.word	0x080092a6
 8008850:	08009278 	.word	0x08009278
 8008854:	0800926b 	.word	0x0800926b

08008858 <_calloc_r>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	fba1 5402 	umull	r5, r4, r1, r2
 800885e:	b93c      	cbnz	r4, 8008870 <_calloc_r+0x18>
 8008860:	4629      	mov	r1, r5
 8008862:	f7ff f991 	bl	8007b88 <_malloc_r>
 8008866:	4606      	mov	r6, r0
 8008868:	b928      	cbnz	r0, 8008876 <_calloc_r+0x1e>
 800886a:	2600      	movs	r6, #0
 800886c:	4630      	mov	r0, r6
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	220c      	movs	r2, #12
 8008872:	6002      	str	r2, [r0, #0]
 8008874:	e7f9      	b.n	800886a <_calloc_r+0x12>
 8008876:	462a      	mov	r2, r5
 8008878:	4621      	mov	r1, r4
 800887a:	f7fe fa36 	bl	8006cea <memset>
 800887e:	e7f5      	b.n	800886c <_calloc_r+0x14>

08008880 <__ascii_mbtowc>:
 8008880:	b082      	sub	sp, #8
 8008882:	b901      	cbnz	r1, 8008886 <__ascii_mbtowc+0x6>
 8008884:	a901      	add	r1, sp, #4
 8008886:	b142      	cbz	r2, 800889a <__ascii_mbtowc+0x1a>
 8008888:	b14b      	cbz	r3, 800889e <__ascii_mbtowc+0x1e>
 800888a:	7813      	ldrb	r3, [r2, #0]
 800888c:	600b      	str	r3, [r1, #0]
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	1e10      	subs	r0, r2, #0
 8008892:	bf18      	it	ne
 8008894:	2001      	movne	r0, #1
 8008896:	b002      	add	sp, #8
 8008898:	4770      	bx	lr
 800889a:	4610      	mov	r0, r2
 800889c:	e7fb      	b.n	8008896 <__ascii_mbtowc+0x16>
 800889e:	f06f 0001 	mvn.w	r0, #1
 80088a2:	e7f8      	b.n	8008896 <__ascii_mbtowc+0x16>

080088a4 <_realloc_r>:
 80088a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	4680      	mov	r8, r0
 80088aa:	4615      	mov	r5, r2
 80088ac:	460c      	mov	r4, r1
 80088ae:	b921      	cbnz	r1, 80088ba <_realloc_r+0x16>
 80088b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	4611      	mov	r1, r2
 80088b6:	f7ff b967 	b.w	8007b88 <_malloc_r>
 80088ba:	b92a      	cbnz	r2, 80088c8 <_realloc_r+0x24>
 80088bc:	f7ff f8f0 	bl	8007aa0 <_free_r>
 80088c0:	2400      	movs	r4, #0
 80088c2:	4620      	mov	r0, r4
 80088c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c8:	f000 f841 	bl	800894e <_malloc_usable_size_r>
 80088cc:	4285      	cmp	r5, r0
 80088ce:	4606      	mov	r6, r0
 80088d0:	d802      	bhi.n	80088d8 <_realloc_r+0x34>
 80088d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088d6:	d8f4      	bhi.n	80088c2 <_realloc_r+0x1e>
 80088d8:	4629      	mov	r1, r5
 80088da:	4640      	mov	r0, r8
 80088dc:	f7ff f954 	bl	8007b88 <_malloc_r>
 80088e0:	4607      	mov	r7, r0
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d0ec      	beq.n	80088c0 <_realloc_r+0x1c>
 80088e6:	42b5      	cmp	r5, r6
 80088e8:	462a      	mov	r2, r5
 80088ea:	4621      	mov	r1, r4
 80088ec:	bf28      	it	cs
 80088ee:	4632      	movcs	r2, r6
 80088f0:	f7ff ff86 	bl	8008800 <memcpy>
 80088f4:	4621      	mov	r1, r4
 80088f6:	4640      	mov	r0, r8
 80088f8:	f7ff f8d2 	bl	8007aa0 <_free_r>
 80088fc:	463c      	mov	r4, r7
 80088fe:	e7e0      	b.n	80088c2 <_realloc_r+0x1e>

08008900 <__ascii_wctomb>:
 8008900:	4603      	mov	r3, r0
 8008902:	4608      	mov	r0, r1
 8008904:	b141      	cbz	r1, 8008918 <__ascii_wctomb+0x18>
 8008906:	2aff      	cmp	r2, #255	@ 0xff
 8008908:	d904      	bls.n	8008914 <__ascii_wctomb+0x14>
 800890a:	228a      	movs	r2, #138	@ 0x8a
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	4770      	bx	lr
 8008914:	700a      	strb	r2, [r1, #0]
 8008916:	2001      	movs	r0, #1
 8008918:	4770      	bx	lr
	...

0800891c <fiprintf>:
 800891c:	b40e      	push	{r1, r2, r3}
 800891e:	b503      	push	{r0, r1, lr}
 8008920:	4601      	mov	r1, r0
 8008922:	ab03      	add	r3, sp, #12
 8008924:	4805      	ldr	r0, [pc, #20]	@ (800893c <fiprintf+0x20>)
 8008926:	f853 2b04 	ldr.w	r2, [r3], #4
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	f000 f83f 	bl	80089b0 <_vfiprintf_r>
 8008932:	b002      	add	sp, #8
 8008934:	f85d eb04 	ldr.w	lr, [sp], #4
 8008938:	b003      	add	sp, #12
 800893a:	4770      	bx	lr
 800893c:	20000034 	.word	0x20000034

08008940 <abort>:
 8008940:	b508      	push	{r3, lr}
 8008942:	2006      	movs	r0, #6
 8008944:	f000 fa08 	bl	8008d58 <raise>
 8008948:	2001      	movs	r0, #1
 800894a:	f7f8 ffe1 	bl	8001910 <_exit>

0800894e <_malloc_usable_size_r>:
 800894e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008952:	1f18      	subs	r0, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfbc      	itt	lt
 8008958:	580b      	ldrlt	r3, [r1, r0]
 800895a:	18c0      	addlt	r0, r0, r3
 800895c:	4770      	bx	lr

0800895e <__sfputc_r>:
 800895e:	6893      	ldr	r3, [r2, #8]
 8008960:	3b01      	subs	r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	b410      	push	{r4}
 8008966:	6093      	str	r3, [r2, #8]
 8008968:	da08      	bge.n	800897c <__sfputc_r+0x1e>
 800896a:	6994      	ldr	r4, [r2, #24]
 800896c:	42a3      	cmp	r3, r4
 800896e:	db01      	blt.n	8008974 <__sfputc_r+0x16>
 8008970:	290a      	cmp	r1, #10
 8008972:	d103      	bne.n	800897c <__sfputc_r+0x1e>
 8008974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008978:	f000 b932 	b.w	8008be0 <__swbuf_r>
 800897c:	6813      	ldr	r3, [r2, #0]
 800897e:	1c58      	adds	r0, r3, #1
 8008980:	6010      	str	r0, [r2, #0]
 8008982:	7019      	strb	r1, [r3, #0]
 8008984:	4608      	mov	r0, r1
 8008986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800898a:	4770      	bx	lr

0800898c <__sfputs_r>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	4614      	mov	r4, r2
 8008994:	18d5      	adds	r5, r2, r3
 8008996:	42ac      	cmp	r4, r5
 8008998:	d101      	bne.n	800899e <__sfputs_r+0x12>
 800899a:	2000      	movs	r0, #0
 800899c:	e007      	b.n	80089ae <__sfputs_r+0x22>
 800899e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a2:	463a      	mov	r2, r7
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ffda 	bl	800895e <__sfputc_r>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d1f3      	bne.n	8008996 <__sfputs_r+0xa>
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089b0 <_vfiprintf_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	460d      	mov	r5, r1
 80089b6:	b09d      	sub	sp, #116	@ 0x74
 80089b8:	4614      	mov	r4, r2
 80089ba:	4698      	mov	r8, r3
 80089bc:	4606      	mov	r6, r0
 80089be:	b118      	cbz	r0, 80089c8 <_vfiprintf_r+0x18>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <_vfiprintf_r+0x18>
 80089c4:	f7fe f8f8 	bl	8006bb8 <__sinit>
 80089c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ca:	07d9      	lsls	r1, r3, #31
 80089cc:	d405      	bmi.n	80089da <_vfiprintf_r+0x2a>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	059a      	lsls	r2, r3, #22
 80089d2:	d402      	bmi.n	80089da <_vfiprintf_r+0x2a>
 80089d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d6:	f7fe fa12 	bl	8006dfe <__retarget_lock_acquire_recursive>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	071b      	lsls	r3, r3, #28
 80089de:	d501      	bpl.n	80089e4 <_vfiprintf_r+0x34>
 80089e0:	692b      	ldr	r3, [r5, #16]
 80089e2:	b99b      	cbnz	r3, 8008a0c <_vfiprintf_r+0x5c>
 80089e4:	4629      	mov	r1, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f938 	bl	8008c5c <__swsetup_r>
 80089ec:	b170      	cbz	r0, 8008a0c <_vfiprintf_r+0x5c>
 80089ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f0:	07dc      	lsls	r4, r3, #31
 80089f2:	d504      	bpl.n	80089fe <_vfiprintf_r+0x4e>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	b01d      	add	sp, #116	@ 0x74
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	0598      	lsls	r0, r3, #22
 8008a02:	d4f7      	bmi.n	80089f4 <_vfiprintf_r+0x44>
 8008a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a06:	f7fe f9fb 	bl	8006e00 <__retarget_lock_release_recursive>
 8008a0a:	e7f3      	b.n	80089f4 <_vfiprintf_r+0x44>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a10:	2320      	movs	r3, #32
 8008a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a1a:	2330      	movs	r3, #48	@ 0x30
 8008a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bcc <_vfiprintf_r+0x21c>
 8008a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a24:	f04f 0901 	mov.w	r9, #1
 8008a28:	4623      	mov	r3, r4
 8008a2a:	469a      	mov	sl, r3
 8008a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a30:	b10a      	cbz	r2, 8008a36 <_vfiprintf_r+0x86>
 8008a32:	2a25      	cmp	r2, #37	@ 0x25
 8008a34:	d1f9      	bne.n	8008a2a <_vfiprintf_r+0x7a>
 8008a36:	ebba 0b04 	subs.w	fp, sl, r4
 8008a3a:	d00b      	beq.n	8008a54 <_vfiprintf_r+0xa4>
 8008a3c:	465b      	mov	r3, fp
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff ffa2 	bl	800898c <__sfputs_r>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f000 80a7 	beq.w	8008b9c <_vfiprintf_r+0x1ec>
 8008a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a50:	445a      	add	r2, fp
 8008a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a54:	f89a 3000 	ldrb.w	r3, [sl]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 809f 	beq.w	8008b9c <_vfiprintf_r+0x1ec>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a68:	f10a 0a01 	add.w	sl, sl, #1
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	9307      	str	r3, [sp, #28]
 8008a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a76:	4654      	mov	r4, sl
 8008a78:	2205      	movs	r2, #5
 8008a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7e:	4853      	ldr	r0, [pc, #332]	@ (8008bcc <_vfiprintf_r+0x21c>)
 8008a80:	f7f7 fba6 	bl	80001d0 <memchr>
 8008a84:	9a04      	ldr	r2, [sp, #16]
 8008a86:	b9d8      	cbnz	r0, 8008ac0 <_vfiprintf_r+0x110>
 8008a88:	06d1      	lsls	r1, r2, #27
 8008a8a:	bf44      	itt	mi
 8008a8c:	2320      	movmi	r3, #32
 8008a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a92:	0713      	lsls	r3, r2, #28
 8008a94:	bf44      	itt	mi
 8008a96:	232b      	movmi	r3, #43	@ 0x2b
 8008a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa2:	d015      	beq.n	8008ad0 <_vfiprintf_r+0x120>
 8008aa4:	9a07      	ldr	r2, [sp, #28]
 8008aa6:	4654      	mov	r4, sl
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f04f 0c0a 	mov.w	ip, #10
 8008aae:	4621      	mov	r1, r4
 8008ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab4:	3b30      	subs	r3, #48	@ 0x30
 8008ab6:	2b09      	cmp	r3, #9
 8008ab8:	d94b      	bls.n	8008b52 <_vfiprintf_r+0x1a2>
 8008aba:	b1b0      	cbz	r0, 8008aea <_vfiprintf_r+0x13a>
 8008abc:	9207      	str	r2, [sp, #28]
 8008abe:	e014      	b.n	8008aea <_vfiprintf_r+0x13a>
 8008ac0:	eba0 0308 	sub.w	r3, r0, r8
 8008ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	46a2      	mov	sl, r4
 8008ace:	e7d2      	b.n	8008a76 <_vfiprintf_r+0xc6>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	1d19      	adds	r1, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	9103      	str	r1, [sp, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfbb      	ittet	lt
 8008adc:	425b      	neglt	r3, r3
 8008ade:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae2:	9307      	strge	r3, [sp, #28]
 8008ae4:	9307      	strlt	r3, [sp, #28]
 8008ae6:	bfb8      	it	lt
 8008ae8:	9204      	strlt	r2, [sp, #16]
 8008aea:	7823      	ldrb	r3, [r4, #0]
 8008aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aee:	d10a      	bne.n	8008b06 <_vfiprintf_r+0x156>
 8008af0:	7863      	ldrb	r3, [r4, #1]
 8008af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af4:	d132      	bne.n	8008b5c <_vfiprintf_r+0x1ac>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	9203      	str	r2, [sp, #12]
 8008afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b02:	3402      	adds	r4, #2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bdc <_vfiprintf_r+0x22c>
 8008b0a:	7821      	ldrb	r1, [r4, #0]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f7f7 fb5e 	bl	80001d0 <memchr>
 8008b14:	b138      	cbz	r0, 8008b26 <_vfiprintf_r+0x176>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	eba0 000a 	sub.w	r0, r0, sl
 8008b1c:	2240      	movs	r2, #64	@ 0x40
 8008b1e:	4082      	lsls	r2, r0
 8008b20:	4313      	orrs	r3, r2
 8008b22:	3401      	adds	r4, #1
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4829      	ldr	r0, [pc, #164]	@ (8008bd0 <_vfiprintf_r+0x220>)
 8008b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b30:	2206      	movs	r2, #6
 8008b32:	f7f7 fb4d 	bl	80001d0 <memchr>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d03f      	beq.n	8008bba <_vfiprintf_r+0x20a>
 8008b3a:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <_vfiprintf_r+0x224>)
 8008b3c:	bb1b      	cbnz	r3, 8008b86 <_vfiprintf_r+0x1d6>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	3308      	adds	r3, #8
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4c:	443b      	add	r3, r7
 8008b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b50:	e76a      	b.n	8008a28 <_vfiprintf_r+0x78>
 8008b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b56:	460c      	mov	r4, r1
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e7a8      	b.n	8008aae <_vfiprintf_r+0xfe>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	4619      	mov	r1, r3
 8008b64:	f04f 0c0a 	mov.w	ip, #10
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6e:	3a30      	subs	r2, #48	@ 0x30
 8008b70:	2a09      	cmp	r2, #9
 8008b72:	d903      	bls.n	8008b7c <_vfiprintf_r+0x1cc>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c6      	beq.n	8008b06 <_vfiprintf_r+0x156>
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	e7c4      	b.n	8008b06 <_vfiprintf_r+0x156>
 8008b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b80:	4604      	mov	r4, r0
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f0      	b.n	8008b68 <_vfiprintf_r+0x1b8>
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	4b12      	ldr	r3, [pc, #72]	@ (8008bd8 <_vfiprintf_r+0x228>)
 8008b8e:	a904      	add	r1, sp, #16
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7fd fbcd 	bl	8006330 <_printf_float>
 8008b96:	4607      	mov	r7, r0
 8008b98:	1c78      	adds	r0, r7, #1
 8008b9a:	d1d6      	bne.n	8008b4a <_vfiprintf_r+0x19a>
 8008b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d405      	bmi.n	8008bae <_vfiprintf_r+0x1fe>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	059a      	lsls	r2, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_vfiprintf_r+0x1fe>
 8008ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008baa:	f7fe f929 	bl	8006e00 <__retarget_lock_release_recursive>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	065b      	lsls	r3, r3, #25
 8008bb2:	f53f af1f 	bmi.w	80089f4 <_vfiprintf_r+0x44>
 8008bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb8:	e71e      	b.n	80089f8 <_vfiprintf_r+0x48>
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <_vfiprintf_r+0x228>)
 8008bc2:	a904      	add	r1, sp, #16
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7fd fe4b 	bl	8006860 <_printf_i>
 8008bca:	e7e4      	b.n	8008b96 <_vfiprintf_r+0x1e6>
 8008bcc:	08009250 	.word	0x08009250
 8008bd0:	0800925a 	.word	0x0800925a
 8008bd4:	08006331 	.word	0x08006331
 8008bd8:	0800898d 	.word	0x0800898d
 8008bdc:	08009256 	.word	0x08009256

08008be0 <__swbuf_r>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	460e      	mov	r6, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	4605      	mov	r5, r0
 8008be8:	b118      	cbz	r0, 8008bf2 <__swbuf_r+0x12>
 8008bea:	6a03      	ldr	r3, [r0, #32]
 8008bec:	b90b      	cbnz	r3, 8008bf2 <__swbuf_r+0x12>
 8008bee:	f7fd ffe3 	bl	8006bb8 <__sinit>
 8008bf2:	69a3      	ldr	r3, [r4, #24]
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	071a      	lsls	r2, r3, #28
 8008bfa:	d501      	bpl.n	8008c00 <__swbuf_r+0x20>
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	b943      	cbnz	r3, 8008c12 <__swbuf_r+0x32>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 f82a 	bl	8008c5c <__swsetup_r>
 8008c08:	b118      	cbz	r0, 8008c12 <__swbuf_r+0x32>
 8008c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c0e:	4638      	mov	r0, r7
 8008c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	6922      	ldr	r2, [r4, #16]
 8008c16:	1a98      	subs	r0, r3, r2
 8008c18:	6963      	ldr	r3, [r4, #20]
 8008c1a:	b2f6      	uxtb	r6, r6
 8008c1c:	4283      	cmp	r3, r0
 8008c1e:	4637      	mov	r7, r6
 8008c20:	dc05      	bgt.n	8008c2e <__swbuf_r+0x4e>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f7ff fd99 	bl	800875c <_fflush_r>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1ed      	bne.n	8008c0a <__swbuf_r+0x2a>
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	60a3      	str	r3, [r4, #8]
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	6022      	str	r2, [r4, #0]
 8008c3a:	701e      	strb	r6, [r3, #0]
 8008c3c:	6962      	ldr	r2, [r4, #20]
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d004      	beq.n	8008c4e <__swbuf_r+0x6e>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	07db      	lsls	r3, r3, #31
 8008c48:	d5e1      	bpl.n	8008c0e <__swbuf_r+0x2e>
 8008c4a:	2e0a      	cmp	r6, #10
 8008c4c:	d1df      	bne.n	8008c0e <__swbuf_r+0x2e>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff fd83 	bl	800875c <_fflush_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0d9      	beq.n	8008c0e <__swbuf_r+0x2e>
 8008c5a:	e7d6      	b.n	8008c0a <__swbuf_r+0x2a>

08008c5c <__swsetup_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4b29      	ldr	r3, [pc, #164]	@ (8008d04 <__swsetup_r+0xa8>)
 8008c60:	4605      	mov	r5, r0
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	460c      	mov	r4, r1
 8008c66:	b118      	cbz	r0, 8008c70 <__swsetup_r+0x14>
 8008c68:	6a03      	ldr	r3, [r0, #32]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <__swsetup_r+0x14>
 8008c6c:	f7fd ffa4 	bl	8006bb8 <__sinit>
 8008c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c74:	0719      	lsls	r1, r3, #28
 8008c76:	d422      	bmi.n	8008cbe <__swsetup_r+0x62>
 8008c78:	06da      	lsls	r2, r3, #27
 8008c7a:	d407      	bmi.n	8008c8c <__swsetup_r+0x30>
 8008c7c:	2209      	movs	r2, #9
 8008c7e:	602a      	str	r2, [r5, #0]
 8008c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8a:	e033      	b.n	8008cf4 <__swsetup_r+0x98>
 8008c8c:	0758      	lsls	r0, r3, #29
 8008c8e:	d512      	bpl.n	8008cb6 <__swsetup_r+0x5a>
 8008c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c92:	b141      	cbz	r1, 8008ca6 <__swsetup_r+0x4a>
 8008c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	d002      	beq.n	8008ca2 <__swsetup_r+0x46>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7fe feff 	bl	8007aa0 <_free_r>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6063      	str	r3, [r4, #4]
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f043 0308 	orr.w	r3, r3, #8
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	b94b      	cbnz	r3, 8008cd6 <__swsetup_r+0x7a>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ccc:	d003      	beq.n	8008cd6 <__swsetup_r+0x7a>
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 f883 	bl	8008ddc <__smakebuf_r>
 8008cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cda:	f013 0201 	ands.w	r2, r3, #1
 8008cde:	d00a      	beq.n	8008cf6 <__swsetup_r+0x9a>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	60a2      	str	r2, [r4, #8]
 8008ce4:	6962      	ldr	r2, [r4, #20]
 8008ce6:	4252      	negs	r2, r2
 8008ce8:	61a2      	str	r2, [r4, #24]
 8008cea:	6922      	ldr	r2, [r4, #16]
 8008cec:	b942      	cbnz	r2, 8008d00 <__swsetup_r+0xa4>
 8008cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cf2:	d1c5      	bne.n	8008c80 <__swsetup_r+0x24>
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	0799      	lsls	r1, r3, #30
 8008cf8:	bf58      	it	pl
 8008cfa:	6962      	ldrpl	r2, [r4, #20]
 8008cfc:	60a2      	str	r2, [r4, #8]
 8008cfe:	e7f4      	b.n	8008cea <__swsetup_r+0x8e>
 8008d00:	2000      	movs	r0, #0
 8008d02:	e7f7      	b.n	8008cf4 <__swsetup_r+0x98>
 8008d04:	20000034 	.word	0x20000034

08008d08 <_raise_r>:
 8008d08:	291f      	cmp	r1, #31
 8008d0a:	b538      	push	{r3, r4, r5, lr}
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	d904      	bls.n	8008d1c <_raise_r+0x14>
 8008d12:	2316      	movs	r3, #22
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d1e:	b112      	cbz	r2, 8008d26 <_raise_r+0x1e>
 8008d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d24:	b94b      	cbnz	r3, 8008d3a <_raise_r+0x32>
 8008d26:	4628      	mov	r0, r5
 8008d28:	f000 f830 	bl	8008d8c <_getpid_r>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4628      	mov	r0, r5
 8008d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d36:	f000 b817 	b.w	8008d68 <_kill_r>
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d00a      	beq.n	8008d54 <_raise_r+0x4c>
 8008d3e:	1c59      	adds	r1, r3, #1
 8008d40:	d103      	bne.n	8008d4a <_raise_r+0x42>
 8008d42:	2316      	movs	r3, #22
 8008d44:	6003      	str	r3, [r0, #0]
 8008d46:	2001      	movs	r0, #1
 8008d48:	e7e7      	b.n	8008d1a <_raise_r+0x12>
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d50:	4620      	mov	r0, r4
 8008d52:	4798      	blx	r3
 8008d54:	2000      	movs	r0, #0
 8008d56:	e7e0      	b.n	8008d1a <_raise_r+0x12>

08008d58 <raise>:
 8008d58:	4b02      	ldr	r3, [pc, #8]	@ (8008d64 <raise+0xc>)
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	f7ff bfd3 	b.w	8008d08 <_raise_r>
 8008d62:	bf00      	nop
 8008d64:	20000034 	.word	0x20000034

08008d68 <_kill_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	@ (8008d88 <_kill_r+0x20>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	f7f8 fdbb 	bl	80018f0 <_kill>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	d102      	bne.n	8008d84 <_kill_r+0x1c>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b103      	cbz	r3, 8008d84 <_kill_r+0x1c>
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
 8008d86:	bf00      	nop
 8008d88:	2000043c 	.word	0x2000043c

08008d8c <_getpid_r>:
 8008d8c:	f7f8 bda8 	b.w	80018e0 <_getpid>

08008d90 <__swhatbuf_r>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	460c      	mov	r4, r1
 8008d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	b096      	sub	sp, #88	@ 0x58
 8008d9c:	4615      	mov	r5, r2
 8008d9e:	461e      	mov	r6, r3
 8008da0:	da0d      	bge.n	8008dbe <__swhatbuf_r+0x2e>
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008da8:	f04f 0100 	mov.w	r1, #0
 8008dac:	bf14      	ite	ne
 8008dae:	2340      	movne	r3, #64	@ 0x40
 8008db0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008db4:	2000      	movs	r0, #0
 8008db6:	6031      	str	r1, [r6, #0]
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	b016      	add	sp, #88	@ 0x58
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	466a      	mov	r2, sp
 8008dc0:	f000 f848 	bl	8008e54 <_fstat_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	dbec      	blt.n	8008da2 <__swhatbuf_r+0x12>
 8008dc8:	9901      	ldr	r1, [sp, #4]
 8008dca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dd2:	4259      	negs	r1, r3
 8008dd4:	4159      	adcs	r1, r3
 8008dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dda:	e7eb      	b.n	8008db4 <__swhatbuf_r+0x24>

08008ddc <__smakebuf_r>:
 8008ddc:	898b      	ldrh	r3, [r1, #12]
 8008dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de0:	079d      	lsls	r5, r3, #30
 8008de2:	4606      	mov	r6, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	d507      	bpl.n	8008df8 <__smakebuf_r+0x1c>
 8008de8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	6123      	str	r3, [r4, #16]
 8008df0:	2301      	movs	r3, #1
 8008df2:	6163      	str	r3, [r4, #20]
 8008df4:	b003      	add	sp, #12
 8008df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df8:	ab01      	add	r3, sp, #4
 8008dfa:	466a      	mov	r2, sp
 8008dfc:	f7ff ffc8 	bl	8008d90 <__swhatbuf_r>
 8008e00:	9f00      	ldr	r7, [sp, #0]
 8008e02:	4605      	mov	r5, r0
 8008e04:	4639      	mov	r1, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7fe febe 	bl	8007b88 <_malloc_r>
 8008e0c:	b948      	cbnz	r0, 8008e22 <__smakebuf_r+0x46>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	059a      	lsls	r2, r3, #22
 8008e14:	d4ee      	bmi.n	8008df4 <__smakebuf_r+0x18>
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	f043 0302 	orr.w	r3, r3, #2
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	e7e2      	b.n	8008de8 <__smakebuf_r+0xc>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	6020      	str	r0, [r4, #0]
 8008e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e32:	b15b      	cbz	r3, 8008e4c <__smakebuf_r+0x70>
 8008e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 f81d 	bl	8008e78 <_isatty_r>
 8008e3e:	b128      	cbz	r0, 8008e4c <__smakebuf_r+0x70>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f023 0303 	bic.w	r3, r3, #3
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	431d      	orrs	r5, r3
 8008e50:	81a5      	strh	r5, [r4, #12]
 8008e52:	e7cf      	b.n	8008df4 <__smakebuf_r+0x18>

08008e54 <_fstat_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	@ (8008e74 <_fstat_r+0x20>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	f7f8 fda5 	bl	80019b0 <_fstat>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	d102      	bne.n	8008e70 <_fstat_r+0x1c>
 8008e6a:	682b      	ldr	r3, [r5, #0]
 8008e6c:	b103      	cbz	r3, 8008e70 <_fstat_r+0x1c>
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
 8008e72:	bf00      	nop
 8008e74:	2000043c 	.word	0x2000043c

08008e78 <_isatty_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	@ (8008e94 <_isatty_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 fda4 	bl	80019d0 <_isatty>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_isatty_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_isatty_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	2000043c 	.word	0x2000043c

08008e98 <_init>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr

08008ea4 <_fini>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr
